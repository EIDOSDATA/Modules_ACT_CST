
ATC_CST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006828  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  080068e8  080068e8  000078e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c30  08006c30  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006c30  08006c30  00007c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c38  08006c38  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c38  08006c38  00007c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c3c  08006c3c  00007c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006c40  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a5c  20000068  08006ca8  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ac4  08006ca8  00008ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144af  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e0  00000000  00000000  0001c53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0001fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dad  00000000  00000000  00020dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ddd  00000000  00000000  00021b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b1e  00000000  00000000  0003695a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007533a  00000000  00000000  0004f478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c47b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a0  00000000  00000000  000c47f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c8d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080068d0 	.word	0x080068d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080068d0 	.word	0x080068d0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c2:	003b      	movs	r3, r7
 80004c4:	0018      	movs	r0, r3
 80004c6:	2308      	movs	r3, #8
 80004c8:	001a      	movs	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	f005 fc5e 	bl	8005d8c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80004d0:	4b3d      	ldr	r3, [pc, #244]	@ (80005c8 <MX_ADC_Init+0x10c>)
 80004d2:	4a3e      	ldr	r2, [pc, #248]	@ (80005cc <MX_ADC_Init+0x110>)
 80004d4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80004d6:	4b3c      	ldr	r3, [pc, #240]	@ (80005c8 <MX_ADC_Init+0x10c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004dc:	4b3a      	ldr	r3, [pc, #232]	@ (80005c8 <MX_ADC_Init+0x10c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004e2:	4b39      	ldr	r3, [pc, #228]	@ (80005c8 <MX_ADC_Init+0x10c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004e8:	4b37      	ldr	r3, [pc, #220]	@ (80005c8 <MX_ADC_Init+0x10c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004ee:	4b36      	ldr	r3, [pc, #216]	@ (80005c8 <MX_ADC_Init+0x10c>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f4:	4b34      	ldr	r3, [pc, #208]	@ (80005c8 <MX_ADC_Init+0x10c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004fa:	4b33      	ldr	r3, [pc, #204]	@ (80005c8 <MX_ADC_Init+0x10c>)
 80004fc:	2220      	movs	r2, #32
 80004fe:	2100      	movs	r1, #0
 8000500:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC_Init+0x10c>)
 8000504:	2221      	movs	r2, #33	@ 0x21
 8000506:	2100      	movs	r1, #0
 8000508:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050a:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC_Init+0x10c>)
 800050c:	2200      	movs	r2, #0
 800050e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC_Init+0x10c>)
 8000512:	22c2      	movs	r2, #194	@ 0xc2
 8000514:	32ff      	adds	r2, #255	@ 0xff
 8000516:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000518:	4b2b      	ldr	r3, [pc, #172]	@ (80005c8 <MX_ADC_Init+0x10c>)
 800051a:	222c      	movs	r2, #44	@ 0x2c
 800051c:	2100      	movs	r1, #0
 800051e:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000520:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC_Init+0x10c>)
 8000522:	2208      	movs	r2, #8
 8000524:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000526:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <MX_ADC_Init+0x10c>)
 8000528:	2200      	movs	r2, #0
 800052a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800052c:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC_Init+0x10c>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000532:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <MX_ADC_Init+0x10c>)
 8000534:	2200      	movs	r2, #0
 8000536:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000538:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC_Init+0x10c>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800053e:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <MX_ADC_Init+0x10c>)
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fcad 	bl	8001ea0 <HAL_ADC_Init>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_ADC_Init+0x92>
  {
    Error_Handler();
 800054a:	f001 f974 	bl	8001836 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800054e:	003b      	movs	r3, r7
 8000550:	2201      	movs	r2, #1
 8000552:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000554:	003b      	movs	r3, r7
 8000556:	2280      	movs	r2, #128	@ 0x80
 8000558:	0152      	lsls	r2, r2, #5
 800055a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800055c:	003a      	movs	r2, r7
 800055e:	4b1a      	ldr	r3, [pc, #104]	@ (80005c8 <MX_ADC_Init+0x10c>)
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f001 ff5c 	bl	8002420 <HAL_ADC_ConfigChannel>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 800056c:	f001 f963 	bl	8001836 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000570:	003b      	movs	r3, r7
 8000572:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <MX_ADC_Init+0x114>)
 8000574:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000576:	003a      	movs	r2, r7
 8000578:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <MX_ADC_Init+0x10c>)
 800057a:	0011      	movs	r1, r2
 800057c:	0018      	movs	r0, r3
 800057e:	f001 ff4f 	bl	8002420 <HAL_ADC_ConfigChannel>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <MX_ADC_Init+0xce>
  {
    Error_Handler();
 8000586:	f001 f956 	bl	8001836 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800058a:	003b      	movs	r3, r7
 800058c:	4a11      	ldr	r2, [pc, #68]	@ (80005d4 <MX_ADC_Init+0x118>)
 800058e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000590:	003a      	movs	r2, r7
 8000592:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <MX_ADC_Init+0x10c>)
 8000594:	0011      	movs	r1, r2
 8000596:	0018      	movs	r0, r3
 8000598:	f001 ff42 	bl	8002420 <HAL_ADC_ConfigChannel>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC_Init+0xe8>
  {
    Error_Handler();
 80005a0:	f001 f949 	bl	8001836 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005a4:	003b      	movs	r3, r7
 80005a6:	4a0c      	ldr	r2, [pc, #48]	@ (80005d8 <MX_ADC_Init+0x11c>)
 80005a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005aa:	003a      	movs	r2, r7
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <MX_ADC_Init+0x10c>)
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 ff35 	bl	8002420 <HAL_ADC_ConfigChannel>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC_Init+0x102>
  {
    Error_Handler();
 80005ba:	f001 f93c 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b002      	add	sp, #8
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	20000084 	.word	0x20000084
 80005cc:	40012400 	.word	0x40012400
 80005d0:	04000002 	.word	0x04000002
 80005d4:	08000004 	.word	0x08000004
 80005d8:	0c000008 	.word	0x0c000008

080005dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b089      	sub	sp, #36	@ 0x24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	240c      	movs	r4, #12
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	0018      	movs	r0, r3
 80005ea:	2314      	movs	r3, #20
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f005 fbcc 	bl	8005d8c <memset>
  if(adcHandle->Instance==ADC1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a2a      	ldr	r2, [pc, #168]	@ (80006a4 <HAL_ADC_MspInit+0xc8>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d14d      	bne.n	800069a <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005fe:	4b2a      	ldr	r3, [pc, #168]	@ (80006a8 <HAL_ADC_MspInit+0xcc>)
 8000600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000602:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <HAL_ADC_MspInit+0xcc>)
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	0089      	lsls	r1, r1, #2
 8000608:	430a      	orrs	r2, r1
 800060a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <HAL_ADC_MspInit+0xcc>)
 800060e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000610:	4b25      	ldr	r3, [pc, #148]	@ (80006a8 <HAL_ADC_MspInit+0xcc>)
 8000612:	2101      	movs	r1, #1
 8000614:	430a      	orrs	r2, r1
 8000616:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <HAL_ADC_MspInit+0xcc>)
 800061a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061c:	2201      	movs	r2, #1
 800061e:	4013      	ands	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	220f      	movs	r2, #15
 8000628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2203      	movs	r2, #3
 800062e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	193a      	adds	r2, r7, r4
 8000638:	23a0      	movs	r3, #160	@ 0xa0
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	0011      	movs	r1, r2
 800063e:	0018      	movs	r0, r3
 8000640:	f002 fba0 	bl	8002d84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000644:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000646:	4a1a      	ldr	r2, [pc, #104]	@ (80006b0 <HAL_ADC_MspInit+0xd4>)
 8000648:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800064a:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000650:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000656:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800065c:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 800065e:	2280      	movs	r2, #128	@ 0x80
 8000660:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000662:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000664:	2280      	movs	r2, #128	@ 0x80
 8000666:	0052      	lsls	r2, r2, #1
 8000668:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 800066c:	2280      	movs	r2, #128	@ 0x80
 800066e:	00d2      	lsls	r2, r2, #3
 8000670:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000674:	2220      	movs	r2, #32
 8000676:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000680:	0018      	movs	r0, r3
 8000682:	f002 f93d 	bl	8002900 <HAL_DMA_Init>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800068a:	f001 f8d4 	bl	8001836 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a06      	ldr	r2, [pc, #24]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000692:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <HAL_ADC_MspInit+0xd0>)
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b009      	add	sp, #36	@ 0x24
 80006a0:	bd90      	pop	{r4, r7, pc}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	40012400 	.word	0x40012400
 80006a8:	40021000 	.word	0x40021000
 80006ac:	200000e0 	.word	0x200000e0
 80006b0:	40020008 	.word	0x40020008

080006b4 <Motor_On>:
uint32_t mean_ch3;

#define DUMMY() dummy_fnc();

void Motor_On(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET); //ON
 80006b8:	23a0      	movs	r3, #160	@ 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	2200      	movs	r2, #0
 80006be:	2180      	movs	r1, #128	@ 0x80
 80006c0:	0018      	movs	r0, r3
 80006c2:	f002 fccd 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, RESET); //ON
 80006c6:	2380      	movs	r3, #128	@ 0x80
 80006c8:	0059      	lsls	r1, r3, #1
 80006ca:	23a0      	movs	r3, #160	@ 0xa0
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	2200      	movs	r2, #0
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 fcc5 	bl	8003060 <HAL_GPIO_WritePin>
}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <Motor_Off>:

void Motor_Off(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, SET); //OFF
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	0059      	lsls	r1, r3, #1
 80006e4:	23a0      	movs	r3, #160	@ 0xa0
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	2201      	movs	r2, #1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f002 fcb8 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET); //OFF
 80006f0:	23a0      	movs	r3, #160	@ 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	2201      	movs	r2, #1
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 fcb1 	bl	8003060 <HAL_GPIO_WritePin>
}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <Sensor_On>:
	printf(">>Motor Off!!\r\n");

}

void Sensor_On(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PHOTO_PULSE0_GPIO_Port, PHOTO_PULSE0_Pin, SET); //ON
 8000708:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <Sensor_On+0x6c>)
 800070a:	2201      	movs	r2, #1
 800070c:	2101      	movs	r1, #1
 800070e:	0018      	movs	r0, r3
 8000710:	f002 fca6 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PHOTO_PULSE1_GPIO_Port, PHOTO_PULSE1_Pin, SET); //ON
 8000714:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <Sensor_On+0x6c>)
 8000716:	2201      	movs	r2, #1
 8000718:	2102      	movs	r1, #2
 800071a:	0018      	movs	r0, r3
 800071c:	f002 fca0 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PHOTO_PULSE2_GPIO_Port, PHOTO_PULSE2_Pin, SET); //ON
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <Sensor_On+0x70>)
 8000722:	2201      	movs	r2, #1
 8000724:	2101      	movs	r1, #1
 8000726:	0018      	movs	r0, r3
 8000728:	f002 fc9a 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PHOTO_PULSE3_GPIO_Port, PHOTO_PULSE3_Pin, SET); //ON
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <Sensor_On+0x70>)
 800072e:	2201      	movs	r2, #1
 8000730:	2102      	movs	r1, #2
 8000732:	0018      	movs	r0, r3
 8000734:	f002 fc94 	bl	8003060 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(IR_PULSE0_GPIO_Port, IR_PULSE0_Pin, RESET); //ON
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <Sensor_On+0x6c>)
 800073a:	2200      	movs	r2, #0
 800073c:	2104      	movs	r1, #4
 800073e:	0018      	movs	r0, r3
 8000740:	f002 fc8e 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IR_PULSE1_GPIO_Port, IR_PULSE1_Pin, RESET); //ON
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <Sensor_On+0x6c>)
 8000746:	2200      	movs	r2, #0
 8000748:	2108      	movs	r1, #8
 800074a:	0018      	movs	r0, r3
 800074c:	f002 fc88 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IR_PULSE2_GPIO_Port, IR_PULSE2_Pin, RESET); //ON
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <Sensor_On+0x6c>)
 8000752:	2200      	movs	r2, #0
 8000754:	2110      	movs	r1, #16
 8000756:	0018      	movs	r0, r3
 8000758:	f002 fc82 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IR_PULSE3_GPIO_Port, IR_PULSE3_Pin, RESET); //ON
 800075c:	4b04      	ldr	r3, [pc, #16]	@ (8000770 <Sensor_On+0x6c>)
 800075e:	2200      	movs	r2, #0
 8000760:	2120      	movs	r1, #32
 8000762:	0018      	movs	r0, r3
 8000764:	f002 fc7c 	bl	8003060 <HAL_GPIO_WritePin>

}
 8000768:	46c0      	nop			@ (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	50000400 	.word	0x50000400
 8000774:	50001c00 	.word	0x50001c00

08000778 <Sensor_Off>:

void Sensor_Off(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(PHOTO_PULSE0_GPIO_Port, PHOTO_PULSE0_Pin, RESET); //OFF
 800077c:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <Sensor_Off+0x6c>)
 800077e:	2200      	movs	r2, #0
 8000780:	2101      	movs	r1, #1
 8000782:	0018      	movs	r0, r3
 8000784:	f002 fc6c 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PHOTO_PULSE1_GPIO_Port, PHOTO_PULSE1_Pin, RESET); //OFF
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <Sensor_Off+0x6c>)
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	0018      	movs	r0, r3
 8000790:	f002 fc66 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PHOTO_PULSE2_GPIO_Port, PHOTO_PULSE2_Pin, RESET); //OFF
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <Sensor_Off+0x70>)
 8000796:	2200      	movs	r2, #0
 8000798:	2101      	movs	r1, #1
 800079a:	0018      	movs	r0, r3
 800079c:	f002 fc60 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PHOTO_PULSE3_GPIO_Port, PHOTO_PULSE3_Pin, RESET); //OFF
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <Sensor_Off+0x70>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	2102      	movs	r1, #2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fc5a 	bl	8003060 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(IR_PULSE0_GPIO_Port, IR_PULSE0_Pin, SET); //OFF
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <Sensor_Off+0x6c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	2104      	movs	r1, #4
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 fc54 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IR_PULSE1_GPIO_Port, IR_PULSE1_Pin, SET); //OFF
 80007b8:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <Sensor_Off+0x6c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	2108      	movs	r1, #8
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 fc4e 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IR_PULSE2_GPIO_Port, IR_PULSE2_Pin, SET); //OFF
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <Sensor_Off+0x6c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	2110      	movs	r1, #16
 80007ca:	0018      	movs	r0, r3
 80007cc:	f002 fc48 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IR_PULSE3_GPIO_Port, IR_PULSE3_Pin, SET); //OFF
 80007d0:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <Sensor_Off+0x6c>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	2120      	movs	r1, #32
 80007d6:	0018      	movs	r0, r3
 80007d8:	f002 fc42 	bl	8003060 <HAL_GPIO_WritePin>

}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	50000400 	.word	0x50000400
 80007e8:	50001c00 	.word	0x50001c00

080007ec <get_sensor>:

void get_sensor(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
	uint16_t number = 20;
 80007f2:	1cbb      	adds	r3, r7, #2
 80007f4:	2214      	movs	r2, #20
 80007f6:	801a      	strh	r2, [r3, #0]

	mean_ch0 = 0;
 80007f8:	4b4d      	ldr	r3, [pc, #308]	@ (8000930 <get_sensor+0x144>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
	mean_ch1 = 0;
 80007fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000934 <get_sensor+0x148>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
	mean_ch2 = 0;
 8000804:	4b4c      	ldr	r3, [pc, #304]	@ (8000938 <get_sensor+0x14c>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
	mean_ch3 = 0;
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <get_sensor+0x150>)
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]

	uint32_t sum_ch0 = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
	uint32_t sum_ch1 = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
	uint32_t sum_ch2 = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
	uint32_t sum_ch3 = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < number; i++)
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	e03a      	b.n	800089c <get_sensor+0xb0>
	{
		Sensor_On();
 8000826:	f7ff ff6d 	bl	8000704 <Sensor_On>
		HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_buffer_ch, 4);
 800082a:	4945      	ldr	r1, [pc, #276]	@ (8000940 <get_sensor+0x154>)
 800082c:	4b45      	ldr	r3, [pc, #276]	@ (8000944 <get_sensor+0x158>)
 800082e:	2204      	movs	r2, #4
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fca9 	bl	8002188 <HAL_ADC_Start_DMA>
		//HAL_ADC_Start_DMA(&hadc, (uint16_t*) adc_buffer_ch, 4);
		delay_nop(10);
 8000836:	200a      	movs	r0, #10
 8000838:	f000 f890 	bl	800095c <delay_nop>
		Sensor_Off();
 800083c:	f7ff ff9c 	bl	8000778 <Sensor_Off>

		sum_ch0 += adc_buffer_ch[0];
 8000840:	4b3f      	ldr	r3, [pc, #252]	@ (8000940 <get_sensor+0x154>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	001a      	movs	r2, r3
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	189b      	adds	r3, r3, r2
 800084c:	617b      	str	r3, [r7, #20]
		sum_ch1 += adc_buffer_ch[1];
 800084e:	4b3c      	ldr	r3, [pc, #240]	@ (8000940 <get_sensor+0x154>)
 8000850:	885b      	ldrh	r3, [r3, #2]
 8000852:	b29b      	uxth	r3, r3
 8000854:	001a      	movs	r2, r3
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	189b      	adds	r3, r3, r2
 800085a:	613b      	str	r3, [r7, #16]
		sum_ch2 += adc_buffer_ch[2];
 800085c:	4b38      	ldr	r3, [pc, #224]	@ (8000940 <get_sensor+0x154>)
 800085e:	889b      	ldrh	r3, [r3, #4]
 8000860:	b29b      	uxth	r3, r3
 8000862:	001a      	movs	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	189b      	adds	r3, r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
		sum_ch3 += adc_buffer_ch[3];
 800086a:	4b35      	ldr	r3, [pc, #212]	@ (8000940 <get_sensor+0x154>)
 800086c:	88db      	ldrh	r3, [r3, #6]
 800086e:	b29b      	uxth	r3, r3
 8000870:	001a      	movs	r2, r3
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	189b      	adds	r3, r3, r2
 8000876:	60bb      	str	r3, [r7, #8]

		adc_buffer_ch[0] = 0;
 8000878:	4b31      	ldr	r3, [pc, #196]	@ (8000940 <get_sensor+0x154>)
 800087a:	2200      	movs	r2, #0
 800087c:	801a      	strh	r2, [r3, #0]
		adc_buffer_ch[1] = 0;
 800087e:	4b30      	ldr	r3, [pc, #192]	@ (8000940 <get_sensor+0x154>)
 8000880:	2200      	movs	r2, #0
 8000882:	805a      	strh	r2, [r3, #2]
		adc_buffer_ch[2] = 0;
 8000884:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <get_sensor+0x154>)
 8000886:	2200      	movs	r2, #0
 8000888:	809a      	strh	r2, [r3, #4]
		adc_buffer_ch[3] = 0;
 800088a:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <get_sensor+0x154>)
 800088c:	2200      	movs	r2, #0
 800088e:	80da      	strh	r2, [r3, #6]

		delay_nop(100);
 8000890:	2064      	movs	r0, #100	@ 0x64
 8000892:	f000 f863 	bl	800095c <delay_nop>
	for (int i = 0; i < number; i++)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3301      	adds	r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	1cbb      	adds	r3, r7, #2
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dbbf      	blt.n	8000826 <get_sensor+0x3a>
	}

	mean_ch0 = sum_ch0 / number;
 80008a6:	1cbb      	adds	r3, r7, #2
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	0019      	movs	r1, r3
 80008ac:	6978      	ldr	r0, [r7, #20]
 80008ae:	f7ff fc35 	bl	800011c <__udivsi3>
 80008b2:	0003      	movs	r3, r0
 80008b4:	001a      	movs	r2, r3
 80008b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <get_sensor+0x144>)
 80008b8:	601a      	str	r2, [r3, #0]
	mean_ch1 = sum_ch1 / number;
 80008ba:	1cbb      	adds	r3, r7, #2
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	0019      	movs	r1, r3
 80008c0:	6938      	ldr	r0, [r7, #16]
 80008c2:	f7ff fc2b 	bl	800011c <__udivsi3>
 80008c6:	0003      	movs	r3, r0
 80008c8:	001a      	movs	r2, r3
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <get_sensor+0x148>)
 80008cc:	601a      	str	r2, [r3, #0]
	mean_ch2 = sum_ch2 / number;
 80008ce:	1cbb      	adds	r3, r7, #2
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	0019      	movs	r1, r3
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f7ff fc21 	bl	800011c <__udivsi3>
 80008da:	0003      	movs	r3, r0
 80008dc:	001a      	movs	r2, r3
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <get_sensor+0x14c>)
 80008e0:	601a      	str	r2, [r3, #0]
	mean_ch3 = sum_ch3 / number;
 80008e2:	1cbb      	adds	r3, r7, #2
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	0019      	movs	r1, r3
 80008e8:	68b8      	ldr	r0, [r7, #8]
 80008ea:	f7ff fc17 	bl	800011c <__udivsi3>
 80008ee:	0003      	movs	r3, r0
 80008f0:	001a      	movs	r2, r3
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <get_sensor+0x150>)
 80008f4:	601a      	str	r2, [r3, #0]

	if (ref == 1)
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <get_sensor+0x15c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d113      	bne.n	8000926 <get_sensor+0x13a>
	{
		sen_ref1 = mean_ch0;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <get_sensor+0x144>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	b29a      	uxth	r2, r3
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <get_sensor+0x160>)
 8000906:	801a      	strh	r2, [r3, #0]
		sen_ref2 = mean_ch1;
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <get_sensor+0x148>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <get_sensor+0x164>)
 8000910:	801a      	strh	r2, [r3, #0]
		sen_ref3 = mean_ch2;
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <get_sensor+0x14c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <get_sensor+0x168>)
 800091a:	801a      	strh	r2, [r3, #0]
		sen_ref4 = mean_ch3;
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <get_sensor+0x150>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <get_sensor+0x16c>)
 8000924:	801a      	strh	r2, [r3, #0]
	}

}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b006      	add	sp, #24
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	2000014c 	.word	0x2000014c
 8000934:	20000150 	.word	0x20000150
 8000938:	20000154 	.word	0x20000154
 800093c:	20000158 	.word	0x20000158
 8000940:	20000134 	.word	0x20000134
 8000944:	20000084 	.word	0x20000084
 8000948:	20000140 	.word	0x20000140
 800094c:	20000142 	.word	0x20000142
 8000950:	20000144 	.word	0x20000144
 8000954:	20000146 	.word	0x20000146
 8000958:	20000148 	.word	0x20000148

0800095c <delay_nop>:
#if 0
void delay_nop(unsigned int cnt)
#else
int delay_nop(unsigned int cnt)
#endif
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < cnt * 2; i++)
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	e004      	b.n	8000974 <delay_nop+0x18>
	{
		DUMMY();
 800096a:	f000 f80d 	bl	8000988 <dummy_fnc>
	for (int i = 0; i < cnt * 2; i++)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	005a      	lsls	r2, r3, #1
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	429a      	cmp	r2, r3
 800097c:	d8f5      	bhi.n	800096a <delay_nop+0xe>
	}
	return 0;
 800097e:	2300      	movs	r3, #0
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	b004      	add	sp, #16
 8000986:	bd80      	pop	{r7, pc}

08000988 <dummy_fnc>:

void dummy_fnc(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
	int dummy = 1; // unused data
 800098e:	2301      	movs	r3, #1
 8000990:	607b      	str	r3, [r7, #4]
	//if(dummy == 1) dummy=0;
}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b002      	add	sp, #8
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <check_dispose>:

uint8_t check_dispose(void)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b083      	sub	sp, #12
 80009a0:	af02      	add	r7, sp, #8
	if (mean_ch0 > (sen_ref1 + Sensitivity))
 80009a2:	4ba7      	ldr	r3, [pc, #668]	@ (8000c40 <check_dispose+0x2a4>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	3309      	adds	r3, #9
 80009a8:	001a      	movs	r2, r3
 80009aa:	4ba6      	ldr	r3, [pc, #664]	@ (8000c44 <check_dispose+0x2a8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d21e      	bcs.n	80009f0 <check_dispose+0x54>
	{
		dispose = 1;
 80009b2:	4ba5      	ldr	r3, [pc, #660]	@ (8000c48 <check_dispose+0x2ac>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
		printf(">>sensor1 high detect!!\r\n");
 80009b8:	4ba4      	ldr	r3, [pc, #656]	@ (8000c4c <check_dispose+0x2b0>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f005 f8f0 	bl	8005ba0 <puts>
		printf("sen_ref1:%d, sen_ref2:%d, sen_ref3:%d, sen_ref4:%d\r\n", sen_ref1, sen_ref2, sen_ref3, sen_ref4);
 80009c0:	4b9f      	ldr	r3, [pc, #636]	@ (8000c40 <check_dispose+0x2a4>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	0019      	movs	r1, r3
 80009c6:	4ba2      	ldr	r3, [pc, #648]	@ (8000c50 <check_dispose+0x2b4>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	001a      	movs	r2, r3
 80009cc:	4ba1      	ldr	r3, [pc, #644]	@ (8000c54 <check_dispose+0x2b8>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	001c      	movs	r4, r3
 80009d2:	4ba1      	ldr	r3, [pc, #644]	@ (8000c58 <check_dispose+0x2bc>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	48a1      	ldr	r0, [pc, #644]	@ (8000c5c <check_dispose+0x2c0>)
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	0023      	movs	r3, r4
 80009dc:	f005 f87a 	bl	8005ad4 <iprintf>
		printf("sensor_1:%ld\r\n", mean_ch0);
 80009e0:	4b98      	ldr	r3, [pc, #608]	@ (8000c44 <check_dispose+0x2a8>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b9e      	ldr	r3, [pc, #632]	@ (8000c60 <check_dispose+0x2c4>)
 80009e6:	0011      	movs	r1, r2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f005 f873 	bl	8005ad4 <iprintf>
 80009ee:	e120      	b.n	8000c32 <check_dispose+0x296>

	}
	else if (mean_ch0 < (sen_ref1 - Low_Sensitivity))
 80009f0:	4b93      	ldr	r3, [pc, #588]	@ (8000c40 <check_dispose+0x2a4>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	3b09      	subs	r3, #9
 80009f6:	001a      	movs	r2, r3
 80009f8:	4b92      	ldr	r3, [pc, #584]	@ (8000c44 <check_dispose+0x2a8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d91e      	bls.n	8000a3e <check_dispose+0xa2>
	{
		dispose = 1;
 8000a00:	4b91      	ldr	r3, [pc, #580]	@ (8000c48 <check_dispose+0x2ac>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
		printf(">>sensor1 low detect!!\r\n");
 8000a06:	4b97      	ldr	r3, [pc, #604]	@ (8000c64 <check_dispose+0x2c8>)
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f005 f8c9 	bl	8005ba0 <puts>
		printf("sen_ref1:%d, sen_ref2:%d, sen_ref3:%d, sen_ref4:%d\r\n", sen_ref1, sen_ref2, sen_ref3, sen_ref4);
 8000a0e:	4b8c      	ldr	r3, [pc, #560]	@ (8000c40 <check_dispose+0x2a4>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	0019      	movs	r1, r3
 8000a14:	4b8e      	ldr	r3, [pc, #568]	@ (8000c50 <check_dispose+0x2b4>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	001a      	movs	r2, r3
 8000a1a:	4b8e      	ldr	r3, [pc, #568]	@ (8000c54 <check_dispose+0x2b8>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	001c      	movs	r4, r3
 8000a20:	4b8d      	ldr	r3, [pc, #564]	@ (8000c58 <check_dispose+0x2bc>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	488d      	ldr	r0, [pc, #564]	@ (8000c5c <check_dispose+0x2c0>)
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	0023      	movs	r3, r4
 8000a2a:	f005 f853 	bl	8005ad4 <iprintf>
		printf("sensor_1:%ld\r\n", mean_ch0);
 8000a2e:	4b85      	ldr	r3, [pc, #532]	@ (8000c44 <check_dispose+0x2a8>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4b8b      	ldr	r3, [pc, #556]	@ (8000c60 <check_dispose+0x2c4>)
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f005 f84c 	bl	8005ad4 <iprintf>
 8000a3c:	e0f9      	b.n	8000c32 <check_dispose+0x296>

	}
	else if (mean_ch1 > sen_ref2 + Sensitivity)
 8000a3e:	4b84      	ldr	r3, [pc, #528]	@ (8000c50 <check_dispose+0x2b4>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	3309      	adds	r3, #9
 8000a44:	001a      	movs	r2, r3
 8000a46:	4b88      	ldr	r3, [pc, #544]	@ (8000c68 <check_dispose+0x2cc>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d21e      	bcs.n	8000a8c <check_dispose+0xf0>
	{
		dispose = 1;
 8000a4e:	4b7e      	ldr	r3, [pc, #504]	@ (8000c48 <check_dispose+0x2ac>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
		printf(">>sensor2 high detect!!\r\n");
 8000a54:	4b85      	ldr	r3, [pc, #532]	@ (8000c6c <check_dispose+0x2d0>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f005 f8a2 	bl	8005ba0 <puts>
		printf("sen_ref1:%d, sen_ref2:%d, sen_ref3:%d, sen_ref4:%d\r\n", sen_ref1, sen_ref2, sen_ref3, sen_ref4);
 8000a5c:	4b78      	ldr	r3, [pc, #480]	@ (8000c40 <check_dispose+0x2a4>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	0019      	movs	r1, r3
 8000a62:	4b7b      	ldr	r3, [pc, #492]	@ (8000c50 <check_dispose+0x2b4>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	001a      	movs	r2, r3
 8000a68:	4b7a      	ldr	r3, [pc, #488]	@ (8000c54 <check_dispose+0x2b8>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	001c      	movs	r4, r3
 8000a6e:	4b7a      	ldr	r3, [pc, #488]	@ (8000c58 <check_dispose+0x2bc>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	487a      	ldr	r0, [pc, #488]	@ (8000c5c <check_dispose+0x2c0>)
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	0023      	movs	r3, r4
 8000a78:	f005 f82c 	bl	8005ad4 <iprintf>
		printf("sensor_2:%ld\r\n", mean_ch1);
 8000a7c:	4b7a      	ldr	r3, [pc, #488]	@ (8000c68 <check_dispose+0x2cc>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b7b      	ldr	r3, [pc, #492]	@ (8000c70 <check_dispose+0x2d4>)
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f005 f825 	bl	8005ad4 <iprintf>
 8000a8a:	e0d2      	b.n	8000c32 <check_dispose+0x296>

	}
	else if (mean_ch1 < sen_ref2 - Low_Sensitivity)
 8000a8c:	4b70      	ldr	r3, [pc, #448]	@ (8000c50 <check_dispose+0x2b4>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	3b09      	subs	r3, #9
 8000a92:	001a      	movs	r2, r3
 8000a94:	4b74      	ldr	r3, [pc, #464]	@ (8000c68 <check_dispose+0x2cc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d91e      	bls.n	8000ada <check_dispose+0x13e>
	{
		dispose = 1;
 8000a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8000c48 <check_dispose+0x2ac>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
		printf(">>sensor2 low detect!!\r\n");
 8000aa2:	4b74      	ldr	r3, [pc, #464]	@ (8000c74 <check_dispose+0x2d8>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f005 f87b 	bl	8005ba0 <puts>
		printf("sen_ref1:%d, sen_ref2:%d, sen_ref3:%d, sen_ref4:%d\r\n", sen_ref1, sen_ref2, sen_ref3, sen_ref4);
 8000aaa:	4b65      	ldr	r3, [pc, #404]	@ (8000c40 <check_dispose+0x2a4>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	0019      	movs	r1, r3
 8000ab0:	4b67      	ldr	r3, [pc, #412]	@ (8000c50 <check_dispose+0x2b4>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	4b67      	ldr	r3, [pc, #412]	@ (8000c54 <check_dispose+0x2b8>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	001c      	movs	r4, r3
 8000abc:	4b66      	ldr	r3, [pc, #408]	@ (8000c58 <check_dispose+0x2bc>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	4866      	ldr	r0, [pc, #408]	@ (8000c5c <check_dispose+0x2c0>)
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	0023      	movs	r3, r4
 8000ac6:	f005 f805 	bl	8005ad4 <iprintf>
		printf("sensor_2:%ld\r\n", mean_ch1);
 8000aca:	4b67      	ldr	r3, [pc, #412]	@ (8000c68 <check_dispose+0x2cc>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b68      	ldr	r3, [pc, #416]	@ (8000c70 <check_dispose+0x2d4>)
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f004 fffe 	bl	8005ad4 <iprintf>
 8000ad8:	e0ab      	b.n	8000c32 <check_dispose+0x296>

	}
	else if (mean_ch2 > sen_ref3 + Sensitivity)
 8000ada:	4b5e      	ldr	r3, [pc, #376]	@ (8000c54 <check_dispose+0x2b8>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	3309      	adds	r3, #9
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	4b65      	ldr	r3, [pc, #404]	@ (8000c78 <check_dispose+0x2dc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d21e      	bcs.n	8000b28 <check_dispose+0x18c>
	{
		dispose = 1;
 8000aea:	4b57      	ldr	r3, [pc, #348]	@ (8000c48 <check_dispose+0x2ac>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
		printf(">>sensor3 high detect!!\r\n");
 8000af0:	4b62      	ldr	r3, [pc, #392]	@ (8000c7c <check_dispose+0x2e0>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f005 f854 	bl	8005ba0 <puts>
		printf("sen_ref1:%d, sen_ref2:%d, sen_ref3:%d, sen_ref4:%d\r\n", sen_ref1, sen_ref2, sen_ref3, sen_ref4);
 8000af8:	4b51      	ldr	r3, [pc, #324]	@ (8000c40 <check_dispose+0x2a4>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	0019      	movs	r1, r3
 8000afe:	4b54      	ldr	r3, [pc, #336]	@ (8000c50 <check_dispose+0x2b4>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	001a      	movs	r2, r3
 8000b04:	4b53      	ldr	r3, [pc, #332]	@ (8000c54 <check_dispose+0x2b8>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	001c      	movs	r4, r3
 8000b0a:	4b53      	ldr	r3, [pc, #332]	@ (8000c58 <check_dispose+0x2bc>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	4853      	ldr	r0, [pc, #332]	@ (8000c5c <check_dispose+0x2c0>)
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	0023      	movs	r3, r4
 8000b14:	f004 ffde 	bl	8005ad4 <iprintf>
		printf("sensor_3:%ld\r\n", mean_ch2);
 8000b18:	4b57      	ldr	r3, [pc, #348]	@ (8000c78 <check_dispose+0x2dc>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b58      	ldr	r3, [pc, #352]	@ (8000c80 <check_dispose+0x2e4>)
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f004 ffd7 	bl	8005ad4 <iprintf>
 8000b26:	e084      	b.n	8000c32 <check_dispose+0x296>

	}
	else if (mean_ch2 < sen_ref3 - Low_Sensitivity)
 8000b28:	4b4a      	ldr	r3, [pc, #296]	@ (8000c54 <check_dispose+0x2b8>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	3b09      	subs	r3, #9
 8000b2e:	001a      	movs	r2, r3
 8000b30:	4b51      	ldr	r3, [pc, #324]	@ (8000c78 <check_dispose+0x2dc>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d91e      	bls.n	8000b76 <check_dispose+0x1da>
	{
		dispose = 1;
 8000b38:	4b43      	ldr	r3, [pc, #268]	@ (8000c48 <check_dispose+0x2ac>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
		printf(">>sensor3 low detect!!\r\n");
 8000b3e:	4b51      	ldr	r3, [pc, #324]	@ (8000c84 <check_dispose+0x2e8>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f005 f82d 	bl	8005ba0 <puts>
		printf("sen_ref1:%d, sen_ref2:%d, sen_ref3:%d, sen_ref4:%d\r\n", sen_ref1, sen_ref2, sen_ref3, sen_ref4);
 8000b46:	4b3e      	ldr	r3, [pc, #248]	@ (8000c40 <check_dispose+0x2a4>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	4b40      	ldr	r3, [pc, #256]	@ (8000c50 <check_dispose+0x2b4>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	001a      	movs	r2, r3
 8000b52:	4b40      	ldr	r3, [pc, #256]	@ (8000c54 <check_dispose+0x2b8>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	001c      	movs	r4, r3
 8000b58:	4b3f      	ldr	r3, [pc, #252]	@ (8000c58 <check_dispose+0x2bc>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	483f      	ldr	r0, [pc, #252]	@ (8000c5c <check_dispose+0x2c0>)
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	0023      	movs	r3, r4
 8000b62:	f004 ffb7 	bl	8005ad4 <iprintf>
		printf("sensor_3:%ld\r\n", mean_ch2);
 8000b66:	4b44      	ldr	r3, [pc, #272]	@ (8000c78 <check_dispose+0x2dc>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b45      	ldr	r3, [pc, #276]	@ (8000c80 <check_dispose+0x2e4>)
 8000b6c:	0011      	movs	r1, r2
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f004 ffb0 	bl	8005ad4 <iprintf>
 8000b74:	e05d      	b.n	8000c32 <check_dispose+0x296>

	}

	else if (mean_ch3 > sen_ref4 + Sensitivity)
 8000b76:	4b38      	ldr	r3, [pc, #224]	@ (8000c58 <check_dispose+0x2bc>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	3309      	adds	r3, #9
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	4b42      	ldr	r3, [pc, #264]	@ (8000c88 <check_dispose+0x2ec>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d21e      	bcs.n	8000bc4 <check_dispose+0x228>
	{
		dispose = 1;
 8000b86:	4b30      	ldr	r3, [pc, #192]	@ (8000c48 <check_dispose+0x2ac>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
		printf(">>sensor4 high detect!!\r\n");
 8000b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c8c <check_dispose+0x2f0>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f005 f806 	bl	8005ba0 <puts>
		printf("sen_ref1:%d, sen_ref2:%d, sen_ref3:%d, sen_ref4:%d\r\n", sen_ref1, sen_ref2, sen_ref3, sen_ref4);
 8000b94:	4b2a      	ldr	r3, [pc, #168]	@ (8000c40 <check_dispose+0x2a4>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	0019      	movs	r1, r3
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c50 <check_dispose+0x2b4>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c54 <check_dispose+0x2b8>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c58 <check_dispose+0x2bc>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	482c      	ldr	r0, [pc, #176]	@ (8000c5c <check_dispose+0x2c0>)
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	0023      	movs	r3, r4
 8000bb0:	f004 ff90 	bl	8005ad4 <iprintf>
		printf("sensor_4:%ld\r\n", mean_ch3);
 8000bb4:	4b34      	ldr	r3, [pc, #208]	@ (8000c88 <check_dispose+0x2ec>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b35      	ldr	r3, [pc, #212]	@ (8000c90 <check_dispose+0x2f4>)
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f004 ff89 	bl	8005ad4 <iprintf>
 8000bc2:	e036      	b.n	8000c32 <check_dispose+0x296>

	}
	else if (mean_ch3 < sen_ref4 - Sensitivity)
 8000bc4:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <check_dispose+0x2bc>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	3b09      	subs	r3, #9
 8000bca:	001a      	movs	r2, r3
 8000bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c88 <check_dispose+0x2ec>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d91e      	bls.n	8000c12 <check_dispose+0x276>
	{
		dispose = 1;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <check_dispose+0x2ac>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
		printf(">>sensor4 low detect!!\r\n");
 8000bda:	4b2e      	ldr	r3, [pc, #184]	@ (8000c94 <check_dispose+0x2f8>)
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f004 ffdf 	bl	8005ba0 <puts>
		printf("sen_ref1:%d, sen_ref2:%d, sen_ref3:%d, sen_ref4:%d\r\n", sen_ref1, sen_ref2, sen_ref3, sen_ref4);
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <check_dispose+0x2a4>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	0019      	movs	r1, r3
 8000be8:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <check_dispose+0x2b4>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	001a      	movs	r2, r3
 8000bee:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <check_dispose+0x2b8>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	001c      	movs	r4, r3
 8000bf4:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <check_dispose+0x2bc>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	4818      	ldr	r0, [pc, #96]	@ (8000c5c <check_dispose+0x2c0>)
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	0023      	movs	r3, r4
 8000bfe:	f004 ff69 	bl	8005ad4 <iprintf>
		printf("sensor_4:%ld\r\n", mean_ch3);
 8000c02:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <check_dispose+0x2ec>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <check_dispose+0x2f4>)
 8000c08:	0011      	movs	r1, r2
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f004 ff62 	bl	8005ad4 <iprintf>
 8000c10:	e00f      	b.n	8000c32 <check_dispose+0x296>

	}
	else
	{
		printf("sensor_1:%ld, sensor_2:%ld, sensor_3:%ld, sensor_4:%ld\r\n", mean_ch0, mean_ch1, mean_ch2, mean_ch3);
 8000c12:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <check_dispose+0x2a8>)
 8000c14:	6819      	ldr	r1, [r3, #0]
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <check_dispose+0x2cc>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <check_dispose+0x2dc>)
 8000c1c:	681c      	ldr	r4, [r3, #0]
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <check_dispose+0x2ec>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	481d      	ldr	r0, [pc, #116]	@ (8000c98 <check_dispose+0x2fc>)
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	0023      	movs	r3, r4
 8000c28:	f004 ff54 	bl	8005ad4 <iprintf>
//		  delay_nop(1);
		HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f001 f913 	bl	8001e58 <HAL_Delay>
	}
	return dispose;
 8000c32:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <check_dispose+0x2ac>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b001      	add	sp, #4
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	20000142 	.word	0x20000142
 8000c44:	2000014c 	.word	0x2000014c
 8000c48:	20000141 	.word	0x20000141
 8000c4c:	0800691c 	.word	0x0800691c
 8000c50:	20000144 	.word	0x20000144
 8000c54:	20000146 	.word	0x20000146
 8000c58:	20000148 	.word	0x20000148
 8000c5c:	08006938 	.word	0x08006938
 8000c60:	08006970 	.word	0x08006970
 8000c64:	08006980 	.word	0x08006980
 8000c68:	20000150 	.word	0x20000150
 8000c6c:	08006998 	.word	0x08006998
 8000c70:	080069b4 	.word	0x080069b4
 8000c74:	080069c4 	.word	0x080069c4
 8000c78:	20000154 	.word	0x20000154
 8000c7c:	080069dc 	.word	0x080069dc
 8000c80:	080069f8 	.word	0x080069f8
 8000c84:	08006a08 	.word	0x08006a08
 8000c88:	20000158 	.word	0x20000158
 8000c8c:	08006a20 	.word	0x08006a20
 8000c90:	08006a3c 	.word	0x08006a3c
 8000c94:	08006a4c 	.word	0x08006a4c
 8000c98:	08006a64 	.word	0x08006a64

08000c9c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	get_sensor();
 8000ca4:	f7ff fda2 	bl	80007ec <get_sensor>
}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b002      	add	sp, #8
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <Cmd_Runner>:

void Cmd_Runner(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
		}
		printf("\t\t END \r\n");
	}
#endif

	switch (Packet.CMD)
 8000cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d68 <Cmd_Runner+0xb8>)
 8000cb6:	885b      	ldrh	r3, [r3, #2]
 8000cb8:	2288      	movs	r2, #136	@ 0x88
 8000cba:	0152      	lsls	r2, r2, #5
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d041      	beq.n	8000d44 <Cmd_Runner+0x94>
 8000cc0:	2288      	movs	r2, #136	@ 0x88
 8000cc2:	0152      	lsls	r2, r2, #5
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	dc4c      	bgt.n	8000d62 <Cmd_Runner+0xb2>
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d004      	beq.n	8000cd6 <Cmd_Runner+0x26>
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	0152      	lsls	r2, r2, #5
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d027      	beq.n	8000d24 <Cmd_Runner+0x74>
		break;
	}
	}

	//응답 보내는 루틴 추가
}
 8000cd4:	e045      	b.n	8000d62 <Cmd_Runner+0xb2>
		printf("Dispense go \r\n");
 8000cd6:	4b25      	ldr	r3, [pc, #148]	@ (8000d6c <Cmd_Runner+0xbc>)
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f004 ff61 	bl	8005ba0 <puts>
		if (Cst.Cur_status == STU_DISPENSE_ING)
 8000cde:	4b24      	ldr	r3, [pc, #144]	@ (8000d70 <Cmd_Runner+0xc0>)
 8000ce0:	885b      	ldrh	r3, [r3, #2]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d103      	bne.n	8000cee <Cmd_Runner+0x3e>
			Tx_Packet.data[0] = 0x00;	//NAK
 8000ce6:	4b23      	ldr	r3, [pc, #140]	@ (8000d74 <Cmd_Runner+0xc4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	711a      	strb	r2, [r3, #4]
 8000cec:	e011      	b.n	8000d12 <Cmd_Runner+0x62>
			Cst.Cur_status = STU_DISPENSE_ING;
 8000cee:	4b20      	ldr	r3, [pc, #128]	@ (8000d70 <Cmd_Runner+0xc0>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	805a      	strh	r2, [r3, #2]
			Cst.Target_num = Packet.data[0];
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <Cmd_Runner+0xb8>)
 8000cf6:	7a1a      	ldrb	r2, [r3, #8]
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d70 <Cmd_Runner+0xc0>)
 8000cfa:	711a      	strb	r2, [r3, #4]
			Cst.Cur_num = 0;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <Cmd_Runner+0xc0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	715a      	strb	r2, [r3, #5]
			dispose = 0;				//개선 필요
 8000d02:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <Cmd_Runner+0xc8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
			Tx_Packet.data[0] = 0x01;	//ACK
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <Cmd_Runner+0xc4>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	711a      	strb	r2, [r3, #4]
			Motor_On();
 8000d0e:	f7ff fcd1 	bl	80006b4 <Motor_On>
		Tx_Packet.CMD = CMD_DISPENSE;
 8000d12:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <Cmd_Runner+0xc4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	801a      	strh	r2, [r3, #0]
		Tx_Packet.Data_len = 1;
 8000d18:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <Cmd_Runner+0xc4>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	805a      	strh	r2, [r3, #2]
		Uart_Tx_Packet();
 8000d1e:	f000 f94d 	bl	8000fbc <Uart_Tx_Packet>
		break;
 8000d22:	e01e      	b.n	8000d62 <Cmd_Runner+0xb2>
		Tx_Packet.CMD = CMD_DISPENSE_CHK;
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <Cmd_Runner+0xc4>)
 8000d26:	2280      	movs	r2, #128	@ 0x80
 8000d28:	0152      	lsls	r2, r2, #5
 8000d2a:	801a      	strh	r2, [r3, #0]
		Tx_Packet.Data_len = 2;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <Cmd_Runner+0xc4>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	805a      	strh	r2, [r3, #2]
		Tx_Packet.data[0] = 0x00;
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <Cmd_Runner+0xc4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	711a      	strb	r2, [r3, #4]
		Tx_Packet.data[1] = 0x02;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <Cmd_Runner+0xc4>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	715a      	strb	r2, [r3, #5]
		Uart_Tx_Packet();
 8000d3e:	f000 f93d 	bl	8000fbc <Uart_Tx_Packet>
		break;
 8000d42:	e00e      	b.n	8000d62 <Cmd_Runner+0xb2>
		Tx_Packet.CMD = CMD_STATUS_CHK;
 8000d44:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <Cmd_Runner+0xc4>)
 8000d46:	2288      	movs	r2, #136	@ 0x88
 8000d48:	0152      	lsls	r2, r2, #5
 8000d4a:	801a      	strh	r2, [r3, #0]
		Tx_Packet.Data_len = 1;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <Cmd_Runner+0xc4>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	805a      	strh	r2, [r3, #2]
		Tx_Packet.data[0] = Cst.Cur_status;
 8000d52:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <Cmd_Runner+0xc0>)
 8000d54:	885b      	ldrh	r3, [r3, #2]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <Cmd_Runner+0xc4>)
 8000d5a:	711a      	strb	r2, [r3, #4]
		Uart_Tx_Packet();
 8000d5c:	f000 f92e 	bl	8000fbc <Uart_Tx_Packet>
		break;
 8000d60:	46c0      	nop			@ (mov r8, r8)
}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000560 	.word	0x20000560
 8000d6c:	08006aa0 	.word	0x08006aa0
 8000d70:	20000128 	.word	0x20000128
 8000d74:	20000760 	.word	0x20000760
 8000d78:	20000141 	.word	0x20000141

08000d7c <Cst_setup>:

void Cst_setup(void)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af02      	add	r7, sp, #8
	Cst.Addr = 0x0001;			//<-HardCoding
 8000d82:	4b2e      	ldr	r3, [pc, #184]	@ (8000e3c <Cst_setup+0xc0>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	801a      	strh	r2, [r3, #0]
	Cst.Cur_status = STU_WAIT;
 8000d88:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <Cst_setup+0xc0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	805a      	strh	r2, [r3, #2]

	Uart_init();
 8000d8e:	f000 f8c7 	bl	8000f20 <Uart_init>

	sensor_count = 0;
 8000d92:	4b2b      	ldr	r3, [pc, #172]	@ (8000e40 <Cst_setup+0xc4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
	Sensor_Off();
 8000d98:	f7ff fcee 	bl	8000778 <Sensor_Off>
	//=================================
	HAL_TIM_Base_Start_IT(&htim2);
 8000d9c:	4b29      	ldr	r3, [pc, #164]	@ (8000e44 <Cst_setup+0xc8>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f003 f9b6 	bl	8004110 <HAL_TIM_Base_Start_IT>
	ref = 1;
 8000da4:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <Cst_setup+0xcc>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 50; i++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	e026      	b.n	8000dfe <Cst_setup+0x82>
	{
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);			//ON
 8000db0:	23a0      	movs	r3, #160	@ 0xa0
 8000db2:	05db      	lsls	r3, r3, #23
 8000db4:	2200      	movs	r2, #0
 8000db6:	2180      	movs	r1, #128	@ 0x80
 8000db8:	0018      	movs	r0, r3
 8000dba:	f002 f951 	bl	8003060 <HAL_GPIO_WritePin>
		printf("sen_ref1:%d, sen_ref2:%d, sen_ref3:%d, sen_ref4:%d\r\n", sen_ref1, sen_ref2, sen_ref3, sen_ref4);
 8000dbe:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <Cst_setup+0xd0>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	4b22      	ldr	r3, [pc, #136]	@ (8000e50 <Cst_setup+0xd4>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	001a      	movs	r2, r3
 8000dca:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <Cst_setup+0xd8>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	001c      	movs	r4, r3
 8000dd0:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <Cst_setup+0xdc>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	4821      	ldr	r0, [pc, #132]	@ (8000e5c <Cst_setup+0xe0>)
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	0023      	movs	r3, r4
 8000dda:	f004 fe7b 	bl	8005ad4 <iprintf>

		HAL_Delay(50);
 8000dde:	2032      	movs	r0, #50	@ 0x32
 8000de0:	f001 f83a 	bl	8001e58 <HAL_Delay>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);			//OFF
 8000de4:	23a0      	movs	r3, #160	@ 0xa0
 8000de6:	05db      	lsls	r3, r3, #23
 8000de8:	2201      	movs	r2, #1
 8000dea:	2180      	movs	r1, #128	@ 0x80
 8000dec:	0018      	movs	r0, r3
 8000dee:	f002 f937 	bl	8003060 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000df2:	2032      	movs	r0, #50	@ 0x32
 8000df4:	f001 f830 	bl	8001e58 <HAL_Delay>
	for (int i = 0; i < 50; i++)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b31      	cmp	r3, #49	@ 0x31
 8000e02:	ddd5      	ble.n	8000db0 <Cst_setup+0x34>

	}
	ref = 0;
 8000e04:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <Cst_setup+0xcc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <Cst_setup+0xc8>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f003 f97f 	bl	8004110 <HAL_TIM_Base_Start_IT>

	printf(">>Ready!!\r\n");
 8000e12:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <Cst_setup+0xe4>)
 8000e14:	0018      	movs	r0, r3
 8000e16:	f004 fec3 	bl	8005ba0 <puts>
	printf("sensor_1:%ld, sensor_2:%ld, sensor_3:%ld, sensor_4:%ld\r\n", mean_ch0, mean_ch1, mean_ch2, mean_ch3);
 8000e1a:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <Cst_setup+0xe8>)
 8000e1c:	6819      	ldr	r1, [r3, #0]
 8000e1e:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <Cst_setup+0xec>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <Cst_setup+0xf0>)
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <Cst_setup+0xf4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4812      	ldr	r0, [pc, #72]	@ (8000e74 <Cst_setup+0xf8>)
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	0023      	movs	r3, r4
 8000e30:	f004 fe50 	bl	8005ad4 <iprintf>
	//==================================

}
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b003      	add	sp, #12
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	20000128 	.word	0x20000128
 8000e40:	2000013c 	.word	0x2000013c
 8000e44:	20000824 	.word	0x20000824
 8000e48:	20000140 	.word	0x20000140
 8000e4c:	20000142 	.word	0x20000142
 8000e50:	20000144 	.word	0x20000144
 8000e54:	20000146 	.word	0x20000146
 8000e58:	20000148 	.word	0x20000148
 8000e5c:	08006938 	.word	0x08006938
 8000e60:	08006ab0 	.word	0x08006ab0
 8000e64:	2000014c 	.word	0x2000014c
 8000e68:	20000150 	.word	0x20000150
 8000e6c:	20000154 	.word	0x20000154
 8000e70:	20000158 	.word	0x20000158
 8000e74:	08006a64 	.word	0x08006a64

08000e78 <biz_loop>:

void biz_loop(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	Cst_setup();
 8000e7c:	f7ff ff7e 	bl	8000d7c <Cst_setup>

	printf("Biz go\r\n");
 8000e80:	4b22      	ldr	r3, [pc, #136]	@ (8000f0c <biz_loop+0x94>)
 8000e82:	0018      	movs	r0, r3
 8000e84:	f004 fe8c 	bl	8005ba0 <puts>

	while (1)
	{
		//422 Check
		if (Packet.status != Uart_End)
 8000e88:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <biz_loop+0x98>)
 8000e8a:	785b      	ldrb	r3, [r3, #1]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d002      	beq.n	8000e96 <biz_loop+0x1e>
		{
			Uart_Parsser();
 8000e90:	f000 f97a 	bl	8001188 <Uart_Parsser>
 8000e94:	e00f      	b.n	8000eb6 <biz_loop+0x3e>
		}
		else if (Packet.status == Uart_End)
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <biz_loop+0x98>)
 8000e98:	785b      	ldrb	r3, [r3, #1]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d10b      	bne.n	8000eb6 <biz_loop+0x3e>
		{
			if (Packet.Addr == Cst.Addr)
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <biz_loop+0x98>)
 8000ea0:	88da      	ldrh	r2, [r3, #6]
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <biz_loop+0x9c>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d102      	bne.n	8000eb0 <biz_loop+0x38>
				Cmd_Runner();
 8000eaa:	f7ff ff01 	bl	8000cb0 <Cmd_Runner>
 8000eae:	e002      	b.n	8000eb6 <biz_loop+0x3e>
			else
				Packet.status = Uart_WAIT;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <biz_loop+0x98>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	705a      	strb	r2, [r3, #1]
		}

		//배출 관리
		if (Cst.Cur_status == STU_DISPENSE_ING)
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <biz_loop+0x9c>)
 8000eb8:	885b      	ldrh	r3, [r3, #2]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d1e4      	bne.n	8000e88 <biz_loop+0x10>
		{
			if (check_dispose() == 1)
 8000ebe:	f7ff fd6d 	bl	800099c <check_dispose>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d1df      	bne.n	8000e88 <biz_loop+0x10>
			{
				Cst.Cur_num++;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <biz_loop+0x9c>)
 8000eca:	795b      	ldrb	r3, [r3, #5]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <biz_loop+0x9c>)
 8000ed2:	715a      	strb	r2, [r3, #5]
				if (Cst.Cur_num != Cst.Target_num)
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <biz_loop+0x9c>)
 8000ed6:	795a      	ldrb	r2, [r3, #5]
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <biz_loop+0x9c>)
 8000eda:	791b      	ldrb	r3, [r3, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d00e      	beq.n	8000efe <biz_loop+0x86>
				{
					printf("keep going\r\n");
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <biz_loop+0xa0>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f004 fe5c 	bl	8005ba0 <puts>
					dispose = 0;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <biz_loop+0xa4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
					Motor_Off();
 8000eee:	f7ff fbf5 	bl	80006dc <Motor_Off>
					HAL_Delay(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f000 ffb0 	bl	8001e58 <HAL_Delay>
					Motor_On();
 8000ef8:	f7ff fbdc 	bl	80006b4 <Motor_On>
 8000efc:	e7c4      	b.n	8000e88 <biz_loop+0x10>
				}
				else
				{
					Motor_Off();
 8000efe:	f7ff fbed 	bl	80006dc <Motor_Off>
					Cst.Cur_status = STU_DISPENSE_OK;
 8000f02:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <biz_loop+0x9c>)
 8000f04:	2202      	movs	r2, #2
 8000f06:	805a      	strh	r2, [r3, #2]
		if (Packet.status != Uart_End)
 8000f08:	e7be      	b.n	8000e88 <biz_loop+0x10>
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	08006abc 	.word	0x08006abc
 8000f10:	20000560 	.word	0x20000560
 8000f14:	20000128 	.word	0x20000128
 8000f18:	08006ac4 	.word	0x08006ac4
 8000f1c:	20000141 	.word	0x20000141

08000f20 <Uart_init>:

Uart_Rx_data Packet;
Uart_Tx_data Tx_Packet;

void Uart_init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	Packet.status = Uart_WAIT;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <Uart_init+0x24>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	705a      	strb	r2, [r3, #1]
	Packet.step = STX_MSB_Check;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <Uart_init+0x24>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
	Rx_uart2_cnt = 0;
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <Uart_init+0x28>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	801a      	strh	r2, [r3, #0]
	Rx_uart2_Pcnt = 0;
 8000f36:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <Uart_init+0x2c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	801a      	strh	r2, [r3, #0]
}
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	20000560 	.word	0x20000560
 8000f48:	2000055c 	.word	0x2000055c
 8000f4c:	2000055e 	.word	0x2000055e

08000f50 <Uart_len_Check>:

uint16_t Uart_len_Check(void)
{
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	af00      	add	r7, sp, #0

	if (Packet.RecvTime + RECV_WAIT_TIME <= HAL_GetTick())
 8000f54:	4a16      	ldr	r2, [pc, #88]	@ (8000fb0 <Uart_len_Check+0x60>)
 8000f56:	23fe      	movs	r3, #254	@ 0xfe
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	58d3      	ldr	r3, [r2, r3]
 8000f5c:	1d5c      	adds	r4, r3, #5
 8000f5e:	f000 ff71 	bl	8001e44 <HAL_GetTick>
 8000f62:	0003      	movs	r3, r0
 8000f64:	429c      	cmp	r4, r3
 8000f66:	d81e      	bhi.n	8000fa6 <Uart_len_Check+0x56>
	{
		if (Rx_uart2_cnt < Rx_uart2_Pcnt)
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <Uart_len_Check+0x64>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <Uart_len_Check+0x68>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d20d      	bcs.n	8000f94 <Uart_len_Check+0x44>
		{
			return (UART2_RX_MAXLEN - Rx_uart2_Pcnt) + Rx_uart2_cnt;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <Uart_len_Check+0x64>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <Uart_len_Check+0x68>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2280      	movs	r2, #128	@ 0x80
 8000f8a:	00d2      	lsls	r2, r2, #3
 8000f8c:	4694      	mov	ip, r2
 8000f8e:	4463      	add	r3, ip
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	e009      	b.n	8000fa8 <Uart_len_Check+0x58>
		}
		else
		{
			return Rx_uart2_cnt - Rx_uart2_Pcnt;
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <Uart_len_Check+0x64>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <Uart_len_Check+0x68>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	e000      	b.n	8000fa8 <Uart_len_Check+0x58>
		}

	}
	else
	{
		return 0;
 8000fa6:	2300      	movs	r3, #0
	}

}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bdb0      	pop	{r4, r5, r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	20000560 	.word	0x20000560
 8000fb4:	2000055c 	.word	0x2000055c
 8000fb8:	2000055e 	.word	0x2000055e

08000fbc <Uart_Tx_Packet>:

void Uart_Tx_Packet(void)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b09b      	sub	sp, #108	@ 0x6c
 8000fc0:	af00      	add	r7, sp, #0
	uint8_t Data_Buffer[100];
	uint8_t cnt = 0;
 8000fc2:	2067      	movs	r0, #103	@ 0x67
 8000fc4:	183b      	adds	r3, r7, r0
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]

	//STX
	Data_Buffer[cnt++] = 0xFF;
 8000fca:	183b      	adds	r3, r7, r0
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	183a      	adds	r2, r7, r0
 8000fd0:	1c59      	adds	r1, r3, #1
 8000fd2:	7011      	strb	r1, [r2, #0]
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	003b      	movs	r3, r7
 8000fd8:	21ff      	movs	r1, #255	@ 0xff
 8000fda:	5499      	strb	r1, [r3, r2]
	Data_Buffer[cnt++] = 0x02;
 8000fdc:	183b      	adds	r3, r7, r0
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	183a      	adds	r2, r7, r0
 8000fe2:	1c59      	adds	r1, r3, #1
 8000fe4:	7011      	strb	r1, [r2, #0]
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	003b      	movs	r3, r7
 8000fea:	2102      	movs	r1, #2
 8000fec:	5499      	strb	r1, [r3, r2]
	//ADDR
	Data_Buffer[cnt++] = (Cst.Addr >> 8);
 8000fee:	4b50      	ldr	r3, [pc, #320]	@ (8001130 <Uart_Tx_Packet+0x174>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	b299      	uxth	r1, r3
 8000ff6:	0004      	movs	r4, r0
 8000ff8:	193b      	adds	r3, r7, r4
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	193a      	adds	r2, r7, r4
 8000ffe:	1c58      	adds	r0, r3, #1
 8001000:	7010      	strb	r0, [r2, #0]
 8001002:	001a      	movs	r2, r3
 8001004:	b2c9      	uxtb	r1, r1
 8001006:	003b      	movs	r3, r7
 8001008:	5499      	strb	r1, [r3, r2]
	Data_Buffer[cnt++] = (uint8_t) Cst.Addr;
 800100a:	4b49      	ldr	r3, [pc, #292]	@ (8001130 <Uart_Tx_Packet+0x174>)
 800100c:	8819      	ldrh	r1, [r3, #0]
 800100e:	193b      	adds	r3, r7, r4
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	193a      	adds	r2, r7, r4
 8001014:	1c58      	adds	r0, r3, #1
 8001016:	7010      	strb	r0, [r2, #0]
 8001018:	001a      	movs	r2, r3
 800101a:	b2c9      	uxtb	r1, r1
 800101c:	003b      	movs	r3, r7
 800101e:	5499      	strb	r1, [r3, r2]
	//LEN
	Data_Buffer[cnt++] = (Tx_Packet.Data_len >> 8);
 8001020:	4b44      	ldr	r3, [pc, #272]	@ (8001134 <Uart_Tx_Packet+0x178>)
 8001022:	885b      	ldrh	r3, [r3, #2]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	b299      	uxth	r1, r3
 8001028:	193b      	adds	r3, r7, r4
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	193a      	adds	r2, r7, r4
 800102e:	1c58      	adds	r0, r3, #1
 8001030:	7010      	strb	r0, [r2, #0]
 8001032:	001a      	movs	r2, r3
 8001034:	b2c9      	uxtb	r1, r1
 8001036:	003b      	movs	r3, r7
 8001038:	5499      	strb	r1, [r3, r2]
	Data_Buffer[cnt++] = (uint8_t) Tx_Packet.Data_len;
 800103a:	4b3e      	ldr	r3, [pc, #248]	@ (8001134 <Uart_Tx_Packet+0x178>)
 800103c:	8859      	ldrh	r1, [r3, #2]
 800103e:	193b      	adds	r3, r7, r4
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	193a      	adds	r2, r7, r4
 8001044:	1c58      	adds	r0, r3, #1
 8001046:	7010      	strb	r0, [r2, #0]
 8001048:	001a      	movs	r2, r3
 800104a:	b2c9      	uxtb	r1, r1
 800104c:	003b      	movs	r3, r7
 800104e:	5499      	strb	r1, [r3, r2]
	//CMD
	Data_Buffer[cnt++] = (Tx_Packet.CMD >> 8);
 8001050:	4b38      	ldr	r3, [pc, #224]	@ (8001134 <Uart_Tx_Packet+0x178>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	b299      	uxth	r1, r3
 8001058:	193b      	adds	r3, r7, r4
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	193a      	adds	r2, r7, r4
 800105e:	1c58      	adds	r0, r3, #1
 8001060:	7010      	strb	r0, [r2, #0]
 8001062:	001a      	movs	r2, r3
 8001064:	b2c9      	uxtb	r1, r1
 8001066:	003b      	movs	r3, r7
 8001068:	5499      	strb	r1, [r3, r2]
	Data_Buffer[cnt++] = (uint8_t) Tx_Packet.CMD;
 800106a:	4b32      	ldr	r3, [pc, #200]	@ (8001134 <Uart_Tx_Packet+0x178>)
 800106c:	8819      	ldrh	r1, [r3, #0]
 800106e:	193b      	adds	r3, r7, r4
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	193a      	adds	r2, r7, r4
 8001074:	1c58      	adds	r0, r3, #1
 8001076:	7010      	strb	r0, [r2, #0]
 8001078:	001a      	movs	r2, r3
 800107a:	b2c9      	uxtb	r1, r1
 800107c:	003b      	movs	r3, r7
 800107e:	5499      	strb	r1, [r3, r2]
	//DATA
	if (Tx_Packet.Data_len != 0)
 8001080:	4b2c      	ldr	r3, [pc, #176]	@ (8001134 <Uart_Tx_Packet+0x178>)
 8001082:	885b      	ldrh	r3, [r3, #2]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d020      	beq.n	80010ca <Uart_Tx_Packet+0x10e>
	{
		for (uint8_t cnt2 = 0; cnt2 < Tx_Packet.Data_len; cnt2++)
 8001088:	2366      	movs	r3, #102	@ 0x66
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e013      	b.n	80010ba <Uart_Tx_Packet+0xfe>
		{
			Data_Buffer[cnt++] = Tx_Packet.data[cnt2];
 8001092:	2466      	movs	r4, #102	@ 0x66
 8001094:	193b      	adds	r3, r7, r4
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	2167      	movs	r1, #103	@ 0x67
 800109a:	187b      	adds	r3, r7, r1
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	1879      	adds	r1, r7, r1
 80010a0:	1c58      	adds	r0, r3, #1
 80010a2:	7008      	strb	r0, [r1, #0]
 80010a4:	0019      	movs	r1, r3
 80010a6:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <Uart_Tx_Packet+0x178>)
 80010a8:	189b      	adds	r3, r3, r2
 80010aa:	791a      	ldrb	r2, [r3, #4]
 80010ac:	003b      	movs	r3, r7
 80010ae:	545a      	strb	r2, [r3, r1]
		for (uint8_t cnt2 = 0; cnt2 < Tx_Packet.Data_len; cnt2++)
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	781a      	ldrb	r2, [r3, #0]
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	3201      	adds	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	2366      	movs	r3, #102	@ 0x66
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <Uart_Tx_Packet+0x178>)
 80010c4:	885b      	ldrh	r3, [r3, #2]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3e3      	bcc.n	8001092 <Uart_Tx_Packet+0xd6>
		}
	}

	//ETX
	Data_Buffer[cnt++] = 0xFF;
 80010ca:	2467      	movs	r4, #103	@ 0x67
 80010cc:	193b      	adds	r3, r7, r4
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	193a      	adds	r2, r7, r4
 80010d2:	1c59      	adds	r1, r3, #1
 80010d4:	7011      	strb	r1, [r2, #0]
 80010d6:	001a      	movs	r2, r3
 80010d8:	003b      	movs	r3, r7
 80010da:	21ff      	movs	r1, #255	@ 0xff
 80010dc:	5499      	strb	r1, [r3, r2]
	Data_Buffer[cnt++] = 0x03;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	193a      	adds	r2, r7, r4
 80010e4:	1c59      	adds	r1, r3, #1
 80010e6:	7011      	strb	r1, [r2, #0]
 80010e8:	001a      	movs	r2, r3
 80010ea:	003b      	movs	r3, r7
 80010ec:	2103      	movs	r1, #3
 80010ee:	5499      	strb	r1, [r3, r2]

	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, SET);
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	0119      	lsls	r1, r3, #4
 80010f4:	23a0      	movs	r3, #160	@ 0xa0
 80010f6:	05db      	lsls	r3, r3, #23
 80010f8:	2201      	movs	r2, #1
 80010fa:	0018      	movs	r0, r3
 80010fc:	f001 ffb0 	bl	8003060 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, Data_Buffer, cnt, 100);
 8001100:	193b      	adds	r3, r7, r4
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b29a      	uxth	r2, r3
 8001106:	0039      	movs	r1, r7
 8001108:	480b      	ldr	r0, [pc, #44]	@ (8001138 <Uart_Tx_Packet+0x17c>)
 800110a:	2364      	movs	r3, #100	@ 0x64
 800110c:	f003 fbc2 	bl	8004894 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, RESET);
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	0119      	lsls	r1, r3, #4
 8001114:	23a0      	movs	r3, #160	@ 0xa0
 8001116:	05db      	lsls	r3, r3, #23
 8001118:	2200      	movs	r2, #0
 800111a:	0018      	movs	r0, r3
 800111c:	f001 ffa0 	bl	8003060 <HAL_GPIO_WritePin>

	Packet.status = Uart_WAIT;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <Uart_Tx_Packet+0x180>)
 8001122:	2201      	movs	r2, #1
 8001124:	705a      	strb	r2, [r3, #1]

}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b01b      	add	sp, #108	@ 0x6c
 800112c:	bd90      	pop	{r4, r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	20000128 	.word	0x20000128
 8001134:	20000760 	.word	0x20000760
 8001138:	200008ec 	.word	0x200008ec
 800113c:	20000560 	.word	0x20000560

08001140 <Uart_read>:

uint8_t Uart_read(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	uint8_t data = Rx_uart2[Rx_uart2_Pcnt++];
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <Uart_read+0x40>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	b29b      	uxth	r3, r3
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	b291      	uxth	r1, r2
 8001150:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <Uart_read+0x40>)
 8001152:	8011      	strh	r1, [r2, #0]
 8001154:	0019      	movs	r1, r3
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <Uart_read+0x44>)
 800115a:	5c52      	ldrb	r2, [r2, r1]
 800115c:	701a      	strb	r2, [r3, #0]
	if (Rx_uart2_Pcnt == UART2_RX_MAXLEN)
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <Uart_read+0x40>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	b29a      	uxth	r2, r3
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	429a      	cmp	r2, r3
 800116a:	d102      	bne.n	8001172 <Uart_read+0x32>
		Rx_uart2_Pcnt = 0;
 800116c:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <Uart_read+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	801a      	strh	r2, [r3, #0]

	return data;
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
}
 8001176:	0018      	movs	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	2000055e 	.word	0x2000055e
 8001184:	2000015c 	.word	0x2000015c

08001188 <Uart_Parsser>:

volatile uint16_t Data_len;
void Uart_Parsser(void)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
	if (Uart_len_Check() >= RX_MIN_LEN)
 8001194:	f7ff fedc 	bl	8000f50 <Uart_len_Check>
 8001198:	0003      	movs	r3, r0
 800119a:	2b09      	cmp	r3, #9
 800119c:	d800      	bhi.n	80011a0 <Uart_Parsser+0x18>
 800119e:	e0c4      	b.n	800132a <Uart_Parsser+0x1a2>
	{
//		printf("Loop in\r\n");
		while (Rx_uart2_cnt != Rx_uart2_Pcnt)
 80011a0:	e0ba      	b.n	8001318 <Uart_Parsser+0x190>
		{
			HAL_Delay(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f000 fe58 	bl	8001e58 <HAL_Delay>
			data = Uart_read();
 80011a8:	1dfc      	adds	r4, r7, #7
 80011aa:	f7ff ffc9 	bl	8001140 <Uart_read>
 80011ae:	0003      	movs	r3, r0
 80011b0:	7023      	strb	r3, [r4, #0]
//			printf("data = 0x%02X\r\n",data);
			switch (Packet.step)
 80011b2:	4b60      	ldr	r3, [pc, #384]	@ (8001334 <Uart_Parsser+0x1ac>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b0b      	cmp	r3, #11
 80011b8:	d900      	bls.n	80011bc <Uart_Parsser+0x34>
 80011ba:	e0a8      	b.n	800130e <Uart_Parsser+0x186>
 80011bc:	009a      	lsls	r2, r3, #2
 80011be:	4b5e      	ldr	r3, [pc, #376]	@ (8001338 <Uart_Parsser+0x1b0>)
 80011c0:	18d3      	adds	r3, r2, r3
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	469f      	mov	pc, r3
			{
			case STX_MSB_Check:
			{
				if (data == 0xFF)
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2bff      	cmp	r3, #255	@ 0xff
 80011cc:	d000      	beq.n	80011d0 <Uart_Parsser+0x48>
 80011ce:	e0a0      	b.n	8001312 <Uart_Parsser+0x18a>
				{
					Packet.step = STX_LSB_Check;
 80011d0:	4b58      	ldr	r3, [pc, #352]	@ (8001334 <Uart_Parsser+0x1ac>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	701a      	strb	r2, [r3, #0]
					Packet.status = Uart_ing;
 80011d6:	4b57      	ldr	r3, [pc, #348]	@ (8001334 <Uart_Parsser+0x1ac>)
 80011d8:	2202      	movs	r2, #2
 80011da:	705a      	strb	r2, [r3, #1]
					Data_len = 0;
 80011dc:	4b57      	ldr	r3, [pc, #348]	@ (800133c <Uart_Parsser+0x1b4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	801a      	strh	r2, [r3, #0]
				}
				break;
 80011e2:	e096      	b.n	8001312 <Uart_Parsser+0x18a>
			}
			case STX_LSB_Check:
			{
				if (data == 0x02)
 80011e4:	1dfb      	adds	r3, r7, #7
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d103      	bne.n	80011f4 <Uart_Parsser+0x6c>
				{
					Packet.step = ADDR_MSB_Check;
 80011ec:	4b51      	ldr	r3, [pc, #324]	@ (8001334 <Uart_Parsser+0x1ac>)
 80011ee:	2203      	movs	r2, #3
 80011f0:	701a      	strb	r2, [r3, #0]
				else
				{
					Packet.step = STX_MSB_Check;
					Packet.status = Uart_WAIT;
				}
				break;
 80011f2:	e091      	b.n	8001318 <Uart_Parsser+0x190>
					Packet.step = STX_MSB_Check;
 80011f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001334 <Uart_Parsser+0x1ac>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
					Packet.status = Uart_WAIT;
 80011fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001334 <Uart_Parsser+0x1ac>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	705a      	strb	r2, [r3, #1]
				break;
 8001200:	e08a      	b.n	8001318 <Uart_Parsser+0x190>
			}
			case ADDR_MSB_Check:
			{
				Packet.Addr = data << 8;
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b29b      	uxth	r3, r3
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b49      	ldr	r3, [pc, #292]	@ (8001334 <Uart_Parsser+0x1ac>)
 800120e:	80da      	strh	r2, [r3, #6]
				Packet.step = ADDR_LSB_Check;
 8001210:	4b48      	ldr	r3, [pc, #288]	@ (8001334 <Uart_Parsser+0x1ac>)
 8001212:	2204      	movs	r2, #4
 8001214:	701a      	strb	r2, [r3, #0]
				break;
 8001216:	e07f      	b.n	8001318 <Uart_Parsser+0x190>
			}
			case ADDR_LSB_Check:
			{
				Packet.Addr |= data;
 8001218:	4b46      	ldr	r3, [pc, #280]	@ (8001334 <Uart_Parsser+0x1ac>)
 800121a:	88da      	ldrh	r2, [r3, #6]
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b43      	ldr	r3, [pc, #268]	@ (8001334 <Uart_Parsser+0x1ac>)
 8001228:	80da      	strh	r2, [r3, #6]
				Packet.step = LEN_MSB_Check;
 800122a:	4b42      	ldr	r3, [pc, #264]	@ (8001334 <Uart_Parsser+0x1ac>)
 800122c:	2205      	movs	r2, #5
 800122e:	701a      	strb	r2, [r3, #0]
				break;
 8001230:	e072      	b.n	8001318 <Uart_Parsser+0x190>
			}
			case LEN_MSB_Check:
			{
				Packet.Data_len = data << 8;
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b3d      	ldr	r3, [pc, #244]	@ (8001334 <Uart_Parsser+0x1ac>)
 800123e:	809a      	strh	r2, [r3, #4]
				Packet.step = LEN_LSB_Check;
 8001240:	4b3c      	ldr	r3, [pc, #240]	@ (8001334 <Uart_Parsser+0x1ac>)
 8001242:	2206      	movs	r2, #6
 8001244:	701a      	strb	r2, [r3, #0]
				break;
 8001246:	e067      	b.n	8001318 <Uart_Parsser+0x190>
			}
			case LEN_LSB_Check:
			{
				Packet.Data_len |= data;
 8001248:	4b3a      	ldr	r3, [pc, #232]	@ (8001334 <Uart_Parsser+0x1ac>)
 800124a:	889a      	ldrh	r2, [r3, #4]
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b29b      	uxth	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b37      	ldr	r3, [pc, #220]	@ (8001334 <Uart_Parsser+0x1ac>)
 8001258:	809a      	strh	r2, [r3, #4]
				Packet.step = CMD_MSB_Check;
 800125a:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <Uart_Parsser+0x1ac>)
 800125c:	2207      	movs	r2, #7
 800125e:	701a      	strb	r2, [r3, #0]
				break;
 8001260:	e05a      	b.n	8001318 <Uart_Parsser+0x190>
			}
			case CMD_MSB_Check:
			{
				Packet.CMD = data << 8;
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <Uart_Parsser+0x1ac>)
 800126e:	805a      	strh	r2, [r3, #2]
				Packet.step = CMD_LSB_Check;
 8001270:	4b30      	ldr	r3, [pc, #192]	@ (8001334 <Uart_Parsser+0x1ac>)
 8001272:	2208      	movs	r2, #8
 8001274:	701a      	strb	r2, [r3, #0]
				break;
 8001276:	e04f      	b.n	8001318 <Uart_Parsser+0x190>
			}
			case CMD_LSB_Check:
			{
				Packet.CMD |= data;
 8001278:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <Uart_Parsser+0x1ac>)
 800127a:	885a      	ldrh	r2, [r3, #2]
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b29b      	uxth	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b2b      	ldr	r3, [pc, #172]	@ (8001334 <Uart_Parsser+0x1ac>)
 8001288:	805a      	strh	r2, [r3, #2]

				if (Packet.Data_len != 0)
 800128a:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <Uart_Parsser+0x1ac>)
 800128c:	889b      	ldrh	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <Uart_Parsser+0x112>
				{
					Packet.step = DATA_Check;
 8001292:	4b28      	ldr	r3, [pc, #160]	@ (8001334 <Uart_Parsser+0x1ac>)
 8001294:	2209      	movs	r2, #9
 8001296:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					Packet.step = ETX_MSB_Check;
				}
				break;
 8001298:	e03e      	b.n	8001318 <Uart_Parsser+0x190>
					Packet.step = ETX_MSB_Check;
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <Uart_Parsser+0x1ac>)
 800129c:	220a      	movs	r2, #10
 800129e:	701a      	strb	r2, [r3, #0]
				break;
 80012a0:	e03a      	b.n	8001318 <Uart_Parsser+0x190>
			}

			case DATA_Check:
			{

				Packet.data[Data_len++] = data;
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <Uart_Parsser+0x1b4>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	b291      	uxth	r1, r2
 80012ac:	4a23      	ldr	r2, [pc, #140]	@ (800133c <Uart_Parsser+0x1b4>)
 80012ae:	8011      	strh	r1, [r2, #0]
 80012b0:	001a      	movs	r2, r3
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <Uart_Parsser+0x1ac>)
 80012b4:	189b      	adds	r3, r3, r2
 80012b6:	1dfa      	adds	r2, r7, #7
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	721a      	strb	r2, [r3, #8]
				if (Data_len == Packet.Data_len)
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <Uart_Parsser+0x1ac>)
 80012be:	889a      	ldrh	r2, [r3, #4]
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <Uart_Parsser+0x1b4>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d125      	bne.n	8001316 <Uart_Parsser+0x18e>
				{
					Packet.step = ETX_MSB_Check;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <Uart_Parsser+0x1ac>)
 80012cc:	220a      	movs	r2, #10
 80012ce:	701a      	strb	r2, [r3, #0]
				}
				break;
 80012d0:	e021      	b.n	8001316 <Uart_Parsser+0x18e>
			}
			case ETX_MSB_Check:
			{
				if (data == 0xFF)
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2bff      	cmp	r3, #255	@ 0xff
 80012d8:	d103      	bne.n	80012e2 <Uart_Parsser+0x15a>
				{
					Packet.step = ETX_LSB_Check;
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <Uart_Parsser+0x1ac>)
 80012dc:	220b      	movs	r2, #11
 80012de:	701a      	strb	r2, [r3, #0]
				else
				{
					Packet.step = STX_MSB_Check;
					Packet.status = Uart_WAIT;
				}
				break;
 80012e0:	e01a      	b.n	8001318 <Uart_Parsser+0x190>
					Packet.step = STX_MSB_Check;
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <Uart_Parsser+0x1ac>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
					Packet.status = Uart_WAIT;
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <Uart_Parsser+0x1ac>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	705a      	strb	r2, [r3, #1]
				break;
 80012ee:	e013      	b.n	8001318 <Uart_Parsser+0x190>
			}
			case ETX_LSB_Check:
			{
				if (data == 0x03)
 80012f0:	1dfb      	adds	r3, r7, #7
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d103      	bne.n	8001300 <Uart_Parsser+0x178>
				{
					Packet.status = Uart_End;
 80012f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <Uart_Parsser+0x1ac>)
 80012fa:	2203      	movs	r2, #3
 80012fc:	705a      	strb	r2, [r3, #1]
 80012fe:	e002      	b.n	8001306 <Uart_Parsser+0x17e>
				}
				else
				{
					Packet.status = Uart_WAIT;
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <Uart_Parsser+0x1ac>)
 8001302:	2201      	movs	r2, #1
 8001304:	705a      	strb	r2, [r3, #1]
				}
				Packet.step = STX_MSB_Check;
 8001306:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <Uart_Parsser+0x1ac>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
				break;
 800130c:	e004      	b.n	8001318 <Uart_Parsser+0x190>
			}
			default:
			{
				break;
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	e002      	b.n	8001318 <Uart_Parsser+0x190>
				break;
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	e000      	b.n	8001318 <Uart_Parsser+0x190>
				break;
 8001316:	46c0      	nop			@ (mov r8, r8)
		while (Rx_uart2_cnt != Rx_uart2_Pcnt)
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <Uart_Parsser+0x1b8>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <Uart_Parsser+0x1bc>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	429a      	cmp	r2, r3
 8001326:	d000      	beq.n	800132a <Uart_Parsser+0x1a2>
 8001328:	e73b      	b.n	80011a2 <Uart_Parsser+0x1a>
			}
			}
		}
	}
}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b003      	add	sp, #12
 8001330:	bd90      	pop	{r4, r7, pc}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	20000560 	.word	0x20000560
 8001338:	08006b60 	.word	0x08006b60
 800133c:	200007c8 	.word	0x200007c8
 8001340:	2000055c 	.word	0x2000055c
 8001344:	2000055e 	.word	0x2000055e

08001348 <Uart_Buffer_Debug>:

void Uart_Buffer_Debug(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	if (Rx_uart2_cnt != Rx_uart2_Pcnt)
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <Uart_Buffer_Debug+0x74>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <Uart_Buffer_Debug+0x78>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	429a      	cmp	r2, r3
 800135a:	d02b      	beq.n	80013b4 <Uart_Buffer_Debug+0x6c>
	{
		printf("Recv Packet = ");
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <Uart_Buffer_Debug+0x7c>)
 800135e:	0018      	movs	r0, r3
 8001360:	f004 fbb8 	bl	8005ad4 <iprintf>
		while (Rx_uart2_cnt != Rx_uart2_Pcnt)
 8001364:	e01a      	b.n	800139c <Uart_Buffer_Debug+0x54>
		{
			printf("%c ", Rx_uart2[Rx_uart2_Pcnt++]);
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <Uart_Buffer_Debug+0x78>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	b291      	uxth	r1, r2
 8001370:	4a13      	ldr	r2, [pc, #76]	@ (80013c0 <Uart_Buffer_Debug+0x78>)
 8001372:	8011      	strh	r1, [r2, #0]
 8001374:	001a      	movs	r2, r3
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <Uart_Buffer_Debug+0x80>)
 8001378:	5c9b      	ldrb	r3, [r3, r2]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	001a      	movs	r2, r3
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <Uart_Buffer_Debug+0x84>)
 8001380:	0011      	movs	r1, r2
 8001382:	0018      	movs	r0, r3
 8001384:	f004 fba6 	bl	8005ad4 <iprintf>
			if (Rx_uart2_cnt == UART2_RX_MAXLEN)
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <Uart_Buffer_Debug+0x74>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	b29a      	uxth	r2, r3
 800138e:	2380      	movs	r3, #128	@ 0x80
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	429a      	cmp	r2, r3
 8001394:	d102      	bne.n	800139c <Uart_Buffer_Debug+0x54>
				Rx_uart2_cnt = 0;
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <Uart_Buffer_Debug+0x74>)
 8001398:	2200      	movs	r2, #0
 800139a:	801a      	strh	r2, [r3, #0]
		while (Rx_uart2_cnt != Rx_uart2_Pcnt)
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <Uart_Buffer_Debug+0x74>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <Uart_Buffer_Debug+0x78>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d1dc      	bne.n	8001366 <Uart_Buffer_Debug+0x1e>
		}
		printf("\t End \r\n");
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <Uart_Buffer_Debug+0x88>)
 80013ae:	0018      	movs	r0, r3
 80013b0:	f004 fbf6 	bl	8005ba0 <puts>

	}
}
 80013b4:	46c0      	nop			@ (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	2000055c 	.word	0x2000055c
 80013c0:	2000055e 	.word	0x2000055e
 80013c4:	08006ad0 	.word	0x08006ad0
 80013c8:	2000015c 	.word	0x2000015c
 80013cc:	08006ae0 	.word	0x08006ae0
 80013d0:	08006ae4 	.word	0x08006ae4

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_DMA_Init+0x38>)
 80013dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_DMA_Init+0x38>)
 80013e0:	2101      	movs	r1, #1
 80013e2:	430a      	orrs	r2, r1
 80013e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_DMA_Init+0x38>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	2201      	movs	r2, #1
 80013ec:	4013      	ands	r3, r2
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2101      	movs	r1, #1
 80013f6:	2009      	movs	r0, #9
 80013f8:	f001 fa50 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013fc:	2009      	movs	r0, #9
 80013fe:	f001 fa62 	bl	80028c6 <HAL_NVIC_EnableIRQ>

}
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	40021000 	.word	0x40021000

08001410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b08b      	sub	sp, #44	@ 0x2c
 8001414:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	2414      	movs	r4, #20
 8001418:	193b      	adds	r3, r7, r4
 800141a:	0018      	movs	r0, r3
 800141c:	2314      	movs	r3, #20
 800141e:	001a      	movs	r2, r3
 8001420:	2100      	movs	r1, #0
 8001422:	f004 fcb3 	bl	8005d8c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	4b45      	ldr	r3, [pc, #276]	@ (800153c <MX_GPIO_Init+0x12c>)
 8001428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800142a:	4b44      	ldr	r3, [pc, #272]	@ (800153c <MX_GPIO_Init+0x12c>)
 800142c:	2104      	movs	r1, #4
 800142e:	430a      	orrs	r2, r1
 8001430:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001432:	4b42      	ldr	r3, [pc, #264]	@ (800153c <MX_GPIO_Init+0x12c>)
 8001434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001436:	2204      	movs	r2, #4
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143e:	4b3f      	ldr	r3, [pc, #252]	@ (800153c <MX_GPIO_Init+0x12c>)
 8001440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001442:	4b3e      	ldr	r3, [pc, #248]	@ (800153c <MX_GPIO_Init+0x12c>)
 8001444:	2180      	movs	r1, #128	@ 0x80
 8001446:	430a      	orrs	r2, r1
 8001448:	62da      	str	r2, [r3, #44]	@ 0x2c
 800144a:	4b3c      	ldr	r3, [pc, #240]	@ (800153c <MX_GPIO_Init+0x12c>)
 800144c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b39      	ldr	r3, [pc, #228]	@ (800153c <MX_GPIO_Init+0x12c>)
 8001458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800145a:	4b38      	ldr	r3, [pc, #224]	@ (800153c <MX_GPIO_Init+0x12c>)
 800145c:	2101      	movs	r1, #1
 800145e:	430a      	orrs	r2, r1
 8001460:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001462:	4b36      	ldr	r3, [pc, #216]	@ (800153c <MX_GPIO_Init+0x12c>)
 8001464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001466:	2201      	movs	r2, #1
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b33      	ldr	r3, [pc, #204]	@ (800153c <MX_GPIO_Init+0x12c>)
 8001470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001472:	4b32      	ldr	r3, [pc, #200]	@ (800153c <MX_GPIO_Init+0x12c>)
 8001474:	2102      	movs	r1, #2
 8001476:	430a      	orrs	r2, r1
 8001478:	62da      	str	r2, [r3, #44]	@ 0x2c
 800147a:	4b30      	ldr	r3, [pc, #192]	@ (800153c <MX_GPIO_Init+0x12c>)
 800147c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PHOTO_PULSE2_Pin|PHOTO_PULSE3_Pin, GPIO_PIN_RESET);
 8001486:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <MX_GPIO_Init+0x130>)
 8001488:	2200      	movs	r2, #0
 800148a:	2103      	movs	r1, #3
 800148c:	0018      	movs	r0, r3
 800148e:	f001 fde7 	bl	8003060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|MOTOR_Pin, GPIO_PIN_SET);
 8001492:	23c0      	movs	r3, #192	@ 0xc0
 8001494:	0059      	lsls	r1, r3, #1
 8001496:	23a0      	movs	r3, #160	@ 0xa0
 8001498:	05db      	lsls	r3, r3, #23
 800149a:	2201      	movs	r2, #1
 800149c:	0018      	movs	r0, r3
 800149e:	f001 fddf 	bl	8003060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PHOTO_PULSE0_Pin|PHOTO_PULSE1_Pin|IR_PULSE0_Pin|SW_1_Pin
 80014a2:	4928      	ldr	r1, [pc, #160]	@ (8001544 <MX_GPIO_Init+0x134>)
 80014a4:	4b28      	ldr	r3, [pc, #160]	@ (8001548 <MX_GPIO_Init+0x138>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	0018      	movs	r0, r3
 80014aa:	f001 fdd9 	bl	8003060 <HAL_GPIO_WritePin>
                          |IR_PULSE1_Pin|IR_PULSE2_Pin|IR_PULSE3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TX_EN_Pin|RX_EN_Pin, GPIO_PIN_RESET);
 80014ae:	23c0      	movs	r3, #192	@ 0xc0
 80014b0:	0159      	lsls	r1, r3, #5
 80014b2:	23a0      	movs	r3, #160	@ 0xa0
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	2200      	movs	r2, #0
 80014b8:	0018      	movs	r0, r3
 80014ba:	f001 fdd1 	bl	8003060 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = PHOTO_PULSE2_Pin|PHOTO_PULSE3_Pin;
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	2203      	movs	r2, #3
 80014c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	193b      	adds	r3, r7, r4
 80014c6:	2201      	movs	r2, #1
 80014c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	193b      	adds	r3, r7, r4
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	193b      	adds	r3, r7, r4
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	4a19      	ldr	r2, [pc, #100]	@ (8001540 <MX_GPIO_Init+0x130>)
 80014da:	0019      	movs	r1, r3
 80014dc:	0010      	movs	r0, r2
 80014de:	f001 fc51 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|MOTOR_Pin|TX_EN_Pin|RX_EN_Pin;
 80014e2:	0021      	movs	r1, r4
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	22cc      	movs	r2, #204	@ 0xcc
 80014e8:	0152      	lsls	r2, r2, #5
 80014ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	000c      	movs	r4, r1
 80014ee:	193b      	adds	r3, r7, r4
 80014f0:	2201      	movs	r2, #1
 80014f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	193b      	adds	r3, r7, r4
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	193a      	adds	r2, r7, r4
 8001502:	23a0      	movs	r3, #160	@ 0xa0
 8001504:	05db      	lsls	r3, r3, #23
 8001506:	0011      	movs	r1, r2
 8001508:	0018      	movs	r0, r3
 800150a:	f001 fc3b 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PHOTO_PULSE0_Pin|PHOTO_PULSE1_Pin|IR_PULSE0_Pin|SW_1_Pin
 800150e:	0021      	movs	r1, r4
 8001510:	187b      	adds	r3, r7, r1
 8001512:	4a0c      	ldr	r2, [pc, #48]	@ (8001544 <MX_GPIO_Init+0x134>)
 8001514:	601a      	str	r2, [r3, #0]
                          |IR_PULSE1_Pin|IR_PULSE2_Pin|IR_PULSE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	187b      	adds	r3, r7, r1
 8001518:	2201      	movs	r2, #1
 800151a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	187b      	adds	r3, r7, r1
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	187b      	adds	r3, r7, r1
 800152a:	4a07      	ldr	r2, [pc, #28]	@ (8001548 <MX_GPIO_Init+0x138>)
 800152c:	0019      	movs	r1, r3
 800152e:	0010      	movs	r0, r2
 8001530:	f001 fc28 	bl	8002d84 <HAL_GPIO_Init>

}
 8001534:	46c0      	nop			@ (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b00b      	add	sp, #44	@ 0x2c
 800153a:	bd90      	pop	{r4, r7, pc}
 800153c:	40021000 	.word	0x40021000
 8001540:	50001c00 	.word	0x50001c00
 8001544:	0000803f 	.word	0x0000803f
 8001548:	50000400 	.word	0x50000400

0800154c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001550:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <MX_I2C1_Init+0x74>)
 8001552:	4a1c      	ldr	r2, [pc, #112]	@ (80015c4 <MX_I2C1_Init+0x78>)
 8001554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001556:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_I2C1_Init+0x74>)
 8001558:	4a1b      	ldr	r2, [pc, #108]	@ (80015c8 <MX_I2C1_Init+0x7c>)
 800155a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800155c:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001562:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <MX_I2C1_Init+0x74>)
 8001564:	2201      	movs	r2, #1
 8001566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001568:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <MX_I2C1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800156e:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <MX_I2C1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <MX_I2C1_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <MX_I2C1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <MX_I2C1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <MX_I2C1_Init+0x74>)
 8001588:	0018      	movs	r0, r3
 800158a:	f001 fd87 	bl	800309c <HAL_I2C_Init>
 800158e:	1e03      	subs	r3, r0, #0
 8001590:	d001      	beq.n	8001596 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001592:	f000 f950 	bl	8001836 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001596:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <MX_I2C1_Init+0x74>)
 8001598:	2100      	movs	r1, #0
 800159a:	0018      	movs	r0, r3
 800159c:	f001 fe14 	bl	80031c8 <HAL_I2CEx_ConfigAnalogFilter>
 80015a0:	1e03      	subs	r3, r0, #0
 80015a2:	d001      	beq.n	80015a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015a4:	f000 f947 	bl	8001836 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <MX_I2C1_Init+0x74>)
 80015aa:	2100      	movs	r1, #0
 80015ac:	0018      	movs	r0, r3
 80015ae:	f001 fe57 	bl	8003260 <HAL_I2CEx_ConfigDigitalFilter>
 80015b2:	1e03      	subs	r3, r0, #0
 80015b4:	d001      	beq.n	80015ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015b6:	f000 f93e 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200007cc 	.word	0x200007cc
 80015c4:	40005400 	.word	0x40005400
 80015c8:	00303d5b 	.word	0x00303d5b

080015cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b089      	sub	sp, #36	@ 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	240c      	movs	r4, #12
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	0018      	movs	r0, r3
 80015da:	2314      	movs	r3, #20
 80015dc:	001a      	movs	r2, r3
 80015de:	2100      	movs	r1, #0
 80015e0:	f004 fbd4 	bl	8005d8c <memset>
  if(i2cHandle->Instance==I2C1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a18      	ldr	r2, [pc, #96]	@ (800164c <HAL_I2C_MspInit+0x80>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d129      	bne.n	8001642 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <HAL_I2C_MspInit+0x84>)
 80015f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f2:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <HAL_I2C_MspInit+0x84>)
 80015f4:	2102      	movs	r1, #2
 80015f6:	430a      	orrs	r2, r1
 80015f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <HAL_I2C_MspInit+0x84>)
 80015fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fe:	2202      	movs	r2, #2
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001606:	193b      	adds	r3, r7, r4
 8001608:	22c0      	movs	r2, #192	@ 0xc0
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160e:	0021      	movs	r1, r4
 8001610:	187b      	adds	r3, r7, r1
 8001612:	2212      	movs	r2, #18
 8001614:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	187b      	adds	r3, r7, r1
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2203      	movs	r2, #3
 8001620:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2204      	movs	r2, #4
 8001626:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	187b      	adds	r3, r7, r1
 800162a:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <HAL_I2C_MspInit+0x88>)
 800162c:	0019      	movs	r1, r3
 800162e:	0010      	movs	r0, r2
 8001630:	f001 fba8 	bl	8002d84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_I2C_MspInit+0x84>)
 8001636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <HAL_I2C_MspInit+0x84>)
 800163a:	2180      	movs	r1, #128	@ 0x80
 800163c:	0389      	lsls	r1, r1, #14
 800163e:	430a      	orrs	r2, r1
 8001640:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	b009      	add	sp, #36	@ 0x24
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	40005400 	.word	0x40005400
 8001650:	40021000 	.word	0x40021000
 8001654:	50000400 	.word	0x50000400

08001658 <_write>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int _write(int file, uint8_t *ptr, int len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
#if 0
	HAL_GPIO_WritePin(TX_EN_GPIO_Port,TX_EN_Pin,SET);
	HAL_UART_Transmit(&huart2, ptr, len, 100);	//422 Port
	HAL_GPIO_WritePin(TX_EN_GPIO_Port,TX_EN_Pin,RESET);
#else
	HAL_UART_Transmit(&hlpuart1, ptr, len, 100);	//Debug Port
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	b29a      	uxth	r2, r3
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	4804      	ldr	r0, [pc, #16]	@ (800167c <_write+0x24>)
 800166c:	2364      	movs	r3, #100	@ 0x64
 800166e:	f003 f911 	bl	8004894 <HAL_UART_Transmit>
#endif
	return len;
 8001672:	687b      	ldr	r3, [r7, #4]
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b004      	add	sp, #16
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000864 	.word	0x20000864

08001680 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001684:	f000 fb78 	bl	8001d78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001688:	f000 f840 	bl	800170c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800168c:	f7ff fec0 	bl	8001410 <MX_GPIO_Init>
	MX_DMA_Init();
 8001690:	f7ff fea0 	bl	80013d4 <MX_DMA_Init>
	MX_ADC_Init();
 8001694:	f7fe ff12 	bl	80004bc <MX_ADC_Init>
	MX_I2C1_Init();
 8001698:	f7ff ff58 	bl	800154c <MX_I2C1_Init>
	MX_LPUART1_UART_Init();
 800169c:	f000 fa48 	bl	8001b30 <MX_LPUART1_UART_Init>
	MX_USART2_UART_Init();
 80016a0:	f000 fa74 	bl	8001b8c <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80016a4:	f000 f9d8 	bl	8001a58 <MX_TIM2_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80016a8:	f000 f8a8 	bl	80017fc <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	printf("\r\nOpenCowork by.Modules\r\n");
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <main+0x74>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f004 fa76 	bl	8005ba0 <puts>
	printf("Compile date  %s [%s] \r\n\r\n", __DATE__, __TIME__);
 80016b4:	4a10      	ldr	r2, [pc, #64]	@ (80016f8 <main+0x78>)
 80016b6:	4911      	ldr	r1, [pc, #68]	@ (80016fc <main+0x7c>)
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <main+0x80>)
 80016ba:	0018      	movs	r0, r3
 80016bc:	f004 fa0a 	bl	8005ad4 <iprintf>
	printf("ATC CST [ROM A.I Health Care]\r\n\r\n");
 80016c0:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <main+0x84>)
 80016c2:	0018      	movs	r0, r3
 80016c4:	f004 fa6c 	bl	8005ba0 <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80016c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <main+0x88>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <main+0x88>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2120      	movs	r1, #32
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(RX_EN_GPIO_Port, RX_EN_Pin, RESET);
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	0159      	lsls	r1, r3, #5
 80016dc:	23a0      	movs	r3, #160	@ 0xa0
 80016de:	05db      	lsls	r3, r3, #23
 80016e0:	2200      	movs	r2, #0
 80016e2:	0018      	movs	r0, r3
 80016e4:	f001 fcbc 	bl	8003060 <HAL_GPIO_WritePin>

#if 1
	biz_loop();
 80016e8:	f7ff fbc6 	bl	8000e78 <biz_loop>
#endif

	while (1)
	{

		Uart_Buffer_Debug();
 80016ec:	f7ff fe2c 	bl	8001348 <Uart_Buffer_Debug>
 80016f0:	e7fc      	b.n	80016ec <main+0x6c>
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	08006aec 	.word	0x08006aec
 80016f8:	08006b08 	.word	0x08006b08
 80016fc:	08006b14 	.word	0x08006b14
 8001700:	08006b20 	.word	0x08006b20
 8001704:	08006b3c 	.word	0x08006b3c
 8001708:	200008ec 	.word	0x200008ec

0800170c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b099      	sub	sp, #100	@ 0x64
 8001710:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001712:	242c      	movs	r4, #44	@ 0x2c
 8001714:	193b      	adds	r3, r7, r4
 8001716:	0018      	movs	r0, r3
 8001718:	2334      	movs	r3, #52	@ 0x34
 800171a:	001a      	movs	r2, r3
 800171c:	2100      	movs	r1, #0
 800171e:	f004 fb35 	bl	8005d8c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001722:	2318      	movs	r3, #24
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	0018      	movs	r0, r3
 8001728:	2314      	movs	r3, #20
 800172a:	001a      	movs	r2, r3
 800172c:	2100      	movs	r1, #0
 800172e:	f004 fb2d 	bl	8005d8c <memset>
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8001732:	003b      	movs	r3, r7
 8001734:	0018      	movs	r0, r3
 8001736:	2318      	movs	r3, #24
 8001738:	001a      	movs	r2, r3
 800173a:	2100      	movs	r1, #0
 800173c:	f004 fb26 	bl	8005d8c <memset>
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001740:	4b2c      	ldr	r3, [pc, #176]	@ (80017f4 <SystemClock_Config+0xe8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a2c      	ldr	r2, [pc, #176]	@ (80017f8 <SystemClock_Config+0xec>)
 8001746:	401a      	ands	r2, r3
 8001748:	4b2a      	ldr	r3, [pc, #168]	@ (80017f4 <SystemClock_Config+0xe8>)
 800174a:	2180      	movs	r1, #128	@ 0x80
 800174c:	0109      	lsls	r1, r1, #4
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001752:	0021      	movs	r1, r4
 8001754:	187b      	adds	r3, r7, r1
 8001756:	2202      	movs	r2, #2
 8001758:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800175a:	187b      	adds	r3, r7, r1
 800175c:	2201      	movs	r2, #1
 800175e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001760:	187b      	adds	r3, r7, r1
 8001762:	2210      	movs	r2, #16
 8001764:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001766:	187b      	adds	r3, r7, r1
 8001768:	2202      	movs	r2, #2
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2200      	movs	r2, #0
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8001772:	187b      	adds	r3, r7, r1
 8001774:	2200      	movs	r2, #0
 8001776:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8001778:	187b      	adds	r3, r7, r1
 800177a:	2280      	movs	r2, #128	@ 0x80
 800177c:	0412      	lsls	r2, r2, #16
 800177e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001780:	187b      	adds	r3, r7, r1
 8001782:	0018      	movs	r0, r3
 8001784:	f001 fdb8 	bl	80032f8 <HAL_RCC_OscConfig>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0x84>
	{
		Error_Handler();
 800178c:	f000 f853 	bl	8001836 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001790:	2118      	movs	r1, #24
 8001792:	187b      	adds	r3, r7, r1
 8001794:	220f      	movs	r2, #15
 8001796:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001798:	187b      	adds	r3, r7, r1
 800179a:	2203      	movs	r2, #3
 800179c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	2100      	movs	r1, #0
 80017b4:	0018      	movs	r0, r3
 80017b6:	f002 f91b 	bl	80039f0 <HAL_RCC_ClockConfig>
 80017ba:	1e03      	subs	r3, r0, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0xb6>
	{
		Error_Handler();
 80017be:	f000 f83a 	bl	8001836 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_I2C1;
 80017c2:	003b      	movs	r3, r7
 80017c4:	220e      	movs	r2, #14
 80017c6:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017c8:	003b      	movs	r3, r7
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
	PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017ce:	003b      	movs	r3, r7
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017d4:	003b      	movs	r3, r7
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017da:	003b      	movs	r3, r7
 80017dc:	0018      	movs	r0, r3
 80017de:	f002 fb2b 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0xde>
	{
		Error_Handler();
 80017e6:	f000 f826 	bl	8001836 <Error_Handler>
	}
}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b019      	add	sp, #100	@ 0x64
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	40007000 	.word	0x40007000
 80017f8:	ffffe7ff 	.word	0xffffe7ff

080017fc <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	201c      	movs	r0, #28
 8001806:	f001 f849 	bl	800289c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800180a:	201c      	movs	r0, #28
 800180c:	f001 f85b 	bl	80028c6 <HAL_NVIC_EnableIRQ>
	/* ADC1_COMP_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 1, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2101      	movs	r1, #1
 8001814:	200c      	movs	r0, #12
 8001816:	f001 f841 	bl	800289c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800181a:	200c      	movs	r0, #12
 800181c:	f001 f853 	bl	80028c6 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2102      	movs	r1, #2
 8001824:	200f      	movs	r0, #15
 8001826:	f001 f839 	bl	800289c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800182a:	200f      	movs	r0, #15
 800182c:	f001 f84b 	bl	80028c6 <HAL_NVIC_EnableIRQ>
}
 8001830:	46c0      	nop			@ (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183a:	b672      	cpsid	i
}
 800183c:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	e7fd      	b.n	800183e <Error_Handler+0x8>
	...

08001844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001848:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <HAL_MspInit+0x24>)
 800184a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_MspInit+0x24>)
 800184e:	2101      	movs	r1, #1
 8001850:	430a      	orrs	r2, r1
 8001852:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <HAL_MspInit+0x24>)
 8001856:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001858:	4b03      	ldr	r3, [pc, #12]	@ (8001868 <HAL_MspInit+0x24>)
 800185a:	2180      	movs	r1, #128	@ 0x80
 800185c:	0549      	lsls	r1, r1, #21
 800185e:	430a      	orrs	r2, r1
 8001860:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001870:	46c0      	nop			@ (mov r8, r8)
 8001872:	e7fd      	b.n	8001870 <NMI_Handler+0x4>

08001874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001878:	46c0      	nop			@ (mov r8, r8)
 800187a:	e7fd      	b.n	8001878 <HardFault_Handler+0x4>

0800187c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001880:	46c0      	nop			@ (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001894:	f000 fac4 	bl	8001e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001898:	46c0      	nop			@ (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <DMA1_Channel1_IRQHandler+0x14>)
 80018a6:	0018      	movs	r0, r3
 80018a8:	f001 f98f 	bl	8002bca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ac:	46c0      	nop			@ (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	200000e0 	.word	0x200000e0

080018b8 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <ADC1_COMP_IRQHandler+0x14>)
 80018be:	0018      	movs	r0, r3
 80018c0:	f000 fce4 	bl	800228c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80018c4:	46c0      	nop			@ (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	20000084 	.word	0x20000084

080018d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <TIM2_IRQHandler+0x14>)
 80018d6:	0018      	movs	r0, r3
 80018d8:	f002 fc66 	bl	80041a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018dc:	46c0      	nop			@ (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	20000824 	.word	0x20000824

080018e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Rx_uart2[Rx_uart2_cnt++] = (USART2->RDR) & 0x00ff;
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <USART2_IRQHandler+0x50>)
 80018ee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <USART2_IRQHandler+0x54>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	b290      	uxth	r0, r2
 80018fa:	4a10      	ldr	r2, [pc, #64]	@ (800193c <USART2_IRQHandler+0x54>)
 80018fc:	8010      	strh	r0, [r2, #0]
 80018fe:	001a      	movs	r2, r3
 8001900:	b2c9      	uxtb	r1, r1
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <USART2_IRQHandler+0x58>)
 8001904:	5499      	strb	r1, [r3, r2]
	Packet.RecvTime = HAL_GetTick();
 8001906:	f000 fa9d 	bl	8001e44 <HAL_GetTick>
 800190a:	0001      	movs	r1, r0
 800190c:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <USART2_IRQHandler+0x5c>)
 800190e:	23fe      	movs	r3, #254	@ 0xfe
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	50d1      	str	r1, [r2, r3]
	if (Rx_uart2_cnt == UART2_RX_MAXLEN)
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <USART2_IRQHandler+0x54>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	b29a      	uxth	r2, r3
 800191a:	2380      	movs	r3, #128	@ 0x80
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	429a      	cmp	r2, r3
 8001920:	d102      	bne.n	8001928 <USART2_IRQHandler+0x40>
		Rx_uart2_cnt = 0;
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <USART2_IRQHandler+0x54>)
 8001924:	2200      	movs	r2, #0
 8001926:	801a      	strh	r2, [r3, #0]

//	printf("recv ? 0x%02X \r\n",(char)(USART2->RDR)&0x00FF);
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001928:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <USART2_IRQHandler+0x60>)
 800192a:	0018      	movs	r0, r3
 800192c:	f003 f852 	bl	80049d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001930:	46c0      	nop			@ (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	40004400 	.word	0x40004400
 800193c:	2000055c 	.word	0x2000055c
 8001940:	2000015c 	.word	0x2000015c
 8001944:	20000560 	.word	0x20000560
 8001948:	200008ec 	.word	0x200008ec

0800194c <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e00a      	b.n	8001974 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800195e:	e000      	b.n	8001962 <_read+0x16>
 8001960:	bf00      	nop
 8001962:	0001      	movs	r1, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	dbf0      	blt.n	800195e <_read+0x12>
	}

	return len;
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b006      	add	sp, #24
 8001984:	bd80      	pop	{r7, pc}

08001986 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800198e:	2301      	movs	r3, #1
 8001990:	425b      	negs	r3, r3
}
 8001992:	0018      	movs	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	b002      	add	sp, #8
 8001998:	bd80      	pop	{r7, pc}

0800199a <_fstat>:

int _fstat(int file, struct stat *st)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2280      	movs	r2, #128	@ 0x80
 80019a8:	0192      	lsls	r2, r2, #6
 80019aa:	605a      	str	r2, [r3, #4]
	return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_isatty>:

int _isatty(int file)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b002      	add	sp, #8
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b004      	add	sp, #16
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 80019e8:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <_sbrk+0x5c>)
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <_sbrk+0x60>)
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <_sbrk+0x64>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <_sbrk+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	18d3      	adds	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d207      	bcs.n	8001a20 <_sbrk+0x40>
	{
		errno = ENOMEM;
 8001a10:	f004 fa12 	bl	8005e38 <__errno>
 8001a14:	0003      	movs	r3, r0
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	425b      	negs	r3, r3
 8001a1e:	e009      	b.n	8001a34 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	18d2      	adds	r2, r2, r3
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <_sbrk+0x64>)
 8001a30:	601a      	str	r2, [r3, #0]

	return (void*) prev_heap_end;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	0018      	movs	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b006      	add	sp, #24
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20002000 	.word	0x20002000
 8001a40:	00000400 	.word	0x00000400
 8001a44:	20000820 	.word	0x20000820
 8001a48:	20000ac8 	.word	0x20000ac8

08001a4c <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	/* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	2308      	movs	r3, #8
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	0018      	movs	r0, r3
 8001a64:	2310      	movs	r3, #16
 8001a66:	001a      	movs	r2, r3
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f004 f98f 	bl	8005d8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6e:	003b      	movs	r3, r7
 8001a70:	0018      	movs	r0, r3
 8001a72:	2308      	movs	r3, #8
 8001a74:	001a      	movs	r2, r3
 8001a76:	2100      	movs	r1, #0
 8001a78:	f004 f988 	bl	8005d8c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <MX_TIM2_Init+0xa4>)
 8001a7e:	2280      	movs	r2, #128	@ 0x80
 8001a80:	05d2      	lsls	r2, r2, #23
 8001a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8001a84:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <MX_TIM2_Init+0xa4>)
 8001a86:	2220      	movs	r2, #32
 8001a88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001afc <MX_TIM2_Init+0xa4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <MX_TIM2_Init+0xa4>)
 8001a92:	4a1b      	ldr	r2, [pc, #108]	@ (8001b00 <MX_TIM2_Init+0xa8>)
 8001a94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <MX_TIM2_Init+0xa4>)
 8001a98:	2280      	movs	r2, #128	@ 0x80
 8001a9a:	0052      	lsls	r2, r2, #1
 8001a9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <MX_TIM2_Init+0xa4>)
 8001aa0:	2280      	movs	r2, #128	@ 0x80
 8001aa2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aa4:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <MX_TIM2_Init+0xa4>)
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f002 faf2 	bl	8004090 <HAL_TIM_Base_Init>
 8001aac:	1e03      	subs	r3, r0, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001ab0:	f7ff fec1 	bl	8001836 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab4:	2108      	movs	r1, #8
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	2280      	movs	r2, #128	@ 0x80
 8001aba:	0152      	lsls	r2, r2, #5
 8001abc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001abe:	187a      	adds	r2, r7, r1
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <MX_TIM2_Init+0xa4>)
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f002 fc57 	bl	8004378 <HAL_TIM_ConfigClockSource>
 8001aca:	1e03      	subs	r3, r0, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001ace:	f7ff feb2 	bl	8001836 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad2:	003b      	movs	r3, r7
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	003b      	movs	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ade:	003a      	movs	r2, r7
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <MX_TIM2_Init+0xa4>)
 8001ae2:	0011      	movs	r1, r2
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f002 fe29 	bl	800473c <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	1e03      	subs	r3, r0, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001aee:	f7ff fea2 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b006      	add	sp, #24
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	20000824 	.word	0x20000824
 8001b00:	00002710 	.word	0x00002710

08001b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	05db      	lsls	r3, r3, #23
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d105      	bne.n	8001b24 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b18:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <HAL_TIM_Base_MspInit+0x28>)
 8001b1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <HAL_TIM_Base_MspInit+0x28>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	430a      	orrs	r2, r1
 8001b22:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b24:	46c0      	nop			@ (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b002      	add	sp, #8
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000

08001b30 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001b34:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <MX_LPUART1_UART_Init+0x54>)
 8001b36:	4a14      	ldr	r2, [pc, #80]	@ (8001b88 <MX_LPUART1_UART_Init+0x58>)
 8001b38:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <MX_LPUART1_UART_Init+0x54>)
 8001b3c:	22e1      	movs	r2, #225	@ 0xe1
 8001b3e:	0252      	lsls	r2, r2, #9
 8001b40:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <MX_LPUART1_UART_Init+0x54>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001b48:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <MX_LPUART1_UART_Init+0x54>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b84 <MX_LPUART1_UART_Init+0x54>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <MX_LPUART1_UART_Init+0x54>)
 8001b56:	220c      	movs	r2, #12
 8001b58:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <MX_LPUART1_UART_Init+0x54>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b60:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <MX_LPUART1_UART_Init+0x54>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b66:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <MX_LPUART1_UART_Init+0x54>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b6c:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <MX_LPUART1_UART_Init+0x54>)
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f002 fe3c 	bl	80047ec <HAL_UART_Init>
 8001b74:	1e03      	subs	r3, r0, #0
 8001b76:	d001      	beq.n	8001b7c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001b78:	f7ff fe5d 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b7c:	46c0      	nop			@ (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	20000864 	.word	0x20000864
 8001b88:	40004800 	.word	0x40004800

08001b8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001b92:	4a15      	ldr	r2, [pc, #84]	@ (8001be8 <MX_USART2_UART_Init+0x5c>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001b98:	22e1      	movs	r2, #225	@ 0xe1
 8001b9a:	0252      	lsls	r2, r2, #9
 8001b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bce:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f002 fe0b 	bl	80047ec <HAL_UART_Init>
 8001bd6:	1e03      	subs	r3, r0, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bda:	f7ff fe2c 	bl	8001836 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200008ec 	.word	0x200008ec
 8001be8:	40004400 	.word	0x40004400

08001bec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b08b      	sub	sp, #44	@ 0x2c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	2414      	movs	r4, #20
 8001bf6:	193b      	adds	r3, r7, r4
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	2314      	movs	r3, #20
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	2100      	movs	r1, #0
 8001c00:	f004 f8c4 	bl	8005d8c <memset>
  if(uartHandle->Instance==LPUART1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a41      	ldr	r2, [pc, #260]	@ (8001d10 <HAL_UART_MspInit+0x124>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d14b      	bne.n	8001ca6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c0e:	4b41      	ldr	r3, [pc, #260]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c12:	4b40      	ldr	r3, [pc, #256]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001c14:	2180      	movs	r1, #128	@ 0x80
 8001c16:	02c9      	lsls	r1, r1, #11
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c20:	4b3c      	ldr	r3, [pc, #240]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001c22:	2104      	movs	r1, #4
 8001c24:	430a      	orrs	r2, r1
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c28:	4b3a      	ldr	r3, [pc, #232]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	4b37      	ldr	r3, [pc, #220]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c38:	4b36      	ldr	r3, [pc, #216]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c40:	4b34      	ldr	r3, [pc, #208]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	2202      	movs	r2, #2
 8001c46:	4013      	ands	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PB10     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c4c:	193b      	adds	r3, r7, r4
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	193b      	adds	r3, r7, r4
 8001c54:	2202      	movs	r2, #2
 8001c56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	193b      	adds	r3, r7, r4
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	193b      	adds	r3, r7, r4
 8001c60:	2203      	movs	r2, #3
 8001c62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001c64:	193b      	adds	r3, r7, r4
 8001c66:	2206      	movs	r2, #6
 8001c68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d18 <HAL_UART_MspInit+0x12c>)
 8001c6e:	0019      	movs	r1, r3
 8001c70:	0010      	movs	r0, r2
 8001c72:	f001 f887 	bl	8002d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c76:	0021      	movs	r1, r4
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	2280      	movs	r2, #128	@ 0x80
 8001c7c:	00d2      	lsls	r2, r2, #3
 8001c7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	2202      	movs	r2, #2
 8001c84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001c92:	187b      	adds	r3, r7, r1
 8001c94:	2206      	movs	r2, #6
 8001c96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	4a20      	ldr	r2, [pc, #128]	@ (8001d1c <HAL_UART_MspInit+0x130>)
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	0010      	movs	r0, r2
 8001ca0:	f001 f870 	bl	8002d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ca4:	e02f      	b.n	8001d06 <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1d      	ldr	r2, [pc, #116]	@ (8001d20 <HAL_UART_MspInit+0x134>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d12a      	bne.n	8001d06 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb0:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001cb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cb4:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001cb6:	2180      	movs	r1, #128	@ 0x80
 8001cb8:	0289      	lsls	r1, r1, #10
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cc2:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cca:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_UART_MspInit+0x128>)
 8001ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cd6:	2114      	movs	r1, #20
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	22c0      	movs	r2, #192	@ 0xc0
 8001cdc:	00d2      	lsls	r2, r2, #3
 8001cde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	187a      	adds	r2, r7, r1
 8001cfa:	23a0      	movs	r3, #160	@ 0xa0
 8001cfc:	05db      	lsls	r3, r3, #23
 8001cfe:	0011      	movs	r1, r2
 8001d00:	0018      	movs	r0, r3
 8001d02:	f001 f83f 	bl	8002d84 <HAL_GPIO_Init>
}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b00b      	add	sp, #44	@ 0x2c
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	40004800 	.word	0x40004800
 8001d14:	40021000 	.word	0x40021000
 8001d18:	50000800 	.word	0x50000800
 8001d1c:	50000400 	.word	0x50000400
 8001d20:	40004400 	.word	0x40004400

08001d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001d24:	480d      	ldr	r0, [pc, #52]	@ (8001d5c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001d26:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d28:	f7ff fe90 	bl	8001a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d2c:	480c      	ldr	r0, [pc, #48]	@ (8001d60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d2e:	490d      	ldr	r1, [pc, #52]	@ (8001d64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d30:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <LoopForever+0xe>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d44:	4c0a      	ldr	r4, [pc, #40]	@ (8001d70 <LoopForever+0x16>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d52:	f004 f877 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d56:	f7ff fc93 	bl	8001680 <main>

08001d5a <LoopForever>:

LoopForever:
    b LoopForever
 8001d5a:	e7fe      	b.n	8001d5a <LoopForever>
   ldr   r0, =_estack
 8001d5c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d68:	08006c40 	.word	0x08006c40
  ldr r2, =_sbss
 8001d6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d70:	20000ac4 	.word	0x20000ac4

08001d74 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <DMA1_Channel2_3_IRQHandler>
	...

08001d78 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_Init+0x3c>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_Init+0x3c>)
 8001d8a:	2140      	movs	r1, #64	@ 0x40
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f811 	bl	8001db8 <HAL_InitTick>
 8001d96:	1e03      	subs	r3, r0, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
 8001da0:	e001      	b.n	8001da6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001da2:	f7ff fd4f 	bl	8001844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001da6:	1dfb      	adds	r3, r7, #7
 8001da8:	781b      	ldrb	r3, [r3, #0]
}
 8001daa:	0018      	movs	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b002      	add	sp, #8
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	40022000 	.word	0x40022000

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_InitTick+0x5c>)
 8001dc2:	681c      	ldr	r4, [r3, #0]
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <HAL_InitTick+0x60>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	0019      	movs	r1, r3
 8001dca:	23fa      	movs	r3, #250	@ 0xfa
 8001dcc:	0098      	lsls	r0, r3, #2
 8001dce:	f7fe f9a5 	bl	800011c <__udivsi3>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	0020      	movs	r0, r4
 8001dd8:	f7fe f9a0 	bl	800011c <__udivsi3>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	0018      	movs	r0, r3
 8001de0:	f000 fd81 	bl	80028e6 <HAL_SYSTICK_Config>
 8001de4:	1e03      	subs	r3, r0, #0
 8001de6:	d001      	beq.n	8001dec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e00f      	b.n	8001e0c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d80b      	bhi.n	8001e0a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	2301      	movs	r3, #1
 8001df6:	425b      	negs	r3, r3
 8001df8:	2200      	movs	r2, #0
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 fd4e 	bl	800289c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_InitTick+0x64>)
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b003      	add	sp, #12
 8001e12:	bd90      	pop	{r4, r7, pc}
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_IncTick+0x1c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	001a      	movs	r2, r3
 8001e2a:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_IncTick+0x20>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	18d2      	adds	r2, r2, r3
 8001e30:	4b03      	ldr	r3, [pc, #12]	@ (8001e40 <HAL_IncTick+0x20>)
 8001e32:	601a      	str	r2, [r3, #0]
}
 8001e34:	46c0      	nop			@ (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	20000008 	.word	0x20000008
 8001e40:	20000974 	.word	0x20000974

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b02      	ldr	r3, [pc, #8]	@ (8001e54 <HAL_GetTick+0x10>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	20000974 	.word	0x20000974

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff fff0 	bl	8001e44 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	001a      	movs	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	189b      	adds	r3, r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	f7ff ffe0 	bl	8001e44 <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	46c0      	nop			@ (mov r8, r8)
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b004      	add	sp, #16
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	20000008 	.word	0x20000008

08001ea0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e159      	b.n	8002166 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10a      	bne.n	8001ed0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2250      	movs	r2, #80	@ 0x50
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7fe fb86 	bl	80005dc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b10      	cmp	r3, #16
 8001eda:	d005      	beq.n	8001ee8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ee6:	d00b      	beq.n	8001f00 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eec:	2210      	movs	r2, #16
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2250      	movs	r2, #80	@ 0x50
 8001ef8:	2100      	movs	r1, #0
 8001efa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e132      	b.n	8002166 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f04:	4a9a      	ldr	r2, [pc, #616]	@ (8002170 <HAL_ADC_Init+0x2d0>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	2202      	movs	r2, #2
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2203      	movs	r2, #3
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d108      	bne.n	8001f30 <HAL_ADC_Init+0x90>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADC_Init+0x90>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_ADC_Init+0x92>
 8001f30:	2300      	movs	r3, #0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d149      	bne.n	8001fca <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	23c0      	movs	r3, #192	@ 0xc0
 8001f3c:	061b      	lsls	r3, r3, #24
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d00b      	beq.n	8001f5a <HAL_ADC_Init+0xba>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	05db      	lsls	r3, r3, #23
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d005      	beq.n	8001f5a <HAL_ADC_Init+0xba>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	2380      	movs	r3, #128	@ 0x80
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d111      	bne.n	8001f7e <HAL_ADC_Init+0xde>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0092      	lsls	r2, r2, #2
 8001f66:	0892      	lsrs	r2, r2, #2
 8001f68:	611a      	str	r2, [r3, #16]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6919      	ldr	r1, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	e014      	b.n	8001fa8 <HAL_ADC_Init+0x108>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	0892      	lsrs	r2, r2, #2
 8001f8c:	611a      	str	r2, [r3, #16]
 8001f8e:	4b79      	ldr	r3, [pc, #484]	@ (8002174 <HAL_ADC_Init+0x2d4>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4b78      	ldr	r3, [pc, #480]	@ (8002174 <HAL_ADC_Init+0x2d4>)
 8001f94:	4978      	ldr	r1, [pc, #480]	@ (8002178 <HAL_ADC_Init+0x2d8>)
 8001f96:	400a      	ands	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	4b76      	ldr	r3, [pc, #472]	@ (8002174 <HAL_ADC_Init+0x2d4>)
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4b74      	ldr	r3, [pc, #464]	@ (8002174 <HAL_ADC_Init+0x2d4>)
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2118      	movs	r1, #24
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68d9      	ldr	r1, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001fca:	4b6a      	ldr	r3, [pc, #424]	@ (8002174 <HAL_ADC_Init+0x2d4>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b69      	ldr	r3, [pc, #420]	@ (8002174 <HAL_ADC_Init+0x2d4>)
 8001fd0:	496a      	ldr	r1, [pc, #424]	@ (800217c <HAL_ADC_Init+0x2dc>)
 8001fd2:	400a      	ands	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001fd6:	4b67      	ldr	r3, [pc, #412]	@ (8002174 <HAL_ADC_Init+0x2d4>)
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fde:	065a      	lsls	r2, r3, #25
 8001fe0:	4b64      	ldr	r3, [pc, #400]	@ (8002174 <HAL_ADC_Init+0x2d4>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	055b      	lsls	r3, r3, #21
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d108      	bne.n	8002006 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2180      	movs	r1, #128	@ 0x80
 8002000:	0549      	lsls	r1, r1, #21
 8002002:	430a      	orrs	r2, r1
 8002004:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	495b      	ldr	r1, [pc, #364]	@ (8002180 <HAL_ADC_Init+0x2e0>)
 8002012:	400a      	ands	r2, r1
 8002014:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68d9      	ldr	r1, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d101      	bne.n	800202c <HAL_ADC_Init+0x18c>
 8002028:	2304      	movs	r3, #4
 800202a:	e000      	b.n	800202e <HAL_ADC_Init+0x18e>
 800202c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800202e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2020      	movs	r0, #32
 8002034:	5c1b      	ldrb	r3, [r3, r0]
 8002036:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002038:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	202c      	movs	r0, #44	@ 0x2c
 800203e:	5c1b      	ldrb	r3, [r3, r0]
 8002040:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002042:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002048:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002050:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002058:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002066:	23c2      	movs	r3, #194	@ 0xc2
 8002068:	33ff      	adds	r3, #255	@ 0xff
 800206a:	429a      	cmp	r2, r3
 800206c:	d00b      	beq.n	8002086 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68d9      	ldr	r1, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2221      	movs	r2, #33	@ 0x21
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d11a      	bne.n	80020c6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	5c9b      	ldrb	r3, [r3, r2]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2180      	movs	r1, #128	@ 0x80
 80020a6:	0249      	lsls	r1, r1, #9
 80020a8:	430a      	orrs	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	e00b      	b.n	80020c6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b2:	2220      	movs	r2, #32
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	2201      	movs	r2, #1
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d11f      	bne.n	800210e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	492a      	ldr	r1, [pc, #168]	@ (8002184 <HAL_ADC_Init+0x2e4>)
 80020da:	400a      	ands	r2, r1
 80020dc:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6919      	ldr	r1, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80020ec:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80020f2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2101      	movs	r1, #1
 8002108:	430a      	orrs	r2, r1
 800210a:	611a      	str	r2, [r3, #16]
 800210c:	e00e      	b.n	800212c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2201      	movs	r2, #1
 8002116:	4013      	ands	r3, r2
 8002118:	2b01      	cmp	r3, #1
 800211a:	d107      	bne.n	800212c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2101      	movs	r1, #1
 8002128:	438a      	bics	r2, r1
 800212a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2107      	movs	r1, #7
 8002138:	438a      	bics	r2, r1
 800213a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6959      	ldr	r1, [r3, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002158:	2203      	movs	r2, #3
 800215a:	4393      	bics	r3, r2
 800215c:	2201      	movs	r2, #1
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	fffffefd 	.word	0xfffffefd
 8002174:	40012708 	.word	0x40012708
 8002178:	ffc3ffff 	.word	0xffc3ffff
 800217c:	fdffffff 	.word	0xfdffffff
 8002180:	fffe0219 	.word	0xfffe0219
 8002184:	fffffc03 	.word	0xfffffc03

08002188 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002194:	2317      	movs	r3, #23
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2204      	movs	r2, #4
 80021a4:	4013      	ands	r3, r2
 80021a6:	d15e      	bne.n	8002266 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2250      	movs	r2, #80	@ 0x50
 80021ac:	5c9b      	ldrb	r3, [r3, r2]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_Start_DMA+0x2e>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e05e      	b.n	8002274 <HAL_ADC_Start_DMA+0xec>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2250      	movs	r2, #80	@ 0x50
 80021ba:	2101      	movs	r1, #1
 80021bc:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2101      	movs	r1, #1
 80021ca:	430a      	orrs	r2, r1
 80021cc:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d007      	beq.n	80021e6 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80021d6:	2317      	movs	r3, #23
 80021d8:	18fc      	adds	r4, r7, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 f9a5 	bl	800252c <ADC_Enable>
 80021e2:	0003      	movs	r3, r0
 80021e4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021e6:	2317      	movs	r3, #23
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d13e      	bne.n	800226e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f4:	4a21      	ldr	r2, [pc, #132]	@ (800227c <HAL_ADC_Start_DMA+0xf4>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	2280      	movs	r2, #128	@ 0x80
 80021fa:	0052      	lsls	r2, r2, #1
 80021fc:	431a      	orrs	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2250      	movs	r2, #80	@ 0x50
 800220c:	2100      	movs	r1, #0
 800220e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002214:	4a1a      	ldr	r2, [pc, #104]	@ (8002280 <HAL_ADC_Start_DMA+0xf8>)
 8002216:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221c:	4a19      	ldr	r2, [pc, #100]	@ (8002284 <HAL_ADC_Start_DMA+0xfc>)
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002224:	4a18      	ldr	r2, [pc, #96]	@ (8002288 <HAL_ADC_Start_DMA+0x100>)
 8002226:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	221c      	movs	r2, #28
 800222e:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2110      	movs	r1, #16
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3340      	adds	r3, #64	@ 0x40
 800224a:	0019      	movs	r1, r3
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f000 fbce 	bl	80029f0 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2104      	movs	r1, #4
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	e003      	b.n	800226e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002266:	2317      	movs	r3, #23
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2202      	movs	r2, #2
 800226c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800226e:	2317      	movs	r3, #23
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	781b      	ldrb	r3, [r3, #0]
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b007      	add	sp, #28
 800227a:	bd90      	pop	{r4, r7, pc}
 800227c:	fffff0fe 	.word	0xfffff0fe
 8002280:	080025fd 	.word	0x080025fd
 8002284:	080026b1 	.word	0x080026b1
 8002288:	080026cf 	.word	0x080026cf

0800228c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2204      	movs	r2, #4
 80022a8:	4013      	ands	r3, r2
 80022aa:	d003      	beq.n	80022b4 <HAL_ADC_IRQHandler+0x28>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2204      	movs	r2, #4
 80022b0:	4013      	ands	r3, r2
 80022b2:	d107      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2208      	movs	r2, #8
 80022b8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022ba:	d04e      	beq.n	800235a <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2208      	movs	r2, #8
 80022c0:	4013      	ands	r3, r2
 80022c2:	d04a      	beq.n	800235a <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c8:	2210      	movs	r2, #16
 80022ca:	4013      	ands	r3, r2
 80022cc:	d106      	bne.n	80022dc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d2:	2280      	movs	r2, #128	@ 0x80
 80022d4:	0092      	lsls	r2, r2, #2
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	23c0      	movs	r3, #192	@ 0xc0
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	4013      	ands	r3, r2
 80022e8:	d12b      	bne.n	8002342 <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2220      	movs	r2, #32
 80022ee:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d126      	bne.n	8002342 <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2208      	movs	r2, #8
 80022f8:	4013      	ands	r3, r2
 80022fa:	d022      	beq.n	8002342 <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2204      	movs	r2, #4
 8002304:	4013      	ands	r3, r2
 8002306:	d110      	bne.n	800232a <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	210c      	movs	r1, #12
 8002314:	438a      	bics	r2, r1
 8002316:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231c:	4a2f      	ldr	r2, [pc, #188]	@ (80023dc <HAL_ADC_IRQHandler+0x150>)
 800231e:	4013      	ands	r3, r2
 8002320:	2201      	movs	r2, #1
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	655a      	str	r2, [r3, #84]	@ 0x54
 8002328:	e00b      	b.n	8002342 <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232e:	2220      	movs	r2, #32
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	2201      	movs	r2, #1
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	0018      	movs	r0, r3
 8002346:	f000 f84b 	bl	80023e0 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d003      	beq.n	800235a <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	220c      	movs	r2, #12
 8002358:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2280      	movs	r2, #128	@ 0x80
 800235e:	4013      	ands	r3, r2
 8002360:	d012      	beq.n	8002388 <HAL_ADC_IRQHandler+0xfc>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2280      	movs	r2, #128	@ 0x80
 8002366:	4013      	ands	r3, r2
 8002368:	d00e      	beq.n	8002388 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236e:	2280      	movs	r2, #128	@ 0x80
 8002370:	0252      	lsls	r2, r2, #9
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	0018      	movs	r0, r3
 800237c:	f000 f840 	bl	8002400 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2280      	movs	r2, #128	@ 0x80
 8002386:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2210      	movs	r2, #16
 800238c:	4013      	ands	r3, r2
 800238e:	d020      	beq.n	80023d2 <HAL_ADC_IRQHandler+0x146>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2210      	movs	r2, #16
 8002394:	4013      	ands	r3, r2
 8002396:	d01c      	beq.n	80023d2 <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d10d      	bne.n	80023ca <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b2:	2202      	movs	r2, #2
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2210      	movs	r2, #16
 80023c0:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f823 	bl	8002410 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2210      	movs	r2, #16
 80023d0:	601a      	str	r2, [r3, #0]
  }

}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b004      	add	sp, #16
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			@ (mov r8, r8)
 80023dc:	fffffefe 	.word	0xfffffefe

080023e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023e8:	46c0      	nop			@ (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b002      	add	sp, #8
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023f8:	46c0      	nop			@ (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b002      	add	sp, #8
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002408:	46c0      	nop			@ (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002418:	46c0      	nop			@ (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b002      	add	sp, #8
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2250      	movs	r2, #80	@ 0x50
 800242e:	5c9b      	ldrb	r3, [r3, r2]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x18>
 8002434:	2302      	movs	r3, #2
 8002436:	e06c      	b.n	8002512 <HAL_ADC_ConfigChannel+0xf2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2250      	movs	r2, #80	@ 0x50
 800243c:	2101      	movs	r1, #1
 800243e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2204      	movs	r2, #4
 8002448:	4013      	ands	r3, r2
 800244a:	d00b      	beq.n	8002464 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002450:	2220      	movs	r2, #32
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2250      	movs	r2, #80	@ 0x50
 800245c:	2100      	movs	r1, #0
 800245e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e056      	b.n	8002512 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4a2c      	ldr	r2, [pc, #176]	@ (800251c <HAL_ADC_ConfigChannel+0xfc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d028      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	035b      	lsls	r3, r3, #13
 800247a:	0b5a      	lsrs	r2, r3, #13
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	2380      	movs	r3, #128	@ 0x80
 800248a:	02db      	lsls	r3, r3, #11
 800248c:	4013      	ands	r3, r2
 800248e:	d009      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002490:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <HAL_ADC_ConfigChannel+0x100>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <HAL_ADC_ConfigChannel+0x100>)
 8002496:	2180      	movs	r1, #128	@ 0x80
 8002498:	0409      	lsls	r1, r1, #16
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800249e:	200a      	movs	r0, #10
 80024a0:	f000 f930 	bl	8002704 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	@ 0x80
 80024aa:	029b      	lsls	r3, r3, #10
 80024ac:	4013      	ands	r3, r2
 80024ae:	d02b      	beq.n	8002508 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <HAL_ADC_ConfigChannel+0x100>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <HAL_ADC_ConfigChannel+0x100>)
 80024b6:	2180      	movs	r1, #128	@ 0x80
 80024b8:	03c9      	lsls	r1, r1, #15
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e023      	b.n	8002508 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	035b      	lsls	r3, r3, #13
 80024cc:	0b5b      	lsrs	r3, r3, #13
 80024ce:	43d9      	mvns	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	400a      	ands	r2, r1
 80024d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	@ 0x80
 80024de:	02db      	lsls	r3, r3, #11
 80024e0:	4013      	ands	r3, r2
 80024e2:	d005      	beq.n	80024f0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80024e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <HAL_ADC_ConfigChannel+0x100>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002520 <HAL_ADC_ConfigChannel+0x100>)
 80024ea:	490e      	ldr	r1, [pc, #56]	@ (8002524 <HAL_ADC_ConfigChannel+0x104>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	029b      	lsls	r3, r3, #10
 80024f8:	4013      	ands	r3, r2
 80024fa:	d005      	beq.n	8002508 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80024fc:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <HAL_ADC_ConfigChannel+0x100>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <HAL_ADC_ConfigChannel+0x100>)
 8002502:	4909      	ldr	r1, [pc, #36]	@ (8002528 <HAL_ADC_ConfigChannel+0x108>)
 8002504:	400a      	ands	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2250      	movs	r2, #80	@ 0x50
 800250c:	2100      	movs	r1, #0
 800250e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	00001001 	.word	0x00001001
 8002520:	40012708 	.word	0x40012708
 8002524:	ff7fffff 	.word	0xff7fffff
 8002528:	ffbfffff 	.word	0xffbfffff

0800252c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2203      	movs	r2, #3
 8002540:	4013      	ands	r3, r2
 8002542:	2b01      	cmp	r3, #1
 8002544:	d108      	bne.n	8002558 <ADC_Enable+0x2c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <ADC_Enable+0x2c>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <ADC_Enable+0x2e>
 8002558:	2300      	movs	r3, #0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d146      	bne.n	80025ec <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4a24      	ldr	r2, [pc, #144]	@ (80025f8 <ADC_Enable+0xcc>)
 8002566:	4013      	ands	r3, r2
 8002568:	d00d      	beq.n	8002586 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256e:	2210      	movs	r2, #16
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257a:	2201      	movs	r2, #1
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e033      	b.n	80025ee <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2101      	movs	r1, #1
 8002592:	430a      	orrs	r2, r1
 8002594:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002596:	2001      	movs	r0, #1
 8002598:	f000 f8b4 	bl	8002704 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800259c:	f7ff fc52 	bl	8001e44 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025a4:	e01b      	b.n	80025de <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025a6:	f7ff fc4d 	bl	8001e44 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b0a      	cmp	r3, #10
 80025b2:	d914      	bls.n	80025de <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2201      	movs	r2, #1
 80025bc:	4013      	ands	r3, r2
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d00d      	beq.n	80025de <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c6:	2210      	movs	r2, #16
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	2201      	movs	r2, #1
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e007      	b.n	80025ee <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d1dc      	bne.n	80025a6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	0018      	movs	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b004      	add	sp, #16
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	80000017 	.word	0x80000017

080025fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260e:	2250      	movs	r2, #80	@ 0x50
 8002610:	4013      	ands	r3, r2
 8002612:	d141      	bne.n	8002698 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002618:	2280      	movs	r2, #128	@ 0x80
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	431a      	orrs	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	23c0      	movs	r3, #192	@ 0xc0
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	4013      	ands	r3, r2
 800262e:	d12e      	bne.n	800268e <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002636:	2b00      	cmp	r3, #0
 8002638:	d129      	bne.n	800268e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2208      	movs	r2, #8
 8002642:	4013      	ands	r3, r2
 8002644:	2b08      	cmp	r3, #8
 8002646:	d122      	bne.n	800268e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2204      	movs	r2, #4
 8002650:	4013      	ands	r3, r2
 8002652:	d110      	bne.n	8002676 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	210c      	movs	r1, #12
 8002660:	438a      	bics	r2, r1
 8002662:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002668:	4a10      	ldr	r2, [pc, #64]	@ (80026ac <ADC_DMAConvCplt+0xb0>)
 800266a:	4013      	ands	r3, r2
 800266c:	2201      	movs	r2, #1
 800266e:	431a      	orrs	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	655a      	str	r2, [r3, #84]	@ 0x54
 8002674:	e00b      	b.n	800268e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	2220      	movs	r2, #32
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	2201      	movs	r2, #1
 8002688:	431a      	orrs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	0018      	movs	r0, r3
 8002692:	f7ff fea5 	bl	80023e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002696:	e005      	b.n	80026a4 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	0010      	movs	r0, r2
 80026a2:	4798      	blx	r3
}
 80026a4:	46c0      	nop			@ (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b004      	add	sp, #16
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	fffffefe 	.word	0xfffffefe

080026b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f7ff fe95 	bl	80023f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b004      	add	sp, #16
 80026cc:	bd80      	pop	{r7, pc}

080026ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e0:	2240      	movs	r2, #64	@ 0x40
 80026e2:	431a      	orrs	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ec:	2204      	movs	r2, #4
 80026ee:	431a      	orrs	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7ff fe8a 	bl	8002410 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026fc:	46c0      	nop			@ (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b004      	add	sp, #16
 8002702:	bd80      	pop	{r7, pc}

08002704 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800270c:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <ADC_DelayMicroSecond+0x38>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	490b      	ldr	r1, [pc, #44]	@ (8002740 <ADC_DelayMicroSecond+0x3c>)
 8002712:	0018      	movs	r0, r3
 8002714:	f7fd fd02 	bl	800011c <__udivsi3>
 8002718:	0003      	movs	r3, r0
 800271a:	001a      	movs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4353      	muls	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002722:	e002      	b.n	800272a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3b01      	subs	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f9      	bne.n	8002724 <ADC_DelayMicroSecond+0x20>
  }
}
 8002730:	46c0      	nop			@ (mov r8, r8)
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	46bd      	mov	sp, r7
 8002736:	b004      	add	sp, #16
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	20000000 	.word	0x20000000
 8002740:	000f4240 	.word	0x000f4240

08002744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	0002      	movs	r2, r0
 800274c:	1dfb      	adds	r3, r7, #7
 800274e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002750:	1dfb      	adds	r3, r7, #7
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b7f      	cmp	r3, #127	@ 0x7f
 8002756:	d809      	bhi.n	800276c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002758:	1dfb      	adds	r3, r7, #7
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	001a      	movs	r2, r3
 800275e:	231f      	movs	r3, #31
 8002760:	401a      	ands	r2, r3
 8002762:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <__NVIC_EnableIRQ+0x30>)
 8002764:	2101      	movs	r1, #1
 8002766:	4091      	lsls	r1, r2
 8002768:	000a      	movs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
  }
}
 800276c:	46c0      	nop			@ (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}
 8002774:	e000e100 	.word	0xe000e100

08002778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	0002      	movs	r2, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002786:	1dfb      	adds	r3, r7, #7
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b7f      	cmp	r3, #127	@ 0x7f
 800278c:	d828      	bhi.n	80027e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800278e:	4a2f      	ldr	r2, [pc, #188]	@ (800284c <__NVIC_SetPriority+0xd4>)
 8002790:	1dfb      	adds	r3, r7, #7
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b25b      	sxtb	r3, r3
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	33c0      	adds	r3, #192	@ 0xc0
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	589b      	ldr	r3, [r3, r2]
 800279e:	1dfa      	adds	r2, r7, #7
 80027a0:	7812      	ldrb	r2, [r2, #0]
 80027a2:	0011      	movs	r1, r2
 80027a4:	2203      	movs	r2, #3
 80027a6:	400a      	ands	r2, r1
 80027a8:	00d2      	lsls	r2, r2, #3
 80027aa:	21ff      	movs	r1, #255	@ 0xff
 80027ac:	4091      	lsls	r1, r2
 80027ae:	000a      	movs	r2, r1
 80027b0:	43d2      	mvns	r2, r2
 80027b2:	401a      	ands	r2, r3
 80027b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	22ff      	movs	r2, #255	@ 0xff
 80027bc:	401a      	ands	r2, r3
 80027be:	1dfb      	adds	r3, r7, #7
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	0018      	movs	r0, r3
 80027c4:	2303      	movs	r3, #3
 80027c6:	4003      	ands	r3, r0
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027cc:	481f      	ldr	r0, [pc, #124]	@ (800284c <__NVIC_SetPriority+0xd4>)
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	430a      	orrs	r2, r1
 80027d8:	33c0      	adds	r3, #192	@ 0xc0
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027de:	e031      	b.n	8002844 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002850 <__NVIC_SetPriority+0xd8>)
 80027e2:	1dfb      	adds	r3, r7, #7
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	0019      	movs	r1, r3
 80027e8:	230f      	movs	r3, #15
 80027ea:	400b      	ands	r3, r1
 80027ec:	3b08      	subs	r3, #8
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	3306      	adds	r3, #6
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	18d3      	adds	r3, r2, r3
 80027f6:	3304      	adds	r3, #4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1dfa      	adds	r2, r7, #7
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	0011      	movs	r1, r2
 8002800:	2203      	movs	r2, #3
 8002802:	400a      	ands	r2, r1
 8002804:	00d2      	lsls	r2, r2, #3
 8002806:	21ff      	movs	r1, #255	@ 0xff
 8002808:	4091      	lsls	r1, r2
 800280a:	000a      	movs	r2, r1
 800280c:	43d2      	mvns	r2, r2
 800280e:	401a      	ands	r2, r3
 8002810:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	22ff      	movs	r2, #255	@ 0xff
 8002818:	401a      	ands	r2, r3
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	0018      	movs	r0, r3
 8002820:	2303      	movs	r3, #3
 8002822:	4003      	ands	r3, r0
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002828:	4809      	ldr	r0, [pc, #36]	@ (8002850 <__NVIC_SetPriority+0xd8>)
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	001c      	movs	r4, r3
 8002830:	230f      	movs	r3, #15
 8002832:	4023      	ands	r3, r4
 8002834:	3b08      	subs	r3, #8
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	430a      	orrs	r2, r1
 800283a:	3306      	adds	r3, #6
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	18c3      	adds	r3, r0, r3
 8002840:	3304      	adds	r3, #4
 8002842:	601a      	str	r2, [r3, #0]
}
 8002844:	46c0      	nop			@ (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b003      	add	sp, #12
 800284a:	bd90      	pop	{r4, r7, pc}
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	1e5a      	subs	r2, r3, #1
 8002860:	2380      	movs	r3, #128	@ 0x80
 8002862:	045b      	lsls	r3, r3, #17
 8002864:	429a      	cmp	r2, r3
 8002866:	d301      	bcc.n	800286c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002868:	2301      	movs	r3, #1
 800286a:	e010      	b.n	800288e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286c:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <SysTick_Config+0x44>)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	3a01      	subs	r2, #1
 8002872:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002874:	2301      	movs	r3, #1
 8002876:	425b      	negs	r3, r3
 8002878:	2103      	movs	r1, #3
 800287a:	0018      	movs	r0, r3
 800287c:	f7ff ff7c 	bl	8002778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <SysTick_Config+0x44>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002886:	4b04      	ldr	r3, [pc, #16]	@ (8002898 <SysTick_Config+0x44>)
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800288c:	2300      	movs	r3, #0
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b002      	add	sp, #8
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	210f      	movs	r1, #15
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	1c02      	adds	r2, r0, #0
 80028ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b25b      	sxtb	r3, r3
 80028b6:	0011      	movs	r1, r2
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7ff ff5d 	bl	8002778 <__NVIC_SetPriority>
}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b004      	add	sp, #16
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	0002      	movs	r2, r0
 80028ce:	1dfb      	adds	r3, r7, #7
 80028d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d2:	1dfb      	adds	r3, r7, #7
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	0018      	movs	r0, r3
 80028da:	f7ff ff33 	bl	8002744 <__NVIC_EnableIRQ>
}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7ff ffaf 	bl	8002854 <SysTick_Config>
 80028f6:	0003      	movs	r3, r0
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e061      	b.n	80029d6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a32      	ldr	r2, [pc, #200]	@ (80029e0 <HAL_DMA_Init+0xe0>)
 8002918:	4694      	mov	ip, r2
 800291a:	4463      	add	r3, ip
 800291c:	2114      	movs	r1, #20
 800291e:	0018      	movs	r0, r3
 8002920:	f7fd fbfc 	bl	800011c <__udivsi3>
 8002924:	0003      	movs	r3, r0
 8002926:	009a      	lsls	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a2d      	ldr	r2, [pc, #180]	@ (80029e4 <HAL_DMA_Init+0xe4>)
 8002930:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2225      	movs	r2, #37	@ 0x25
 8002936:	2102      	movs	r1, #2
 8002938:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4a28      	ldr	r2, [pc, #160]	@ (80029e8 <HAL_DMA_Init+0xe8>)
 8002946:	4013      	ands	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002952:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	01db      	lsls	r3, r3, #7
 8002988:	429a      	cmp	r2, r3
 800298a:	d018      	beq.n	80029be <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800298c:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <HAL_DMA_Init+0xec>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	211c      	movs	r1, #28
 8002996:	400b      	ands	r3, r1
 8002998:	210f      	movs	r1, #15
 800299a:	4099      	lsls	r1, r3
 800299c:	000b      	movs	r3, r1
 800299e:	43d9      	mvns	r1, r3
 80029a0:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <HAL_DMA_Init+0xec>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80029a6:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <HAL_DMA_Init+0xec>)
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	201c      	movs	r0, #28
 80029b4:	4003      	ands	r3, r0
 80029b6:	409a      	lsls	r2, r3
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <HAL_DMA_Init+0xec>)
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2225      	movs	r2, #37	@ 0x25
 80029c8:	2101      	movs	r1, #1
 80029ca:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	@ 0x24
 80029d0:	2100      	movs	r1, #0
 80029d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b004      	add	sp, #16
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	bffdfff8 	.word	0xbffdfff8
 80029e4:	40020000 	.word	0x40020000
 80029e8:	ffff800f 	.word	0xffff800f
 80029ec:	400200a8 	.word	0x400200a8

080029f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2317      	movs	r3, #23
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2224      	movs	r2, #36	@ 0x24
 8002a0a:	5c9b      	ldrb	r3, [r3, r2]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_DMA_Start_IT+0x24>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e04f      	b.n	8002ab4 <HAL_DMA_Start_IT+0xc4>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2224      	movs	r2, #36	@ 0x24
 8002a18:	2101      	movs	r1, #1
 8002a1a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2225      	movs	r2, #37	@ 0x25
 8002a20:	5c9b      	ldrb	r3, [r3, r2]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d13a      	bne.n	8002a9e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2225      	movs	r2, #37	@ 0x25
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2101      	movs	r1, #1
 8002a42:	438a      	bics	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f96a 	bl	8002d26 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	210e      	movs	r1, #14
 8002a66:	430a      	orrs	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e00f      	b.n	8002a8c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2104      	movs	r1, #4
 8002a78:	438a      	bics	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	210a      	movs	r1, #10
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2101      	movs	r1, #1
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e007      	b.n	8002aae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2224      	movs	r2, #36	@ 0x24
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002aa6:	2317      	movs	r3, #23
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002aae:	2317      	movs	r3, #23
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	781b      	ldrb	r3, [r3, #0]
}
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b006      	add	sp, #24
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2225      	movs	r2, #37	@ 0x25
 8002ad0:	5c9b      	ldrb	r3, [r3, r2]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d008      	beq.n	8002aea <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2204      	movs	r2, #4
 8002adc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2224      	movs	r2, #36	@ 0x24
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e024      	b.n	8002b34 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	210e      	movs	r1, #14
 8002af6:	438a      	bics	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2101      	movs	r1, #1
 8002b06:	438a      	bics	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0e:	221c      	movs	r2, #28
 8002b10:	401a      	ands	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	2101      	movs	r1, #1
 8002b18:	4091      	lsls	r1, r2
 8002b1a:	000a      	movs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2225      	movs	r2, #37	@ 0x25
 8002b22:	2101      	movs	r1, #1
 8002b24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2224      	movs	r2, #36	@ 0x24
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	5499      	strb	r1, [r3, r2]

    return status;
 8002b2e:	230f      	movs	r3, #15
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b004      	add	sp, #16
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b44:	210f      	movs	r1, #15
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2225      	movs	r2, #37	@ 0x25
 8002b50:	5c9b      	ldrb	r3, [r3, r2]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d006      	beq.n	8002b66 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e02a      	b.n	8002bbc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	210e      	movs	r1, #14
 8002b72:	438a      	bics	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	438a      	bics	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	221c      	movs	r2, #28
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	2101      	movs	r1, #1
 8002b94:	4091      	lsls	r1, r2
 8002b96:	000a      	movs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2225      	movs	r2, #37	@ 0x25
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2224      	movs	r2, #36	@ 0x24
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	0010      	movs	r0, r2
 8002bba:	4798      	blx	r3
    }
  }
  return status;
 8002bbc:	230f      	movs	r3, #15
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	781b      	ldrb	r3, [r3, #0]
}
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b004      	add	sp, #16
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	221c      	movs	r2, #28
 8002be8:	4013      	ands	r3, r2
 8002bea:	2204      	movs	r2, #4
 8002bec:	409a      	lsls	r2, r3
 8002bee:	0013      	movs	r3, r2
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d026      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x7a>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d022      	beq.n	8002c44 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2220      	movs	r2, #32
 8002c06:	4013      	ands	r3, r2
 8002c08:	d107      	bne.n	8002c1a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2104      	movs	r1, #4
 8002c16:	438a      	bics	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	221c      	movs	r2, #28
 8002c20:	401a      	ands	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	2104      	movs	r1, #4
 8002c28:	4091      	lsls	r1, r2
 8002c2a:	000a      	movs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d100      	bne.n	8002c38 <HAL_DMA_IRQHandler+0x6e>
 8002c36:	e071      	b.n	8002d1c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	0010      	movs	r0, r2
 8002c40:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002c42:	e06b      	b.n	8002d1c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c48:	221c      	movs	r2, #28
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	0013      	movs	r3, r2
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	d02d      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0xea>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d029      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2220      	movs	r2, #32
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d10b      	bne.n	8002c84 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	210a      	movs	r1, #10
 8002c78:	438a      	bics	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2225      	movs	r2, #37	@ 0x25
 8002c80:	2101      	movs	r1, #1
 8002c82:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c88:	221c      	movs	r2, #28
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	2102      	movs	r1, #2
 8002c92:	4091      	lsls	r1, r2
 8002c94:	000a      	movs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	@ 0x24
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d039      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	0010      	movs	r0, r2
 8002cb0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cb2:	e033      	b.n	8002d1c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb8:	221c      	movs	r2, #28
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	0013      	movs	r3, r2
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d02a      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x154>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2208      	movs	r2, #8
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d026      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	210e      	movs	r1, #14
 8002cdc:	438a      	bics	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce4:	221c      	movs	r2, #28
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	2101      	movs	r1, #1
 8002cee:	4091      	lsls	r1, r2
 8002cf0:	000a      	movs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2225      	movs	r2, #37	@ 0x25
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2224      	movs	r2, #36	@ 0x24
 8002d06:	2100      	movs	r1, #0
 8002d08:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	0010      	movs	r0, r2
 8002d1a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d1c:	46c0      	nop			@ (mov r8, r8)
 8002d1e:	46c0      	nop			@ (mov r8, r8)
}
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b004      	add	sp, #16
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d38:	221c      	movs	r2, #28
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	2101      	movs	r1, #1
 8002d42:	4091      	lsls	r1, r2
 8002d44:	000a      	movs	r2, r1
 8002d46:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d108      	bne.n	8002d6a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d68:	e007      	b.n	8002d7a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	60da      	str	r2, [r3, #12]
}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b004      	add	sp, #16
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d9a:	e149      	b.n	8003030 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4091      	lsls	r1, r2
 8002da6:	000a      	movs	r2, r1
 8002da8:	4013      	ands	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d100      	bne.n	8002db4 <HAL_GPIO_Init+0x30>
 8002db2:	e13a      	b.n	800302a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2203      	movs	r2, #3
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d005      	beq.n	8002dcc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d130      	bne.n	8002e2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	0013      	movs	r3, r2
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	409a      	lsls	r2, r3
 8002dee:	0013      	movs	r3, r2
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e02:	2201      	movs	r2, #1
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	409a      	lsls	r2, r3
 8002e08:	0013      	movs	r3, r2
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	2201      	movs	r2, #1
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	0013      	movs	r3, r2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2203      	movs	r2, #3
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d017      	beq.n	8002e6a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	409a      	lsls	r2, r3
 8002e48:	0013      	movs	r3, r2
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	0013      	movs	r3, r2
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d123      	bne.n	8002ebe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	08da      	lsrs	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	0092      	lsls	r2, r2, #2
 8002e80:	58d3      	ldr	r3, [r2, r3]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2207      	movs	r2, #7
 8002e88:	4013      	ands	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	0013      	movs	r3, r2
 8002e92:	43da      	mvns	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2107      	movs	r1, #7
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	0092      	lsls	r2, r2, #2
 8002eba:	6939      	ldr	r1, [r7, #16]
 8002ebc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	2203      	movs	r2, #3
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2203      	movs	r2, #3
 8002edc:	401a      	ands	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	0013      	movs	r3, r2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	23c0      	movs	r3, #192	@ 0xc0
 8002ef8:	029b      	lsls	r3, r3, #10
 8002efa:	4013      	ands	r3, r2
 8002efc:	d100      	bne.n	8002f00 <HAL_GPIO_Init+0x17c>
 8002efe:	e094      	b.n	800302a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f00:	4b51      	ldr	r3, [pc, #324]	@ (8003048 <HAL_GPIO_Init+0x2c4>)
 8002f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f04:	4b50      	ldr	r3, [pc, #320]	@ (8003048 <HAL_GPIO_Init+0x2c4>)
 8002f06:	2101      	movs	r1, #1
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f0c:	4a4f      	ldr	r2, [pc, #316]	@ (800304c <HAL_GPIO_Init+0x2c8>)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	3302      	adds	r3, #2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	589b      	ldr	r3, [r3, r2]
 8002f18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	4013      	ands	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	220f      	movs	r2, #15
 8002f24:	409a      	lsls	r2, r3
 8002f26:	0013      	movs	r3, r2
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	23a0      	movs	r3, #160	@ 0xa0
 8002f34:	05db      	lsls	r3, r3, #23
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d013      	beq.n	8002f62 <HAL_GPIO_Init+0x1de>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a44      	ldr	r2, [pc, #272]	@ (8003050 <HAL_GPIO_Init+0x2cc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00d      	beq.n	8002f5e <HAL_GPIO_Init+0x1da>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a43      	ldr	r2, [pc, #268]	@ (8003054 <HAL_GPIO_Init+0x2d0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <HAL_GPIO_Init+0x1d6>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a42      	ldr	r2, [pc, #264]	@ (8003058 <HAL_GPIO_Init+0x2d4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_GPIO_Init+0x1d2>
 8002f52:	2305      	movs	r3, #5
 8002f54:	e006      	b.n	8002f64 <HAL_GPIO_Init+0x1e0>
 8002f56:	2306      	movs	r3, #6
 8002f58:	e004      	b.n	8002f64 <HAL_GPIO_Init+0x1e0>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e002      	b.n	8002f64 <HAL_GPIO_Init+0x1e0>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_GPIO_Init+0x1e0>
 8002f62:	2300      	movs	r3, #0
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	2103      	movs	r1, #3
 8002f68:	400a      	ands	r2, r1
 8002f6a:	0092      	lsls	r2, r2, #2
 8002f6c:	4093      	lsls	r3, r2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f74:	4935      	ldr	r1, [pc, #212]	@ (800304c <HAL_GPIO_Init+0x2c8>)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f82:	4b36      	ldr	r3, [pc, #216]	@ (800305c <HAL_GPIO_Init+0x2d8>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	2380      	movs	r3, #128	@ 0x80
 8002f98:	035b      	lsls	r3, r3, #13
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800305c <HAL_GPIO_Init+0x2d8>)
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002fac:	4b2b      	ldr	r3, [pc, #172]	@ (800305c <HAL_GPIO_Init+0x2d8>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	43da      	mvns	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	2380      	movs	r3, #128	@ 0x80
 8002fc2:	039b      	lsls	r3, r3, #14
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fd0:	4b22      	ldr	r3, [pc, #136]	@ (800305c <HAL_GPIO_Init+0x2d8>)
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002fd6:	4b21      	ldr	r3, [pc, #132]	@ (800305c <HAL_GPIO_Init+0x2d8>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	2380      	movs	r3, #128	@ 0x80
 8002fec:	029b      	lsls	r3, r3, #10
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ffa:	4b18      	ldr	r3, [pc, #96]	@ (800305c <HAL_GPIO_Init+0x2d8>)
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003000:	4b16      	ldr	r3, [pc, #88]	@ (800305c <HAL_GPIO_Init+0x2d8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	43da      	mvns	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	2380      	movs	r3, #128	@ 0x80
 8003016:	025b      	lsls	r3, r3, #9
 8003018:	4013      	ands	r3, r2
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003024:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <HAL_GPIO_Init+0x2d8>)
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3301      	adds	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	40da      	lsrs	r2, r3
 8003038:	1e13      	subs	r3, r2, #0
 800303a:	d000      	beq.n	800303e <HAL_GPIO_Init+0x2ba>
 800303c:	e6ae      	b.n	8002d9c <HAL_GPIO_Init+0x18>
  }
}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	46c0      	nop			@ (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b006      	add	sp, #24
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	40010000 	.word	0x40010000
 8003050:	50000400 	.word	0x50000400
 8003054:	50000800 	.word	0x50000800
 8003058:	50001c00 	.word	0x50001c00
 800305c:	40010400 	.word	0x40010400

08003060 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	0008      	movs	r0, r1
 800306a:	0011      	movs	r1, r2
 800306c:	1cbb      	adds	r3, r7, #2
 800306e:	1c02      	adds	r2, r0, #0
 8003070:	801a      	strh	r2, [r3, #0]
 8003072:	1c7b      	adds	r3, r7, #1
 8003074:	1c0a      	adds	r2, r1, #0
 8003076:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003078:	1c7b      	adds	r3, r7, #1
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003080:	1cbb      	adds	r3, r7, #2
 8003082:	881a      	ldrh	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003088:	e003      	b.n	8003092 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800308a:	1cbb      	adds	r3, r7, #2
 800308c:	881a      	ldrh	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	46bd      	mov	sp, r7
 8003096:	b002      	add	sp, #8
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e082      	b.n	80031b4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2241      	movs	r2, #65	@ 0x41
 80030b2:	5c9b      	ldrb	r3, [r3, r2]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d107      	bne.n	80030ca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2240      	movs	r2, #64	@ 0x40
 80030be:	2100      	movs	r1, #0
 80030c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f7fe fa81 	bl	80015cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2241      	movs	r2, #65	@ 0x41
 80030ce:	2124      	movs	r1, #36	@ 0x24
 80030d0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2101      	movs	r1, #1
 80030de:	438a      	bics	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4934      	ldr	r1, [pc, #208]	@ (80031bc <HAL_I2C_Init+0x120>)
 80030ec:	400a      	ands	r2, r1
 80030ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4931      	ldr	r1, [pc, #196]	@ (80031c0 <HAL_I2C_Init+0x124>)
 80030fc:	400a      	ands	r2, r1
 80030fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d108      	bne.n	800311a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2180      	movs	r1, #128	@ 0x80
 8003112:	0209      	lsls	r1, r1, #8
 8003114:	430a      	orrs	r2, r1
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	e007      	b.n	800312a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2184      	movs	r1, #132	@ 0x84
 8003124:	0209      	lsls	r1, r1, #8
 8003126:	430a      	orrs	r2, r1
 8003128:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d104      	bne.n	800313c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2280      	movs	r2, #128	@ 0x80
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	491f      	ldr	r1, [pc, #124]	@ (80031c4 <HAL_I2C_Init+0x128>)
 8003148:	430a      	orrs	r2, r1
 800314a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	491a      	ldr	r1, [pc, #104]	@ (80031c0 <HAL_I2C_Init+0x124>)
 8003158:	400a      	ands	r2, r1
 800315a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	431a      	orrs	r2, r3
 8003166:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69d9      	ldr	r1, [r3, #28]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1a      	ldr	r2, [r3, #32]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2101      	movs	r1, #1
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2241      	movs	r2, #65	@ 0x41
 80031a0:	2120      	movs	r1, #32
 80031a2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2242      	movs	r2, #66	@ 0x42
 80031ae:	2100      	movs	r1, #0
 80031b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	f0ffffff 	.word	0xf0ffffff
 80031c0:	ffff7fff 	.word	0xffff7fff
 80031c4:	02008000 	.word	0x02008000

080031c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2241      	movs	r2, #65	@ 0x41
 80031d6:	5c9b      	ldrb	r3, [r3, r2]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d138      	bne.n	8003250 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2240      	movs	r2, #64	@ 0x40
 80031e2:	5c9b      	ldrb	r3, [r3, r2]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e032      	b.n	8003252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2240      	movs	r2, #64	@ 0x40
 80031f0:	2101      	movs	r1, #1
 80031f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2241      	movs	r2, #65	@ 0x41
 80031f8:	2124      	movs	r1, #36	@ 0x24
 80031fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2101      	movs	r1, #1
 8003208:	438a      	bics	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4911      	ldr	r1, [pc, #68]	@ (800325c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003218:	400a      	ands	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6819      	ldr	r1, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2101      	movs	r1, #1
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2241      	movs	r2, #65	@ 0x41
 8003240:	2120      	movs	r1, #32
 8003242:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2240      	movs	r2, #64	@ 0x40
 8003248:	2100      	movs	r1, #0
 800324a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
  }
}
 8003252:	0018      	movs	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	b002      	add	sp, #8
 8003258:	bd80      	pop	{r7, pc}
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	ffffefff 	.word	0xffffefff

08003260 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2241      	movs	r2, #65	@ 0x41
 800326e:	5c9b      	ldrb	r3, [r3, r2]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b20      	cmp	r3, #32
 8003274:	d139      	bne.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2240      	movs	r2, #64	@ 0x40
 800327a:	5c9b      	ldrb	r3, [r3, r2]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003280:	2302      	movs	r3, #2
 8003282:	e033      	b.n	80032ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2240      	movs	r2, #64	@ 0x40
 8003288:	2101      	movs	r1, #1
 800328a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2241      	movs	r2, #65	@ 0x41
 8003290:	2124      	movs	r1, #36	@ 0x24
 8003292:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2101      	movs	r1, #1
 80032a0:	438a      	bics	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a11      	ldr	r2, [pc, #68]	@ (80032f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	430a      	orrs	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2241      	movs	r2, #65	@ 0x41
 80032da:	2120      	movs	r1, #32
 80032dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2240      	movs	r2, #64	@ 0x40
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032ea:	2302      	movs	r3, #2
  }
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b004      	add	sp, #16
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	fffff0ff 	.word	0xfffff0ff

080032f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f8:	b5b0      	push	{r4, r5, r7, lr}
 80032fa:	b08a      	sub	sp, #40	@ 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d102      	bne.n	800330c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f000 fb6c 	bl	80039e4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800330c:	4bc8      	ldr	r3, [pc, #800]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	220c      	movs	r2, #12
 8003312:	4013      	ands	r3, r2
 8003314:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003316:	4bc6      	ldr	r3, [pc, #792]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	2380      	movs	r3, #128	@ 0x80
 800331c:	025b      	lsls	r3, r3, #9
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2201      	movs	r2, #1
 8003328:	4013      	ands	r3, r2
 800332a:	d100      	bne.n	800332e <HAL_RCC_OscConfig+0x36>
 800332c:	e07d      	b.n	800342a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d007      	beq.n	8003344 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d112      	bne.n	8003360 <HAL_RCC_OscConfig+0x68>
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	2380      	movs	r3, #128	@ 0x80
 800333e:	025b      	lsls	r3, r3, #9
 8003340:	429a      	cmp	r2, r3
 8003342:	d10d      	bne.n	8003360 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	4bba      	ldr	r3, [pc, #744]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	029b      	lsls	r3, r3, #10
 800334c:	4013      	ands	r3, r2
 800334e:	d100      	bne.n	8003352 <HAL_RCC_OscConfig+0x5a>
 8003350:	e06a      	b.n	8003428 <HAL_RCC_OscConfig+0x130>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d166      	bne.n	8003428 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f000 fb42 	bl	80039e4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	2380      	movs	r3, #128	@ 0x80
 8003366:	025b      	lsls	r3, r3, #9
 8003368:	429a      	cmp	r2, r3
 800336a:	d107      	bne.n	800337c <HAL_RCC_OscConfig+0x84>
 800336c:	4bb0      	ldr	r3, [pc, #704]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4baf      	ldr	r3, [pc, #700]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003372:	2180      	movs	r1, #128	@ 0x80
 8003374:	0249      	lsls	r1, r1, #9
 8003376:	430a      	orrs	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e027      	b.n	80033cc <HAL_RCC_OscConfig+0xd4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	23a0      	movs	r3, #160	@ 0xa0
 8003382:	02db      	lsls	r3, r3, #11
 8003384:	429a      	cmp	r2, r3
 8003386:	d10e      	bne.n	80033a6 <HAL_RCC_OscConfig+0xae>
 8003388:	4ba9      	ldr	r3, [pc, #676]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4ba8      	ldr	r3, [pc, #672]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 800338e:	2180      	movs	r1, #128	@ 0x80
 8003390:	02c9      	lsls	r1, r1, #11
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	4ba6      	ldr	r3, [pc, #664]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4ba5      	ldr	r3, [pc, #660]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 800339c:	2180      	movs	r1, #128	@ 0x80
 800339e:	0249      	lsls	r1, r1, #9
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e012      	b.n	80033cc <HAL_RCC_OscConfig+0xd4>
 80033a6:	4ba2      	ldr	r3, [pc, #648]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4ba1      	ldr	r3, [pc, #644]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80033ac:	49a1      	ldr	r1, [pc, #644]	@ (8003634 <HAL_RCC_OscConfig+0x33c>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	4b9f      	ldr	r3, [pc, #636]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	025b      	lsls	r3, r3, #9
 80033ba:	4013      	ands	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4b9b      	ldr	r3, [pc, #620]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b9a      	ldr	r3, [pc, #616]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80033c6:	499c      	ldr	r1, [pc, #624]	@ (8003638 <HAL_RCC_OscConfig+0x340>)
 80033c8:	400a      	ands	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d014      	beq.n	80033fe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe fd36 	bl	8001e44 <HAL_GetTick>
 80033d8:	0003      	movs	r3, r0
 80033da:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033de:	f7fe fd31 	bl	8001e44 <HAL_GetTick>
 80033e2:	0002      	movs	r2, r0
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b64      	cmp	r3, #100	@ 0x64
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e2f9      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	2380      	movs	r3, #128	@ 0x80
 80033f6:	029b      	lsls	r3, r3, #10
 80033f8:	4013      	ands	r3, r2
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0xe6>
 80033fc:	e015      	b.n	800342a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe fd21 	bl	8001e44 <HAL_GetTick>
 8003402:	0003      	movs	r3, r0
 8003404:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fd1c 	bl	8001e44 <HAL_GetTick>
 800340c:	0002      	movs	r2, r0
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	@ 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e2e4      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800341a:	4b85      	ldr	r3, [pc, #532]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	2380      	movs	r3, #128	@ 0x80
 8003420:	029b      	lsls	r3, r3, #10
 8003422:	4013      	ands	r3, r2
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x110>
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2202      	movs	r2, #2
 8003430:	4013      	ands	r3, r2
 8003432:	d100      	bne.n	8003436 <HAL_RCC_OscConfig+0x13e>
 8003434:	e099      	b.n	800356a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343e:	2220      	movs	r2, #32
 8003440:	4013      	ands	r3, r2
 8003442:	d009      	beq.n	8003458 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003444:	4b7a      	ldr	r3, [pc, #488]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b79      	ldr	r3, [pc, #484]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 800344a:	2120      	movs	r1, #32
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	2220      	movs	r2, #32
 8003454:	4393      	bics	r3, r2
 8003456:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b04      	cmp	r3, #4
 800345c:	d005      	beq.n	800346a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	2b0c      	cmp	r3, #12
 8003462:	d13e      	bne.n	80034e2 <HAL_RCC_OscConfig+0x1ea>
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d13b      	bne.n	80034e2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800346a:	4b71      	ldr	r3, [pc, #452]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2204      	movs	r2, #4
 8003470:	4013      	ands	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_RCC_OscConfig+0x186>
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e2b2      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4b6c      	ldr	r3, [pc, #432]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4a6e      	ldr	r2, [pc, #440]	@ (800363c <HAL_RCC_OscConfig+0x344>)
 8003484:	4013      	ands	r3, r2
 8003486:	0019      	movs	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	021a      	lsls	r2, r3, #8
 800348e:	4b68      	ldr	r3, [pc, #416]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003494:	4b66      	ldr	r3, [pc, #408]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2209      	movs	r2, #9
 800349a:	4393      	bics	r3, r2
 800349c:	0019      	movs	r1, r3
 800349e:	4b64      	ldr	r3, [pc, #400]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80034a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a2:	430a      	orrs	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034a6:	f000 fbeb 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 80034aa:	0001      	movs	r1, r0
 80034ac:	4b60      	ldr	r3, [pc, #384]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	220f      	movs	r2, #15
 80034b4:	4013      	ands	r3, r2
 80034b6:	4a62      	ldr	r2, [pc, #392]	@ (8003640 <HAL_RCC_OscConfig+0x348>)
 80034b8:	5cd3      	ldrb	r3, [r2, r3]
 80034ba:	000a      	movs	r2, r1
 80034bc:	40da      	lsrs	r2, r3
 80034be:	4b61      	ldr	r3, [pc, #388]	@ (8003644 <HAL_RCC_OscConfig+0x34c>)
 80034c0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80034c2:	4b61      	ldr	r3, [pc, #388]	@ (8003648 <HAL_RCC_OscConfig+0x350>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2513      	movs	r5, #19
 80034c8:	197c      	adds	r4, r7, r5
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7fe fc74 	bl	8001db8 <HAL_InitTick>
 80034d0:	0003      	movs	r3, r0
 80034d2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80034d4:	197b      	adds	r3, r7, r5
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d046      	beq.n	800356a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80034dc:	197b      	adds	r3, r7, r5
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	e280      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d027      	beq.n	8003538 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034e8:	4b51      	ldr	r3, [pc, #324]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2209      	movs	r2, #9
 80034ee:	4393      	bics	r3, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80034f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f6:	430a      	orrs	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fe fca3 	bl	8001e44 <HAL_GetTick>
 80034fe:	0003      	movs	r3, r0
 8003500:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003504:	f7fe fc9e 	bl	8001e44 <HAL_GetTick>
 8003508:	0002      	movs	r2, r0
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e266      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003516:	4b46      	ldr	r3, [pc, #280]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2204      	movs	r2, #4
 800351c:	4013      	ands	r3, r2
 800351e:	d0f1      	beq.n	8003504 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003520:	4b43      	ldr	r3, [pc, #268]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a45      	ldr	r2, [pc, #276]	@ (800363c <HAL_RCC_OscConfig+0x344>)
 8003526:	4013      	ands	r3, r2
 8003528:	0019      	movs	r1, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	021a      	lsls	r2, r3, #8
 8003530:	4b3f      	ldr	r3, [pc, #252]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	e018      	b.n	800356a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003538:	4b3d      	ldr	r3, [pc, #244]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4b3c      	ldr	r3, [pc, #240]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 800353e:	2101      	movs	r1, #1
 8003540:	438a      	bics	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fe fc7e 	bl	8001e44 <HAL_GetTick>
 8003548:	0003      	movs	r3, r0
 800354a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354e:	f7fe fc79 	bl	8001e44 <HAL_GetTick>
 8003552:	0002      	movs	r2, r0
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e241      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003560:	4b33      	ldr	r3, [pc, #204]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2204      	movs	r2, #4
 8003566:	4013      	ands	r3, r2
 8003568:	d1f1      	bne.n	800354e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2210      	movs	r2, #16
 8003570:	4013      	ands	r3, r2
 8003572:	d100      	bne.n	8003576 <HAL_RCC_OscConfig+0x27e>
 8003574:	e0a1      	b.n	80036ba <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d140      	bne.n	80035fe <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800357c:	4b2c      	ldr	r3, [pc, #176]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	2380      	movs	r3, #128	@ 0x80
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4013      	ands	r3, r2
 8003586:	d005      	beq.n	8003594 <HAL_RCC_OscConfig+0x29c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e227      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003594:	4b26      	ldr	r3, [pc, #152]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4a2c      	ldr	r2, [pc, #176]	@ (800364c <HAL_RCC_OscConfig+0x354>)
 800359a:	4013      	ands	r3, r2
 800359c:	0019      	movs	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1a      	ldr	r2, [r3, #32]
 80035a2:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035a8:	4b21      	ldr	r3, [pc, #132]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	021b      	lsls	r3, r3, #8
 80035ae:	0a19      	lsrs	r1, r3, #8
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	061a      	lsls	r2, r3, #24
 80035b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	0b5b      	lsrs	r3, r3, #13
 80035c2:	3301      	adds	r3, #1
 80035c4:	2280      	movs	r2, #128	@ 0x80
 80035c6:	0212      	lsls	r2, r2, #8
 80035c8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80035ca:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	210f      	movs	r1, #15
 80035d2:	400b      	ands	r3, r1
 80035d4:	491a      	ldr	r1, [pc, #104]	@ (8003640 <HAL_RCC_OscConfig+0x348>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80035da:	4b1a      	ldr	r3, [pc, #104]	@ (8003644 <HAL_RCC_OscConfig+0x34c>)
 80035dc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80035de:	4b1a      	ldr	r3, [pc, #104]	@ (8003648 <HAL_RCC_OscConfig+0x350>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2513      	movs	r5, #19
 80035e4:	197c      	adds	r4, r7, r5
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7fe fbe6 	bl	8001db8 <HAL_InitTick>
 80035ec:	0003      	movs	r3, r0
 80035ee:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80035f0:	197b      	adds	r3, r7, r5
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d060      	beq.n	80036ba <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80035f8:	197b      	adds	r3, r7, r5
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	e1f2      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d03f      	beq.n	8003686 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003606:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4b09      	ldr	r3, [pc, #36]	@ (8003630 <HAL_RCC_OscConfig+0x338>)
 800360c:	2180      	movs	r1, #128	@ 0x80
 800360e:	0049      	lsls	r1, r1, #1
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fe fc16 	bl	8001e44 <HAL_GetTick>
 8003618:	0003      	movs	r3, r0
 800361a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800361c:	e018      	b.n	8003650 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800361e:	f7fe fc11 	bl	8001e44 <HAL_GetTick>
 8003622:	0002      	movs	r2, r0
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d911      	bls.n	8003650 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e1d9      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
 8003630:	40021000 	.word	0x40021000
 8003634:	fffeffff 	.word	0xfffeffff
 8003638:	fffbffff 	.word	0xfffbffff
 800363c:	ffffe0ff 	.word	0xffffe0ff
 8003640:	08006b90 	.word	0x08006b90
 8003644:	20000000 	.word	0x20000000
 8003648:	20000004 	.word	0x20000004
 800364c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003650:	4bc9      	ldr	r3, [pc, #804]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4013      	ands	r3, r2
 800365a:	d0e0      	beq.n	800361e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800365c:	4bc6      	ldr	r3, [pc, #792]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4ac6      	ldr	r2, [pc, #792]	@ (800397c <HAL_RCC_OscConfig+0x684>)
 8003662:	4013      	ands	r3, r2
 8003664:	0019      	movs	r1, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1a      	ldr	r2, [r3, #32]
 800366a:	4bc3      	ldr	r3, [pc, #780]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003670:	4bc1      	ldr	r3, [pc, #772]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	0a19      	lsrs	r1, r3, #8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	061a      	lsls	r2, r3, #24
 800367e:	4bbe      	ldr	r3, [pc, #760]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003680:	430a      	orrs	r2, r1
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	e019      	b.n	80036ba <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003686:	4bbc      	ldr	r3, [pc, #752]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4bbb      	ldr	r3, [pc, #748]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 800368c:	49bc      	ldr	r1, [pc, #752]	@ (8003980 <HAL_RCC_OscConfig+0x688>)
 800368e:	400a      	ands	r2, r1
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003692:	f7fe fbd7 	bl	8001e44 <HAL_GetTick>
 8003696:	0003      	movs	r3, r0
 8003698:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800369c:	f7fe fbd2 	bl	8001e44 <HAL_GetTick>
 80036a0:	0002      	movs	r2, r0
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e19a      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036ae:	4bb2      	ldr	r3, [pc, #712]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	2380      	movs	r3, #128	@ 0x80
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2208      	movs	r2, #8
 80036c0:	4013      	ands	r3, r2
 80036c2:	d036      	beq.n	8003732 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d019      	beq.n	8003700 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036cc:	4baa      	ldr	r3, [pc, #680]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80036ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036d0:	4ba9      	ldr	r3, [pc, #676]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80036d2:	2101      	movs	r1, #1
 80036d4:	430a      	orrs	r2, r1
 80036d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d8:	f7fe fbb4 	bl	8001e44 <HAL_GetTick>
 80036dc:	0003      	movs	r3, r0
 80036de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e2:	f7fe fbaf 	bl	8001e44 <HAL_GetTick>
 80036e6:	0002      	movs	r2, r0
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e177      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036f4:	4ba0      	ldr	r3, [pc, #640]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80036f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f8:	2202      	movs	r2, #2
 80036fa:	4013      	ands	r3, r2
 80036fc:	d0f1      	beq.n	80036e2 <HAL_RCC_OscConfig+0x3ea>
 80036fe:	e018      	b.n	8003732 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003700:	4b9d      	ldr	r3, [pc, #628]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003702:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003704:	4b9c      	ldr	r3, [pc, #624]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003706:	2101      	movs	r1, #1
 8003708:	438a      	bics	r2, r1
 800370a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370c:	f7fe fb9a 	bl	8001e44 <HAL_GetTick>
 8003710:	0003      	movs	r3, r0
 8003712:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003716:	f7fe fb95 	bl	8001e44 <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e15d      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003728:	4b93      	ldr	r3, [pc, #588]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 800372a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372c:	2202      	movs	r2, #2
 800372e:	4013      	ands	r3, r2
 8003730:	d1f1      	bne.n	8003716 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2204      	movs	r2, #4
 8003738:	4013      	ands	r3, r2
 800373a:	d100      	bne.n	800373e <HAL_RCC_OscConfig+0x446>
 800373c:	e0ae      	b.n	800389c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2023      	movs	r0, #35	@ 0x23
 8003740:	183b      	adds	r3, r7, r0
 8003742:	2200      	movs	r2, #0
 8003744:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b8c      	ldr	r3, [pc, #560]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003748:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800374a:	2380      	movs	r3, #128	@ 0x80
 800374c:	055b      	lsls	r3, r3, #21
 800374e:	4013      	ands	r3, r2
 8003750:	d109      	bne.n	8003766 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	4b89      	ldr	r3, [pc, #548]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003756:	4b88      	ldr	r3, [pc, #544]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003758:	2180      	movs	r1, #128	@ 0x80
 800375a:	0549      	lsls	r1, r1, #21
 800375c:	430a      	orrs	r2, r1
 800375e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003760:	183b      	adds	r3, r7, r0
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003766:	4b87      	ldr	r3, [pc, #540]	@ (8003984 <HAL_RCC_OscConfig+0x68c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4013      	ands	r3, r2
 8003770:	d11a      	bne.n	80037a8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003772:	4b84      	ldr	r3, [pc, #528]	@ (8003984 <HAL_RCC_OscConfig+0x68c>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4b83      	ldr	r3, [pc, #524]	@ (8003984 <HAL_RCC_OscConfig+0x68c>)
 8003778:	2180      	movs	r1, #128	@ 0x80
 800377a:	0049      	lsls	r1, r1, #1
 800377c:	430a      	orrs	r2, r1
 800377e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003780:	f7fe fb60 	bl	8001e44 <HAL_GetTick>
 8003784:	0003      	movs	r3, r0
 8003786:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378a:	f7fe fb5b 	bl	8001e44 <HAL_GetTick>
 800378e:	0002      	movs	r2, r0
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b64      	cmp	r3, #100	@ 0x64
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e123      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	4b79      	ldr	r3, [pc, #484]	@ (8003984 <HAL_RCC_OscConfig+0x68c>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	2380      	movs	r3, #128	@ 0x80
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	4013      	ands	r3, r2
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	2380      	movs	r3, #128	@ 0x80
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4cc>
 80037b4:	4b70      	ldr	r3, [pc, #448]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80037b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80037ba:	2180      	movs	r1, #128	@ 0x80
 80037bc:	0049      	lsls	r1, r1, #1
 80037be:	430a      	orrs	r2, r1
 80037c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80037c2:	e031      	b.n	8003828 <HAL_RCC_OscConfig+0x530>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10c      	bne.n	80037e6 <HAL_RCC_OscConfig+0x4ee>
 80037cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80037ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037d0:	4b69      	ldr	r3, [pc, #420]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80037d2:	496b      	ldr	r1, [pc, #428]	@ (8003980 <HAL_RCC_OscConfig+0x688>)
 80037d4:	400a      	ands	r2, r1
 80037d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80037d8:	4b67      	ldr	r3, [pc, #412]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80037da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037dc:	4b66      	ldr	r3, [pc, #408]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80037de:	496a      	ldr	r1, [pc, #424]	@ (8003988 <HAL_RCC_OscConfig+0x690>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80037e4:	e020      	b.n	8003828 <HAL_RCC_OscConfig+0x530>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	23a0      	movs	r3, #160	@ 0xa0
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d10e      	bne.n	8003810 <HAL_RCC_OscConfig+0x518>
 80037f2:	4b61      	ldr	r3, [pc, #388]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80037f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037f6:	4b60      	ldr	r3, [pc, #384]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80037f8:	2180      	movs	r1, #128	@ 0x80
 80037fa:	00c9      	lsls	r1, r1, #3
 80037fc:	430a      	orrs	r2, r1
 80037fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8003800:	4b5d      	ldr	r3, [pc, #372]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003802:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003804:	4b5c      	ldr	r3, [pc, #368]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003806:	2180      	movs	r1, #128	@ 0x80
 8003808:	0049      	lsls	r1, r1, #1
 800380a:	430a      	orrs	r2, r1
 800380c:	651a      	str	r2, [r3, #80]	@ 0x50
 800380e:	e00b      	b.n	8003828 <HAL_RCC_OscConfig+0x530>
 8003810:	4b59      	ldr	r3, [pc, #356]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003812:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003814:	4b58      	ldr	r3, [pc, #352]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003816:	495a      	ldr	r1, [pc, #360]	@ (8003980 <HAL_RCC_OscConfig+0x688>)
 8003818:	400a      	ands	r2, r1
 800381a:	651a      	str	r2, [r3, #80]	@ 0x50
 800381c:	4b56      	ldr	r3, [pc, #344]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 800381e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003820:	4b55      	ldr	r3, [pc, #340]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003822:	4959      	ldr	r1, [pc, #356]	@ (8003988 <HAL_RCC_OscConfig+0x690>)
 8003824:	400a      	ands	r2, r1
 8003826:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d015      	beq.n	800385c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003830:	f7fe fb08 	bl	8001e44 <HAL_GetTick>
 8003834:	0003      	movs	r3, r0
 8003836:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003838:	e009      	b.n	800384e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800383a:	f7fe fb03 	bl	8001e44 <HAL_GetTick>
 800383e:	0002      	movs	r2, r0
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	4a51      	ldr	r2, [pc, #324]	@ (800398c <HAL_RCC_OscConfig+0x694>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e0ca      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800384e:	4b4a      	ldr	r3, [pc, #296]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003850:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4013      	ands	r3, r2
 8003858:	d0ef      	beq.n	800383a <HAL_RCC_OscConfig+0x542>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385c:	f7fe faf2 	bl	8001e44 <HAL_GetTick>
 8003860:	0003      	movs	r3, r0
 8003862:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003864:	e009      	b.n	800387a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fe faed 	bl	8001e44 <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	4a46      	ldr	r2, [pc, #280]	@ (800398c <HAL_RCC_OscConfig+0x694>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e0b4      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800387a:	4b3f      	ldr	r3, [pc, #252]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 800387c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800387e:	2380      	movs	r3, #128	@ 0x80
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4013      	ands	r3, r2
 8003884:	d1ef      	bne.n	8003866 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003886:	2323      	movs	r3, #35	@ 0x23
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003890:	4b39      	ldr	r3, [pc, #228]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003894:	4b38      	ldr	r3, [pc, #224]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003896:	493e      	ldr	r1, [pc, #248]	@ (8003990 <HAL_RCC_OscConfig+0x698>)
 8003898:	400a      	ands	r2, r1
 800389a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d100      	bne.n	80038a6 <HAL_RCC_OscConfig+0x5ae>
 80038a4:	e09d      	b.n	80039e2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d100      	bne.n	80038ae <HAL_RCC_OscConfig+0x5b6>
 80038ac:	e076      	b.n	800399c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d145      	bne.n	8003942 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b6:	4b30      	ldr	r3, [pc, #192]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80038bc:	4935      	ldr	r1, [pc, #212]	@ (8003994 <HAL_RCC_OscConfig+0x69c>)
 80038be:	400a      	ands	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c2:	f7fe fabf 	bl	8001e44 <HAL_GetTick>
 80038c6:	0003      	movs	r3, r0
 80038c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fe faba 	bl	8001e44 <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e082      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80038de:	4b26      	ldr	r3, [pc, #152]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	049b      	lsls	r3, r3, #18
 80038e6:	4013      	ands	r3, r2
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ea:	4b23      	ldr	r3, [pc, #140]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003998 <HAL_RCC_OscConfig+0x6a0>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003902:	431a      	orrs	r2, r3
 8003904:	4b1c      	ldr	r3, [pc, #112]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003906:	430a      	orrs	r2, r1
 8003908:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800390a:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	4b1a      	ldr	r3, [pc, #104]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003910:	2180      	movs	r1, #128	@ 0x80
 8003912:	0449      	lsls	r1, r1, #17
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe fa94 	bl	8001e44 <HAL_GetTick>
 800391c:	0003      	movs	r3, r0
 800391e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003922:	f7fe fa8f 	bl	8001e44 <HAL_GetTick>
 8003926:	0002      	movs	r2, r0
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e057      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003934:	4b10      	ldr	r3, [pc, #64]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2380      	movs	r3, #128	@ 0x80
 800393a:	049b      	lsls	r3, r3, #18
 800393c:	4013      	ands	r3, r2
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x62a>
 8003940:	e04f      	b.n	80039e2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	4b0d      	ldr	r3, [pc, #52]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 8003948:	4912      	ldr	r1, [pc, #72]	@ (8003994 <HAL_RCC_OscConfig+0x69c>)
 800394a:	400a      	ands	r2, r1
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fe fa79 	bl	8001e44 <HAL_GetTick>
 8003952:	0003      	movs	r3, r0
 8003954:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003958:	f7fe fa74 	bl	8001e44 <HAL_GetTick>
 800395c:	0002      	movs	r2, r0
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e03c      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800396a:	4b03      	ldr	r3, [pc, #12]	@ (8003978 <HAL_RCC_OscConfig+0x680>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	2380      	movs	r3, #128	@ 0x80
 8003970:	049b      	lsls	r3, r3, #18
 8003972:	4013      	ands	r3, r2
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x660>
 8003976:	e034      	b.n	80039e2 <HAL_RCC_OscConfig+0x6ea>
 8003978:	40021000 	.word	0x40021000
 800397c:	ffff1fff 	.word	0xffff1fff
 8003980:	fffffeff 	.word	0xfffffeff
 8003984:	40007000 	.word	0x40007000
 8003988:	fffffbff 	.word	0xfffffbff
 800398c:	00001388 	.word	0x00001388
 8003990:	efffffff 	.word	0xefffffff
 8003994:	feffffff 	.word	0xfeffffff
 8003998:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e01d      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039a8:	4b10      	ldr	r3, [pc, #64]	@ (80039ec <HAL_RCC_OscConfig+0x6f4>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	025b      	lsls	r3, r3, #9
 80039b4:	401a      	ands	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d10f      	bne.n	80039de <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	23f0      	movs	r3, #240	@ 0xf0
 80039c2:	039b      	lsls	r3, r3, #14
 80039c4:	401a      	ands	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d107      	bne.n	80039de <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	23c0      	movs	r3, #192	@ 0xc0
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	401a      	ands	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d001      	beq.n	80039e2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	0018      	movs	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b00a      	add	sp, #40	@ 0x28
 80039ea:	bdb0      	pop	{r4, r5, r7, pc}
 80039ec:	40021000 	.word	0x40021000

080039f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b5b0      	push	{r4, r5, r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e128      	b.n	8003c56 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b96      	ldr	r3, [pc, #600]	@ (8003c60 <HAL_RCC_ClockConfig+0x270>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d91e      	bls.n	8003a50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b93      	ldr	r3, [pc, #588]	@ (8003c60 <HAL_RCC_ClockConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2201      	movs	r2, #1
 8003a18:	4393      	bics	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	4b90      	ldr	r3, [pc, #576]	@ (8003c60 <HAL_RCC_ClockConfig+0x270>)
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a24:	f7fe fa0e 	bl	8001e44 <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2c:	e009      	b.n	8003a42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a2e:	f7fe fa09 	bl	8001e44 <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	4a8a      	ldr	r2, [pc, #552]	@ (8003c64 <HAL_RCC_ClockConfig+0x274>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e109      	b.n	8003c56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b87      	ldr	r3, [pc, #540]	@ (8003c60 <HAL_RCC_ClockConfig+0x270>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2201      	movs	r2, #1
 8003a48:	4013      	ands	r3, r2
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d1ee      	bne.n	8003a2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2202      	movs	r2, #2
 8003a56:	4013      	ands	r3, r2
 8003a58:	d009      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5a:	4b83      	ldr	r3, [pc, #524]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	22f0      	movs	r2, #240	@ 0xf0
 8003a60:	4393      	bics	r3, r2
 8003a62:	0019      	movs	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	4b7f      	ldr	r3, [pc, #508]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	4013      	ands	r3, r2
 8003a76:	d100      	bne.n	8003a7a <HAL_RCC_ClockConfig+0x8a>
 8003a78:	e089      	b.n	8003b8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a82:	4b79      	ldr	r3, [pc, #484]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	029b      	lsls	r3, r3, #10
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d120      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0e1      	b.n	8003c56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a9a:	4b73      	ldr	r3, [pc, #460]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	2380      	movs	r3, #128	@ 0x80
 8003aa0:	049b      	lsls	r3, r3, #18
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d114      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0d5      	b.n	8003c56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d109      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0ca      	b.n	8003c56 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ac0:	4b69      	ldr	r3, [pc, #420]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0c2      	b.n	8003c56 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad0:	4b65      	ldr	r3, [pc, #404]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	4393      	bics	r3, r2
 8003ad8:	0019      	movs	r1, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	4b62      	ldr	r3, [pc, #392]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae4:	f7fe f9ae 	bl	8001e44 <HAL_GetTick>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d111      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af4:	e009      	b.n	8003b0a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af6:	f7fe f9a5 	bl	8001e44 <HAL_GetTick>
 8003afa:	0002      	movs	r2, r0
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	4a58      	ldr	r2, [pc, #352]	@ (8003c64 <HAL_RCC_ClockConfig+0x274>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0a5      	b.n	8003c56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b0a:	4b57      	ldr	r3, [pc, #348]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	220c      	movs	r2, #12
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d1ef      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x106>
 8003b16:	e03a      	b.n	8003b8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d111      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b20:	e009      	b.n	8003b36 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b22:	f7fe f98f 	bl	8001e44 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	4a4d      	ldr	r2, [pc, #308]	@ (8003c64 <HAL_RCC_ClockConfig+0x274>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e08f      	b.n	8003c56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b36:	4b4c      	ldr	r3, [pc, #304]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	220c      	movs	r2, #12
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b0c      	cmp	r3, #12
 8003b40:	d1ef      	bne.n	8003b22 <HAL_RCC_ClockConfig+0x132>
 8003b42:	e024      	b.n	8003b8e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d11b      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b4c:	e009      	b.n	8003b62 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4e:	f7fe f979 	bl	8001e44 <HAL_GetTick>
 8003b52:	0002      	movs	r2, r0
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	4a42      	ldr	r2, [pc, #264]	@ (8003c64 <HAL_RCC_ClockConfig+0x274>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e079      	b.n	8003c56 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b62:	4b41      	ldr	r3, [pc, #260]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	220c      	movs	r2, #12
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d1ef      	bne.n	8003b4e <HAL_RCC_ClockConfig+0x15e>
 8003b6e:	e00e      	b.n	8003b8e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b70:	f7fe f968 	bl	8001e44 <HAL_GetTick>
 8003b74:	0002      	movs	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	4a3a      	ldr	r2, [pc, #232]	@ (8003c64 <HAL_RCC_ClockConfig+0x274>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e068      	b.n	8003c56 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b84:	4b38      	ldr	r3, [pc, #224]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	220c      	movs	r2, #12
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8e:	4b34      	ldr	r3, [pc, #208]	@ (8003c60 <HAL_RCC_ClockConfig+0x270>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2201      	movs	r2, #1
 8003b94:	4013      	ands	r3, r2
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d21e      	bcs.n	8003bda <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9c:	4b30      	ldr	r3, [pc, #192]	@ (8003c60 <HAL_RCC_ClockConfig+0x270>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	4393      	bics	r3, r2
 8003ba4:	0019      	movs	r1, r3
 8003ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8003c60 <HAL_RCC_ClockConfig+0x270>)
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bae:	f7fe f949 	bl	8001e44 <HAL_GetTick>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb6:	e009      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fe f944 	bl	8001e44 <HAL_GetTick>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	4a28      	ldr	r2, [pc, #160]	@ (8003c64 <HAL_RCC_ClockConfig+0x274>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e044      	b.n	8003c56 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bcc:	4b24      	ldr	r3, [pc, #144]	@ (8003c60 <HAL_RCC_ClockConfig+0x270>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d1ee      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2204      	movs	r2, #4
 8003be0:	4013      	ands	r3, r2
 8003be2:	d009      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be4:	4b20      	ldr	r3, [pc, #128]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4a20      	ldr	r2, [pc, #128]	@ (8003c6c <HAL_RCC_ClockConfig+0x27c>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	0019      	movs	r1, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c02:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	4a1a      	ldr	r2, [pc, #104]	@ (8003c70 <HAL_RCC_ClockConfig+0x280>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	00da      	lsls	r2, r3, #3
 8003c12:	4b15      	ldr	r3, [pc, #84]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003c14:	430a      	orrs	r2, r1
 8003c16:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c18:	f000 f832 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 8003c1c:	0001      	movs	r1, r0
 8003c1e:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	220f      	movs	r2, #15
 8003c26:	4013      	ands	r3, r2
 8003c28:	4a12      	ldr	r2, [pc, #72]	@ (8003c74 <HAL_RCC_ClockConfig+0x284>)
 8003c2a:	5cd3      	ldrb	r3, [r2, r3]
 8003c2c:	000a      	movs	r2, r1
 8003c2e:	40da      	lsrs	r2, r3
 8003c30:	4b11      	ldr	r3, [pc, #68]	@ (8003c78 <HAL_RCC_ClockConfig+0x288>)
 8003c32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c34:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <HAL_RCC_ClockConfig+0x28c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	250b      	movs	r5, #11
 8003c3a:	197c      	adds	r4, r7, r5
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f7fe f8bb 	bl	8001db8 <HAL_InitTick>
 8003c42:	0003      	movs	r3, r0
 8003c44:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003c46:	197b      	adds	r3, r7, r5
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003c4e:	197b      	adds	r3, r7, r5
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	e000      	b.n	8003c56 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b004      	add	sp, #16
 8003c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	40022000 	.word	0x40022000
 8003c64:	00001388 	.word	0x00001388
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	fffff8ff 	.word	0xfffff8ff
 8003c70:	ffffc7ff 	.word	0xffffc7ff
 8003c74:	08006b90 	.word	0x08006b90
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	20000004 	.word	0x20000004

08003c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c80:	b5b0      	push	{r4, r5, r7, lr}
 8003c82:	b08e      	sub	sp, #56	@ 0x38
 8003c84:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003c86:	4b4c      	ldr	r3, [pc, #304]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8e:	230c      	movs	r3, #12
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d014      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003c96:	d900      	bls.n	8003c9a <HAL_RCC_GetSysClockFreq+0x1a>
 8003c98:	e07b      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x112>
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d002      	beq.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x24>
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d00b      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x3a>
 8003ca2:	e076      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ca4:	4b44      	ldr	r3, [pc, #272]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2210      	movs	r2, #16
 8003caa:	4013      	ands	r3, r2
 8003cac:	d002      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003cae:	4b43      	ldr	r3, [pc, #268]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003cb0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003cb2:	e07c      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003cb4:	4b42      	ldr	r3, [pc, #264]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003cb6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003cb8:	e079      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cba:	4b42      	ldr	r3, [pc, #264]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x144>)
 8003cbc:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003cbe:	e076      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc2:	0c9a      	lsrs	r2, r3, #18
 8003cc4:	230f      	movs	r3, #15
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0x148>)
 8003cca:	5c9b      	ldrb	r3, [r3, r2]
 8003ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd0:	0d9a      	lsrs	r2, r3, #22
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cda:	4b37      	ldr	r3, [pc, #220]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	2380      	movs	r3, #128	@ 0x80
 8003ce0:	025b      	lsls	r3, r3, #9
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d01a      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	4a35      	ldr	r2, [pc, #212]	@ (8003dc4 <HAL_RCC_GetSysClockFreq+0x144>)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	69b8      	ldr	r0, [r7, #24]
 8003cf4:	69f9      	ldr	r1, [r7, #28]
 8003cf6:	f7fc fabd 	bl	8000274 <__aeabi_lmul>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	000b      	movs	r3, r1
 8003cfe:	0010      	movs	r0, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f7fc fa91 	bl	8000234 <__aeabi_uldivmod>
 8003d12:	0002      	movs	r2, r0
 8003d14:	000b      	movs	r3, r1
 8003d16:	0013      	movs	r3, r2
 8003d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d1a:	e037      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d1c:	4b26      	ldr	r3, [pc, #152]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2210      	movs	r2, #16
 8003d22:	4013      	ands	r3, r2
 8003d24:	d01a      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	4a23      	ldr	r2, [pc, #140]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d30:	2300      	movs	r3, #0
 8003d32:	68b8      	ldr	r0, [r7, #8]
 8003d34:	68f9      	ldr	r1, [r7, #12]
 8003d36:	f7fc fa9d 	bl	8000274 <__aeabi_lmul>
 8003d3a:	0002      	movs	r2, r0
 8003d3c:	000b      	movs	r3, r1
 8003d3e:	0010      	movs	r0, r2
 8003d40:	0019      	movs	r1, r3
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f7fc fa71 	bl	8000234 <__aeabi_uldivmod>
 8003d52:	0002      	movs	r2, r0
 8003d54:	000b      	movs	r3, r1
 8003d56:	0013      	movs	r3, r2
 8003d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d5a:	e017      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5e:	0018      	movs	r0, r3
 8003d60:	2300      	movs	r3, #0
 8003d62:	0019      	movs	r1, r3
 8003d64:	4a16      	ldr	r2, [pc, #88]	@ (8003dc0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003d66:	2300      	movs	r3, #0
 8003d68:	f7fc fa84 	bl	8000274 <__aeabi_lmul>
 8003d6c:	0002      	movs	r2, r0
 8003d6e:	000b      	movs	r3, r1
 8003d70:	0010      	movs	r0, r2
 8003d72:	0019      	movs	r1, r3
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	001c      	movs	r4, r3
 8003d78:	2300      	movs	r3, #0
 8003d7a:	001d      	movs	r5, r3
 8003d7c:	0022      	movs	r2, r4
 8003d7e:	002b      	movs	r3, r5
 8003d80:	f7fc fa58 	bl	8000234 <__aeabi_uldivmod>
 8003d84:	0002      	movs	r2, r0
 8003d86:	000b      	movs	r3, r1
 8003d88:	0013      	movs	r3, r2
 8003d8a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d8e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003d90:	e00d      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003d92:	4b09      	ldr	r3, [pc, #36]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	0b5b      	lsrs	r3, r3, #13
 8003d98:	2207      	movs	r2, #7
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	3301      	adds	r3, #1
 8003da2:	2280      	movs	r2, #128	@ 0x80
 8003da4:	0212      	lsls	r2, r2, #8
 8003da6:	409a      	lsls	r2, r3
 8003da8:	0013      	movs	r3, r2
 8003daa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003dac:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003db0:	0018      	movs	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b00e      	add	sp, #56	@ 0x38
 8003db6:	bdb0      	pop	{r4, r5, r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	003d0900 	.word	0x003d0900
 8003dc0:	00f42400 	.word	0x00f42400
 8003dc4:	007a1200 	.word	0x007a1200
 8003dc8:	08006ba8 	.word	0x08006ba8

08003dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd0:	4b02      	ldr	r3, [pc, #8]	@ (8003ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	20000000 	.word	0x20000000

08003de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003de4:	f7ff fff2 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 8003de8:	0001      	movs	r1, r0
 8003dea:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	2207      	movs	r2, #7
 8003df2:	4013      	ands	r3, r2
 8003df4:	4a04      	ldr	r2, [pc, #16]	@ (8003e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003df6:	5cd3      	ldrb	r3, [r2, r3]
 8003df8:	40d9      	lsrs	r1, r3
 8003dfa:	000b      	movs	r3, r1
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	40021000 	.word	0x40021000
 8003e08:	08006ba0 	.word	0x08006ba0

08003e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e10:	f7ff ffdc 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 8003e14:	0001      	movs	r1, r0
 8003e16:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	0adb      	lsrs	r3, r3, #11
 8003e1c:	2207      	movs	r2, #7
 8003e1e:	4013      	ands	r3, r2
 8003e20:	4a04      	ldr	r2, [pc, #16]	@ (8003e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e22:	5cd3      	ldrb	r3, [r2, r3]
 8003e24:	40d9      	lsrs	r1, r3
 8003e26:	000b      	movs	r3, r1
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	46c0      	nop			@ (mov r8, r8)
 8003e30:	40021000 	.word	0x40021000
 8003e34:	08006ba0 	.word	0x08006ba0

08003e38 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003e40:	2017      	movs	r0, #23
 8003e42:	183b      	adds	r3, r7, r0
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d100      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003e52:	e0c7      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e54:	4b84      	ldr	r3, [pc, #528]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003e56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e58:	2380      	movs	r3, #128	@ 0x80
 8003e5a:	055b      	lsls	r3, r3, #21
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d109      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	4b81      	ldr	r3, [pc, #516]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003e62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e64:	4b80      	ldr	r3, [pc, #512]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003e66:	2180      	movs	r1, #128	@ 0x80
 8003e68:	0549      	lsls	r1, r1, #21
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003e6e:	183b      	adds	r3, r7, r0
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e74:	4b7d      	ldr	r3, [pc, #500]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	2380      	movs	r3, #128	@ 0x80
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d11a      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e80:	4b7a      	ldr	r3, [pc, #488]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b79      	ldr	r3, [pc, #484]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003e86:	2180      	movs	r1, #128	@ 0x80
 8003e88:	0049      	lsls	r1, r1, #1
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8e:	f7fd ffd9 	bl	8001e44 <HAL_GetTick>
 8003e92:	0003      	movs	r3, r0
 8003e94:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e96:	e008      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7fd ffd4 	bl	8001e44 <HAL_GetTick>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	@ 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e0d9      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eaa:	4b70      	ldr	r3, [pc, #448]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	2380      	movs	r3, #128	@ 0x80
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003eb6:	4b6c      	ldr	r3, [pc, #432]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	23c0      	movs	r3, #192	@ 0xc0
 8003ebc:	039b      	lsls	r3, r3, #14
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	23c0      	movs	r3, #192	@ 0xc0
 8003ec8:	039b      	lsls	r3, r3, #14
 8003eca:	4013      	ands	r3, r2
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d013      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	23c0      	movs	r3, #192	@ 0xc0
 8003ed8:	029b      	lsls	r3, r3, #10
 8003eda:	401a      	ands	r2, r3
 8003edc:	23c0      	movs	r3, #192	@ 0xc0
 8003ede:	029b      	lsls	r3, r3, #10
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d10a      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ee4:	4b60      	ldr	r3, [pc, #384]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	2380      	movs	r3, #128	@ 0x80
 8003eea:	029b      	lsls	r3, r3, #10
 8003eec:	401a      	ands	r2, r3
 8003eee:	2380      	movs	r3, #128	@ 0x80
 8003ef0:	029b      	lsls	r3, r3, #10
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d101      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0b1      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003efa:	4b5b      	ldr	r3, [pc, #364]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003efc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003efe:	23c0      	movs	r3, #192	@ 0xc0
 8003f00:	029b      	lsls	r3, r3, #10
 8003f02:	4013      	ands	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d03b      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	23c0      	movs	r3, #192	@ 0xc0
 8003f12:	029b      	lsls	r3, r3, #10
 8003f14:	4013      	ands	r3, r2
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d033      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2220      	movs	r2, #32
 8003f22:	4013      	ands	r3, r2
 8003f24:	d02e      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003f26:	4b50      	ldr	r3, [pc, #320]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2a:	4a51      	ldr	r2, [pc, #324]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f30:	4b4d      	ldr	r3, [pc, #308]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f34:	4b4c      	ldr	r3, [pc, #304]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f36:	2180      	movs	r1, #128	@ 0x80
 8003f38:	0309      	lsls	r1, r1, #12
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f42:	4b49      	ldr	r3, [pc, #292]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f44:	494b      	ldr	r1, [pc, #300]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003f46:	400a      	ands	r2, r1
 8003f48:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003f4a:	4b47      	ldr	r3, [pc, #284]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	2380      	movs	r3, #128	@ 0x80
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4013      	ands	r3, r2
 8003f58:	d014      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fd ff73 	bl	8001e44 <HAL_GetTick>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f62:	e009      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7fd ff6e 	bl	8001e44 <HAL_GetTick>
 8003f68:	0002      	movs	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	4a42      	ldr	r2, [pc, #264]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e072      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f78:	4b3b      	ldr	r3, [pc, #236]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f7c:	2380      	movs	r3, #128	@ 0x80
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4013      	ands	r3, r2
 8003f82:	d0ef      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d01f      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	23c0      	movs	r3, #192	@ 0xc0
 8003f94:	029b      	lsls	r3, r3, #10
 8003f96:	401a      	ands	r2, r3
 8003f98:	23c0      	movs	r3, #192	@ 0xc0
 8003f9a:	029b      	lsls	r3, r3, #10
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d10c      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003fa0:	4b31      	ldr	r3, [pc, #196]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a35      	ldr	r2, [pc, #212]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	23c0      	movs	r3, #192	@ 0xc0
 8003fb0:	039b      	lsls	r3, r3, #14
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	4b2b      	ldr	r3, [pc, #172]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	23c0      	movs	r3, #192	@ 0xc0
 8003fc4:	029b      	lsls	r3, r3, #10
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	4b27      	ldr	r3, [pc, #156]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fce:	2317      	movs	r3, #23
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd8:	4b23      	ldr	r3, [pc, #140]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fdc:	4b22      	ldr	r3, [pc, #136]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003fde:	4928      	ldr	r1, [pc, #160]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	4013      	ands	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fee:	4b1e      	ldr	r3, [pc, #120]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff2:	220c      	movs	r2, #12
 8003ff4:	4393      	bics	r3, r2
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ffe:	430a      	orrs	r2, r1
 8004000:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2204      	movs	r2, #4
 8004008:	4013      	ands	r3, r2
 800400a:	d009      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800400c:	4b16      	ldr	r3, [pc, #88]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800400e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004010:	4a1c      	ldr	r2, [pc, #112]	@ (8004084 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004012:	4013      	ands	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	4b13      	ldr	r3, [pc, #76]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800401c:	430a      	orrs	r2, r1
 800401e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2208      	movs	r2, #8
 8004026:	4013      	ands	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800402a:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800402c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402e:	4a16      	ldr	r2, [pc, #88]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004030:	4013      	ands	r3, r2
 8004032:	0019      	movs	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	4b0b      	ldr	r3, [pc, #44]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800403a:	430a      	orrs	r2, r1
 800403c:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2280      	movs	r2, #128	@ 0x80
 8004044:	4013      	ands	r3, r2
 8004046:	d009      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004048:	4b07      	ldr	r3, [pc, #28]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800404a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404c:	4a0f      	ldr	r2, [pc, #60]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800404e:	4013      	ands	r3, r2
 8004050:	0019      	movs	r1, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	4b04      	ldr	r3, [pc, #16]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004058:	430a      	orrs	r2, r1
 800405a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	0018      	movs	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	b006      	add	sp, #24
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	40021000 	.word	0x40021000
 800406c:	40007000 	.word	0x40007000
 8004070:	fffcffff 	.word	0xfffcffff
 8004074:	fff7ffff 	.word	0xfff7ffff
 8004078:	00001388 	.word	0x00001388
 800407c:	ffcfffff 	.word	0xffcfffff
 8004080:	efffffff 	.word	0xefffffff
 8004084:	fffff3ff 	.word	0xfffff3ff
 8004088:	ffffcfff 	.word	0xffffcfff
 800408c:	fff3ffff 	.word	0xfff3ffff

08004090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e032      	b.n	8004108 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2239      	movs	r2, #57	@ 0x39
 80040a6:	5c9b      	ldrb	r3, [r3, r2]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d107      	bne.n	80040be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2238      	movs	r2, #56	@ 0x38
 80040b2:	2100      	movs	r1, #0
 80040b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0018      	movs	r0, r3
 80040ba:	f7fd fd23 	bl	8001b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2239      	movs	r2, #57	@ 0x39
 80040c2:	2102      	movs	r1, #2
 80040c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	0019      	movs	r1, r3
 80040d0:	0010      	movs	r0, r2
 80040d2:	f000 fa45 	bl	8004560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	223e      	movs	r2, #62	@ 0x3e
 80040da:	2101      	movs	r1, #1
 80040dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	223a      	movs	r2, #58	@ 0x3a
 80040e2:	2101      	movs	r1, #1
 80040e4:	5499      	strb	r1, [r3, r2]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	223b      	movs	r2, #59	@ 0x3b
 80040ea:	2101      	movs	r1, #1
 80040ec:	5499      	strb	r1, [r3, r2]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	223c      	movs	r2, #60	@ 0x3c
 80040f2:	2101      	movs	r1, #1
 80040f4:	5499      	strb	r1, [r3, r2]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	223d      	movs	r2, #61	@ 0x3d
 80040fa:	2101      	movs	r1, #1
 80040fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2239      	movs	r2, #57	@ 0x39
 8004102:	2101      	movs	r1, #1
 8004104:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	0018      	movs	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	b002      	add	sp, #8
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2239      	movs	r2, #57	@ 0x39
 800411c:	5c9b      	ldrb	r3, [r3, r2]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d001      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e036      	b.n	8004196 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2239      	movs	r2, #57	@ 0x39
 800412c:	2102      	movs	r1, #2
 800412e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2101      	movs	r1, #1
 800413c:	430a      	orrs	r2, r1
 800413e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	2380      	movs	r3, #128	@ 0x80
 8004146:	05db      	lsls	r3, r3, #23
 8004148:	429a      	cmp	r2, r3
 800414a:	d009      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x50>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a13      	ldr	r2, [pc, #76]	@ (80041a0 <HAL_TIM_Base_Start_IT+0x90>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x50>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a12      	ldr	r2, [pc, #72]	@ (80041a4 <HAL_TIM_Base_Start_IT+0x94>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d111      	bne.n	8004184 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2207      	movs	r2, #7
 8004168:	4013      	ands	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b06      	cmp	r3, #6
 8004170:	d010      	beq.n	8004194 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2101      	movs	r1, #1
 800417e:	430a      	orrs	r2, r1
 8004180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004182:	e007      	b.n	8004194 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2101      	movs	r1, #1
 8004190:	430a      	orrs	r2, r1
 8004192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	0018      	movs	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	b004      	add	sp, #16
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	40010800 	.word	0x40010800
 80041a4:	40011400 	.word	0x40011400

080041a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2202      	movs	r2, #2
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d124      	bne.n	8004208 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	2202      	movs	r2, #2
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d11d      	bne.n	8004208 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2203      	movs	r2, #3
 80041d2:	4252      	negs	r2, r2
 80041d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2203      	movs	r2, #3
 80041e4:	4013      	ands	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	0018      	movs	r0, r3
 80041ec:	f000 f9a0 	bl	8004530 <HAL_TIM_IC_CaptureCallback>
 80041f0:	e007      	b.n	8004202 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0018      	movs	r0, r3
 80041f6:	f000 f993 	bl	8004520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 f99f 	bl	8004540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2204      	movs	r2, #4
 8004210:	4013      	ands	r3, r2
 8004212:	2b04      	cmp	r3, #4
 8004214:	d125      	bne.n	8004262 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2204      	movs	r2, #4
 800421e:	4013      	ands	r3, r2
 8004220:	2b04      	cmp	r3, #4
 8004222:	d11e      	bne.n	8004262 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2205      	movs	r2, #5
 800422a:	4252      	negs	r2, r2
 800422c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	23c0      	movs	r3, #192	@ 0xc0
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4013      	ands	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	0018      	movs	r0, r3
 8004246:	f000 f973 	bl	8004530 <HAL_TIM_IC_CaptureCallback>
 800424a:	e007      	b.n	800425c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	0018      	movs	r0, r3
 8004250:	f000 f966 	bl	8004520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	0018      	movs	r0, r3
 8004258:	f000 f972 	bl	8004540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	2208      	movs	r2, #8
 800426a:	4013      	ands	r3, r2
 800426c:	2b08      	cmp	r3, #8
 800426e:	d124      	bne.n	80042ba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	2208      	movs	r2, #8
 8004278:	4013      	ands	r3, r2
 800427a:	2b08      	cmp	r3, #8
 800427c:	d11d      	bne.n	80042ba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2209      	movs	r2, #9
 8004284:	4252      	negs	r2, r2
 8004286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2204      	movs	r2, #4
 800428c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	2203      	movs	r2, #3
 8004296:	4013      	ands	r3, r2
 8004298:	d004      	beq.n	80042a4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	0018      	movs	r0, r3
 800429e:	f000 f947 	bl	8004530 <HAL_TIM_IC_CaptureCallback>
 80042a2:	e007      	b.n	80042b4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f000 f93a 	bl	8004520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	0018      	movs	r0, r3
 80042b0:	f000 f946 	bl	8004540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2210      	movs	r2, #16
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d125      	bne.n	8004314 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2210      	movs	r2, #16
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b10      	cmp	r3, #16
 80042d4:	d11e      	bne.n	8004314 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2211      	movs	r2, #17
 80042dc:	4252      	negs	r2, r2
 80042de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2208      	movs	r2, #8
 80042e4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	23c0      	movs	r3, #192	@ 0xc0
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4013      	ands	r3, r2
 80042f2:	d004      	beq.n	80042fe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	0018      	movs	r0, r3
 80042f8:	f000 f91a 	bl	8004530 <HAL_TIM_IC_CaptureCallback>
 80042fc:	e007      	b.n	800430e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	0018      	movs	r0, r3
 8004302:	f000 f90d 	bl	8004520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	0018      	movs	r0, r3
 800430a:	f000 f919 	bl	8004540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2201      	movs	r2, #1
 800431c:	4013      	ands	r3, r2
 800431e:	2b01      	cmp	r3, #1
 8004320:	d10f      	bne.n	8004342 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	4013      	ands	r3, r2
 800432c:	2b01      	cmp	r3, #1
 800432e:	d108      	bne.n	8004342 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2202      	movs	r2, #2
 8004336:	4252      	negs	r2, r2
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0018      	movs	r0, r3
 800433e:	f7fc fcad 	bl	8000c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2240      	movs	r2, #64	@ 0x40
 800434a:	4013      	ands	r3, r2
 800434c:	2b40      	cmp	r3, #64	@ 0x40
 800434e:	d10f      	bne.n	8004370 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2240      	movs	r2, #64	@ 0x40
 8004358:	4013      	ands	r3, r2
 800435a:	2b40      	cmp	r3, #64	@ 0x40
 800435c:	d108      	bne.n	8004370 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2241      	movs	r2, #65	@ 0x41
 8004364:	4252      	negs	r2, r2
 8004366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	0018      	movs	r0, r3
 800436c:	f000 f8f0 	bl	8004550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004370:	46c0      	nop			@ (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004382:	230f      	movs	r3, #15
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2238      	movs	r2, #56	@ 0x38
 800438e:	5c9b      	ldrb	r3, [r3, r2]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_TIM_ConfigClockSource+0x20>
 8004394:	2302      	movs	r3, #2
 8004396:	e0bc      	b.n	8004512 <HAL_TIM_ConfigClockSource+0x19a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2238      	movs	r2, #56	@ 0x38
 800439c:	2101      	movs	r1, #1
 800439e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2239      	movs	r2, #57	@ 0x39
 80043a4:	2102      	movs	r1, #2
 80043a6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2277      	movs	r2, #119	@ 0x77
 80043b4:	4393      	bics	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4a58      	ldr	r2, [pc, #352]	@ (800451c <HAL_TIM_ConfigClockSource+0x1a4>)
 80043bc:	4013      	ands	r3, r2
 80043be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2280      	movs	r2, #128	@ 0x80
 80043ce:	0192      	lsls	r2, r2, #6
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d040      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0xde>
 80043d4:	2280      	movs	r2, #128	@ 0x80
 80043d6:	0192      	lsls	r2, r2, #6
 80043d8:	4293      	cmp	r3, r2
 80043da:	d900      	bls.n	80043de <HAL_TIM_ConfigClockSource+0x66>
 80043dc:	e088      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x178>
 80043de:	2280      	movs	r2, #128	@ 0x80
 80043e0:	0152      	lsls	r2, r2, #5
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d100      	bne.n	80043e8 <HAL_TIM_ConfigClockSource+0x70>
 80043e6:	e088      	b.n	80044fa <HAL_TIM_ConfigClockSource+0x182>
 80043e8:	2280      	movs	r2, #128	@ 0x80
 80043ea:	0152      	lsls	r2, r2, #5
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d900      	bls.n	80043f2 <HAL_TIM_ConfigClockSource+0x7a>
 80043f0:	e07e      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x178>
 80043f2:	2b70      	cmp	r3, #112	@ 0x70
 80043f4:	d018      	beq.n	8004428 <HAL_TIM_ConfigClockSource+0xb0>
 80043f6:	d900      	bls.n	80043fa <HAL_TIM_ConfigClockSource+0x82>
 80043f8:	e07a      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x178>
 80043fa:	2b60      	cmp	r3, #96	@ 0x60
 80043fc:	d04f      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x126>
 80043fe:	d900      	bls.n	8004402 <HAL_TIM_ConfigClockSource+0x8a>
 8004400:	e076      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x178>
 8004402:	2b50      	cmp	r3, #80	@ 0x50
 8004404:	d03b      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x106>
 8004406:	d900      	bls.n	800440a <HAL_TIM_ConfigClockSource+0x92>
 8004408:	e072      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x178>
 800440a:	2b40      	cmp	r3, #64	@ 0x40
 800440c:	d057      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x146>
 800440e:	d900      	bls.n	8004412 <HAL_TIM_ConfigClockSource+0x9a>
 8004410:	e06e      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x178>
 8004412:	2b30      	cmp	r3, #48	@ 0x30
 8004414:	d063      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x166>
 8004416:	d86b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x178>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d060      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x166>
 800441c:	d868      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x178>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d05d      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x166>
 8004422:	2b10      	cmp	r3, #16
 8004424:	d05b      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x166>
 8004426:	e063      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004438:	f000 f960 	bl	80046fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2277      	movs	r2, #119	@ 0x77
 8004448:	4313      	orrs	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	609a      	str	r2, [r3, #8]
      break;
 8004454:	e052      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004466:	f000 f949 	bl	80046fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2180      	movs	r1, #128	@ 0x80
 8004476:	01c9      	lsls	r1, r1, #7
 8004478:	430a      	orrs	r2, r1
 800447a:	609a      	str	r2, [r3, #8]
      break;
 800447c:	e03e      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	001a      	movs	r2, r3
 800448c:	f000 f8bc 	bl	8004608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2150      	movs	r1, #80	@ 0x50
 8004496:	0018      	movs	r0, r3
 8004498:	f000 f916 	bl	80046c8 <TIM_ITRx_SetConfig>
      break;
 800449c:	e02e      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044aa:	001a      	movs	r2, r3
 80044ac:	f000 f8da 	bl	8004664 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2160      	movs	r1, #96	@ 0x60
 80044b6:	0018      	movs	r0, r3
 80044b8:	f000 f906 	bl	80046c8 <TIM_ITRx_SetConfig>
      break;
 80044bc:	e01e      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ca:	001a      	movs	r2, r3
 80044cc:	f000 f89c 	bl	8004608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2140      	movs	r1, #64	@ 0x40
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 f8f6 	bl	80046c8 <TIM_ITRx_SetConfig>
      break;
 80044dc:	e00e      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	0019      	movs	r1, r3
 80044e8:	0010      	movs	r0, r2
 80044ea:	f000 f8ed 	bl	80046c8 <TIM_ITRx_SetConfig>
      break;
 80044ee:	e005      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80044f0:	230f      	movs	r3, #15
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	2201      	movs	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]
      break;
 80044f8:	e000      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80044fa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2239      	movs	r2, #57	@ 0x39
 8004500:	2101      	movs	r1, #1
 8004502:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2238      	movs	r2, #56	@ 0x38
 8004508:	2100      	movs	r1, #0
 800450a:	5499      	strb	r1, [r3, r2]

  return status;
 800450c:	230f      	movs	r3, #15
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	781b      	ldrb	r3, [r3, #0]
}
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	b004      	add	sp, #16
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			@ (mov r8, r8)
 800451c:	ffff00ff 	.word	0xffff00ff

08004520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004528:	46c0      	nop			@ (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b002      	add	sp, #8
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004538:	46c0      	nop			@ (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	b002      	add	sp, #8
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004548:	46c0      	nop			@ (mov r8, r8)
 800454a:	46bd      	mov	sp, r7
 800454c:	b002      	add	sp, #8
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004558:	46c0      	nop			@ (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	b002      	add	sp, #8
 800455e:	bd80      	pop	{r7, pc}

08004560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	2380      	movs	r3, #128	@ 0x80
 8004574:	05db      	lsls	r3, r3, #23
 8004576:	429a      	cmp	r2, r3
 8004578:	d007      	beq.n	800458a <TIM_Base_SetConfig+0x2a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a1f      	ldr	r2, [pc, #124]	@ (80045fc <TIM_Base_SetConfig+0x9c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_Base_SetConfig+0x2a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a1e      	ldr	r2, [pc, #120]	@ (8004600 <TIM_Base_SetConfig+0xa0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d108      	bne.n	800459c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2270      	movs	r2, #112	@ 0x70
 800458e:	4393      	bics	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	2380      	movs	r3, #128	@ 0x80
 80045a0:	05db      	lsls	r3, r3, #23
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d007      	beq.n	80045b6 <TIM_Base_SetConfig+0x56>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a14      	ldr	r2, [pc, #80]	@ (80045fc <TIM_Base_SetConfig+0x9c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_Base_SetConfig+0x56>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a13      	ldr	r2, [pc, #76]	@ (8004600 <TIM_Base_SetConfig+0xa0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d108      	bne.n	80045c8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a12      	ldr	r2, [pc, #72]	@ (8004604 <TIM_Base_SetConfig+0xa4>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2280      	movs	r2, #128	@ 0x80
 80045cc:	4393      	bics	r3, r2
 80045ce:	001a      	movs	r2, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	615a      	str	r2, [r3, #20]
}
 80045f4:	46c0      	nop			@ (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b004      	add	sp, #16
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40010800 	.word	0x40010800
 8004600:	40011400 	.word	0x40011400
 8004604:	fffffcff 	.word	0xfffffcff

08004608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	2201      	movs	r2, #1
 8004620:	4393      	bics	r3, r2
 8004622:	001a      	movs	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	22f0      	movs	r2, #240	@ 0xf0
 8004632:	4393      	bics	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	220a      	movs	r2, #10
 8004644:	4393      	bics	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	621a      	str	r2, [r3, #32]
}
 800465c:	46c0      	nop			@ (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	b006      	add	sp, #24
 8004662:	bd80      	pop	{r7, pc}

08004664 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	2210      	movs	r2, #16
 8004676:	4393      	bics	r3, r2
 8004678:	001a      	movs	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	4a0d      	ldr	r2, [pc, #52]	@ (80046c4 <TIM_TI2_ConfigInputStage+0x60>)
 800468e:	4013      	ands	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	031b      	lsls	r3, r3, #12
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	22a0      	movs	r2, #160	@ 0xa0
 80046a0:	4393      	bics	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	621a      	str	r2, [r3, #32]
}
 80046ba:	46c0      	nop			@ (mov r8, r8)
 80046bc:	46bd      	mov	sp, r7
 80046be:	b006      	add	sp, #24
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	46c0      	nop			@ (mov r8, r8)
 80046c4:	ffff0fff 	.word	0xffff0fff

080046c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2270      	movs	r2, #112	@ 0x70
 80046dc:	4393      	bics	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	2207      	movs	r2, #7
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	609a      	str	r2, [r3, #8]
}
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	46bd      	mov	sp, r7
 80046f6:	b004      	add	sp, #16
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4a09      	ldr	r2, [pc, #36]	@ (8004738 <TIM_ETR_SetConfig+0x3c>)
 8004714:	4013      	ands	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	021a      	lsls	r2, r3, #8
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	431a      	orrs	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4313      	orrs	r3, r2
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	46c0      	nop			@ (mov r8, r8)
 8004732:	46bd      	mov	sp, r7
 8004734:	b006      	add	sp, #24
 8004736:	bd80      	pop	{r7, pc}
 8004738:	ffff00ff 	.word	0xffff00ff

0800473c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2238      	movs	r2, #56	@ 0x38
 800474a:	5c9b      	ldrb	r3, [r3, r2]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004750:	2302      	movs	r3, #2
 8004752:	e042      	b.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2238      	movs	r2, #56	@ 0x38
 8004758:	2101      	movs	r1, #1
 800475a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2239      	movs	r2, #57	@ 0x39
 8004760:	2102      	movs	r1, #2
 8004762:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2270      	movs	r2, #112	@ 0x70
 8004778:	4393      	bics	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	2380      	movs	r3, #128	@ 0x80
 8004794:	05db      	lsls	r3, r3, #23
 8004796:	429a      	cmp	r2, r3
 8004798:	d009      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a11      	ldr	r2, [pc, #68]	@ (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a0f      	ldr	r2, [pc, #60]	@ (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d10c      	bne.n	80047c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2280      	movs	r2, #128	@ 0x80
 80047b2:	4393      	bics	r3, r2
 80047b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2239      	movs	r2, #57	@ 0x39
 80047cc:	2101      	movs	r1, #1
 80047ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2238      	movs	r2, #56	@ 0x38
 80047d4:	2100      	movs	r1, #0
 80047d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b004      	add	sp, #16
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	40010800 	.word	0x40010800
 80047e8:	40011400 	.word	0x40011400

080047ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e044      	b.n	8004888 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d107      	bne.n	8004816 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2278      	movs	r2, #120	@ 0x78
 800480a:	2100      	movs	r1, #0
 800480c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0018      	movs	r0, r3
 8004812:	f7fd f9eb 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2224      	movs	r2, #36	@ 0x24
 800481a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2101      	movs	r1, #1
 8004828:	438a      	bics	r2, r1
 800482a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	0018      	movs	r0, r3
 8004830:	f000 fbce 	bl	8004fd0 <UART_SetConfig>
 8004834:	0003      	movs	r3, r0
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e024      	b.n	8004888 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	0018      	movs	r0, r3
 800484a:	f000 fe0b 	bl	8005464 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	490d      	ldr	r1, [pc, #52]	@ (8004890 <HAL_UART_Init+0xa4>)
 800485a:	400a      	ands	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	212a      	movs	r1, #42	@ 0x2a
 800486a:	438a      	bics	r2, r1
 800486c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2101      	movs	r1, #1
 800487a:	430a      	orrs	r2, r1
 800487c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	0018      	movs	r0, r3
 8004882:	f000 fea3 	bl	80055cc <UART_CheckIdleState>
 8004886:	0003      	movs	r3, r0
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	b002      	add	sp, #8
 800488e:	bd80      	pop	{r7, pc}
 8004890:	ffffb7ff 	.word	0xffffb7ff

08004894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	@ 0x28
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	1dbb      	adds	r3, r7, #6
 80048a2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	d000      	beq.n	80048ae <HAL_UART_Transmit+0x1a>
 80048ac:	e08c      	b.n	80049c8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_UART_Transmit+0x28>
 80048b4:	1dbb      	adds	r3, r7, #6
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e084      	b.n	80049ca <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	2380      	movs	r3, #128	@ 0x80
 80048c6:	015b      	lsls	r3, r3, #5
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d109      	bne.n	80048e0 <HAL_UART_Transmit+0x4c>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2201      	movs	r2, #1
 80048d8:	4013      	ands	r3, r2
 80048da:	d001      	beq.n	80048e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e074      	b.n	80049ca <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2284      	movs	r2, #132	@ 0x84
 80048e4:	2100      	movs	r1, #0
 80048e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2221      	movs	r2, #33	@ 0x21
 80048ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ee:	f7fd faa9 	bl	8001e44 <HAL_GetTick>
 80048f2:	0003      	movs	r3, r0
 80048f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1dba      	adds	r2, r7, #6
 80048fa:	2150      	movs	r1, #80	@ 0x50
 80048fc:	8812      	ldrh	r2, [r2, #0]
 80048fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	1dba      	adds	r2, r7, #6
 8004904:	2152      	movs	r1, #82	@ 0x52
 8004906:	8812      	ldrh	r2, [r2, #0]
 8004908:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	2380      	movs	r3, #128	@ 0x80
 8004910:	015b      	lsls	r3, r3, #5
 8004912:	429a      	cmp	r2, r3
 8004914:	d108      	bne.n	8004928 <HAL_UART_Transmit+0x94>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e003      	b.n	8004930 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004930:	e02f      	b.n	8004992 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	0013      	movs	r3, r2
 800493c:	2200      	movs	r2, #0
 800493e:	2180      	movs	r1, #128	@ 0x80
 8004940:	f000 feec 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 8004944:	1e03      	subs	r3, r0, #0
 8004946:	d004      	beq.n	8004952 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e03b      	b.n	80049ca <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10b      	bne.n	8004970 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	001a      	movs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	05d2      	lsls	r2, r2, #23
 8004964:	0dd2      	lsrs	r2, r2, #23
 8004966:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	3302      	adds	r3, #2
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	e007      	b.n	8004980 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	781a      	ldrb	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	3301      	adds	r3, #1
 800497e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2252      	movs	r2, #82	@ 0x52
 8004984:	5a9b      	ldrh	r3, [r3, r2]
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b299      	uxth	r1, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2252      	movs	r2, #82	@ 0x52
 8004990:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2252      	movs	r2, #82	@ 0x52
 8004996:	5a9b      	ldrh	r3, [r3, r2]
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1c9      	bne.n	8004932 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	0013      	movs	r3, r2
 80049a8:	2200      	movs	r2, #0
 80049aa:	2140      	movs	r1, #64	@ 0x40
 80049ac:	f000 feb6 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 80049b0:	1e03      	subs	r3, r0, #0
 80049b2:	d004      	beq.n	80049be <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e005      	b.n	80049ca <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e000      	b.n	80049ca <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
  }
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b008      	add	sp, #32
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b0ab      	sub	sp, #172	@ 0xac
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	22a4      	movs	r2, #164	@ 0xa4
 80049e4:	18b9      	adds	r1, r7, r2
 80049e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	20a0      	movs	r0, #160	@ 0xa0
 80049f0:	1839      	adds	r1, r7, r0
 80049f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	219c      	movs	r1, #156	@ 0x9c
 80049fc:	1879      	adds	r1, r7, r1
 80049fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a00:	0011      	movs	r1, r2
 8004a02:	18bb      	adds	r3, r7, r2
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a99      	ldr	r2, [pc, #612]	@ (8004c6c <HAL_UART_IRQHandler+0x298>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2298      	movs	r2, #152	@ 0x98
 8004a0c:	18bc      	adds	r4, r7, r2
 8004a0e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004a10:	18bb      	adds	r3, r7, r2
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d114      	bne.n	8004a42 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a18:	187b      	adds	r3, r7, r1
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d00f      	beq.n	8004a42 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a22:	183b      	adds	r3, r7, r0
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2220      	movs	r2, #32
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d00a      	beq.n	8004a42 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d100      	bne.n	8004a36 <HAL_UART_IRQHandler+0x62>
 8004a34:	e2a0      	b.n	8004f78 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	0010      	movs	r0, r2
 8004a3e:	4798      	blx	r3
      }
      return;
 8004a40:	e29a      	b.n	8004f78 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a42:	2398      	movs	r3, #152	@ 0x98
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d100      	bne.n	8004a4e <HAL_UART_IRQHandler+0x7a>
 8004a4c:	e114      	b.n	8004c78 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a4e:	239c      	movs	r3, #156	@ 0x9c
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2201      	movs	r2, #1
 8004a56:	4013      	ands	r3, r2
 8004a58:	d106      	bne.n	8004a68 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a5a:	23a0      	movs	r3, #160	@ 0xa0
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a83      	ldr	r2, [pc, #524]	@ (8004c70 <HAL_UART_IRQHandler+0x29c>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	d100      	bne.n	8004a68 <HAL_UART_IRQHandler+0x94>
 8004a66:	e107      	b.n	8004c78 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a68:	23a4      	movs	r3, #164	@ 0xa4
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4013      	ands	r3, r2
 8004a72:	d012      	beq.n	8004a9a <HAL_UART_IRQHandler+0xc6>
 8004a74:	23a0      	movs	r3, #160	@ 0xa0
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	2380      	movs	r3, #128	@ 0x80
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2201      	movs	r2, #1
 8004a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2284      	movs	r2, #132	@ 0x84
 8004a8e:	589b      	ldr	r3, [r3, r2]
 8004a90:	2201      	movs	r2, #1
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2184      	movs	r1, #132	@ 0x84
 8004a98:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a9a:	23a4      	movs	r3, #164	@ 0xa4
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d011      	beq.n	8004aca <HAL_UART_IRQHandler+0xf6>
 8004aa6:	239c      	movs	r3, #156	@ 0x9c
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2201      	movs	r2, #1
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d00b      	beq.n	8004aca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2284      	movs	r2, #132	@ 0x84
 8004abe:	589b      	ldr	r3, [r3, r2]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2184      	movs	r1, #132	@ 0x84
 8004ac8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aca:	23a4      	movs	r3, #164	@ 0xa4
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d011      	beq.n	8004afa <HAL_UART_IRQHandler+0x126>
 8004ad6:	239c      	movs	r3, #156	@ 0x9c
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2201      	movs	r2, #1
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d00b      	beq.n	8004afa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2284      	movs	r2, #132	@ 0x84
 8004aee:	589b      	ldr	r3, [r3, r2]
 8004af0:	2202      	movs	r2, #2
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2184      	movs	r1, #132	@ 0x84
 8004af8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004afa:	23a4      	movs	r3, #164	@ 0xa4
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2208      	movs	r2, #8
 8004b02:	4013      	ands	r3, r2
 8004b04:	d017      	beq.n	8004b36 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b06:	23a0      	movs	r3, #160	@ 0xa0
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d105      	bne.n	8004b1e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b12:	239c      	movs	r3, #156	@ 0x9c
 8004b14:	18fb      	adds	r3, r7, r3
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b1c:	d00b      	beq.n	8004b36 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2208      	movs	r2, #8
 8004b24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2284      	movs	r2, #132	@ 0x84
 8004b2a:	589b      	ldr	r3, [r3, r2]
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2184      	movs	r1, #132	@ 0x84
 8004b34:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b36:	23a4      	movs	r3, #164	@ 0xa4
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	2380      	movs	r3, #128	@ 0x80
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	4013      	ands	r3, r2
 8004b42:	d013      	beq.n	8004b6c <HAL_UART_IRQHandler+0x198>
 8004b44:	23a0      	movs	r3, #160	@ 0xa0
 8004b46:	18fb      	adds	r3, r7, r3
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	2380      	movs	r3, #128	@ 0x80
 8004b4c:	04db      	lsls	r3, r3, #19
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d00c      	beq.n	8004b6c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2280      	movs	r2, #128	@ 0x80
 8004b58:	0112      	lsls	r2, r2, #4
 8004b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2284      	movs	r2, #132	@ 0x84
 8004b60:	589b      	ldr	r3, [r3, r2]
 8004b62:	2220      	movs	r2, #32
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2184      	movs	r1, #132	@ 0x84
 8004b6a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2284      	movs	r2, #132	@ 0x84
 8004b70:	589b      	ldr	r3, [r3, r2]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d100      	bne.n	8004b78 <HAL_UART_IRQHandler+0x1a4>
 8004b76:	e201      	b.n	8004f7c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b78:	23a4      	movs	r3, #164	@ 0xa4
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	4013      	ands	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b84:	23a0      	movs	r3, #160	@ 0xa0
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d008      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d004      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	0010      	movs	r0, r2
 8004ba0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2284      	movs	r2, #132	@ 0x84
 8004ba6:	589b      	ldr	r3, [r3, r2]
 8004ba8:	2194      	movs	r1, #148	@ 0x94
 8004baa:	187a      	adds	r2, r7, r1
 8004bac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2240      	movs	r2, #64	@ 0x40
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b40      	cmp	r3, #64	@ 0x40
 8004bba:	d004      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bbc:	187b      	adds	r3, r7, r1
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2228      	movs	r2, #40	@ 0x28
 8004bc2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bc4:	d047      	beq.n	8004c56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f000 fe11 	bl	80057f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2240      	movs	r2, #64	@ 0x40
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b40      	cmp	r3, #64	@ 0x40
 8004bda:	d137      	bne.n	8004c4c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8004be0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004be2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004be4:	2090      	movs	r0, #144	@ 0x90
 8004be6:	183a      	adds	r2, r7, r0
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	2301      	movs	r3, #1
 8004bec:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bf0:	f383 8810 	msr	PRIMASK, r3
}
 8004bf4:	46c0      	nop			@ (mov r8, r8)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2140      	movs	r1, #64	@ 0x40
 8004c02:	438a      	bics	r2, r1
 8004c04:	609a      	str	r2, [r3, #8]
 8004c06:	183b      	adds	r3, r7, r0
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c0e:	f383 8810 	msr	PRIMASK, r3
}
 8004c12:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d012      	beq.n	8004c42 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c20:	4a14      	ldr	r2, [pc, #80]	@ (8004c74 <HAL_UART_IRQHandler+0x2a0>)
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7fd ff87 	bl	8002b3c <HAL_DMA_Abort_IT>
 8004c2e:	1e03      	subs	r3, r0, #0
 8004c30:	d01a      	beq.n	8004c68 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c40:	e012      	b.n	8004c68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	0018      	movs	r0, r3
 8004c46:	f000 f9af 	bl	8004fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4a:	e00d      	b.n	8004c68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f000 f9aa 	bl	8004fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	e008      	b.n	8004c68 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f000 f9a5 	bl	8004fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2284      	movs	r2, #132	@ 0x84
 8004c62:	2100      	movs	r1, #0
 8004c64:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004c66:	e189      	b.n	8004f7c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c68:	46c0      	nop			@ (mov r8, r8)
    return;
 8004c6a:	e187      	b.n	8004f7c <HAL_UART_IRQHandler+0x5a8>
 8004c6c:	0000080f 	.word	0x0000080f
 8004c70:	04000120 	.word	0x04000120
 8004c74:	080058b9 	.word	0x080058b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d000      	beq.n	8004c82 <HAL_UART_IRQHandler+0x2ae>
 8004c80:	e13b      	b.n	8004efa <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c82:	23a4      	movs	r3, #164	@ 0xa4
 8004c84:	18fb      	adds	r3, r7, r3
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2210      	movs	r2, #16
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d100      	bne.n	8004c90 <HAL_UART_IRQHandler+0x2bc>
 8004c8e:	e134      	b.n	8004efa <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c90:	23a0      	movs	r3, #160	@ 0xa0
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2210      	movs	r2, #16
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d100      	bne.n	8004c9e <HAL_UART_IRQHandler+0x2ca>
 8004c9c:	e12d      	b.n	8004efa <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2210      	movs	r2, #16
 8004ca4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2240      	movs	r2, #64	@ 0x40
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b40      	cmp	r3, #64	@ 0x40
 8004cb2:	d000      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x2e2>
 8004cb4:	e0a1      	b.n	8004dfa <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	217e      	movs	r1, #126	@ 0x7e
 8004cc0:	187b      	adds	r3, r7, r1
 8004cc2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d100      	bne.n	8004cce <HAL_UART_IRQHandler+0x2fa>
 8004ccc:	e158      	b.n	8004f80 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2258      	movs	r2, #88	@ 0x58
 8004cd2:	5a9b      	ldrh	r3, [r3, r2]
 8004cd4:	187a      	adds	r2, r7, r1
 8004cd6:	8812      	ldrh	r2, [r2, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d300      	bcc.n	8004cde <HAL_UART_IRQHandler+0x30a>
 8004cdc:	e150      	b.n	8004f80 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	187a      	adds	r2, r7, r1
 8004ce2:	215a      	movs	r1, #90	@ 0x5a
 8004ce4:	8812      	ldrh	r2, [r2, #0]
 8004ce6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d16f      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d00:	2301      	movs	r3, #1
 8004d02:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d06:	f383 8810 	msr	PRIMASK, r3
}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	499e      	ldr	r1, [pc, #632]	@ (8004f90 <HAL_UART_IRQHandler+0x5bc>)
 8004d18:	400a      	ands	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d22:	f383 8810 	msr	PRIMASK, r3
}
 8004d26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d28:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d30:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d32:	2301      	movs	r3, #1
 8004d34:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d38:	f383 8810 	msr	PRIMASK, r3
}
 8004d3c:	46c0      	nop			@ (mov r8, r8)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	438a      	bics	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]
 8004d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d50:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d54:	f383 8810 	msr	PRIMASK, r3
}
 8004d58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d62:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d64:	2301      	movs	r3, #1
 8004d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	46c0      	nop			@ (mov r8, r8)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2140      	movs	r1, #64	@ 0x40
 8004d7c:	438a      	bics	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d82:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d86:	f383 8810 	msr	PRIMASK, r3
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2280      	movs	r2, #128	@ 0x80
 8004d90:	2120      	movs	r1, #32
 8004d92:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d9e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004da4:	2301      	movs	r3, #1
 8004da6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004daa:	f383 8810 	msr	PRIMASK, r3
}
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2110      	movs	r1, #16
 8004dbc:	438a      	bics	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dc6:	f383 8810 	msr	PRIMASK, r3
}
 8004dca:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f7fd fe73 	bl	8002abc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2258      	movs	r2, #88	@ 0x58
 8004de0:	5a9a      	ldrh	r2, [r3, r2]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	215a      	movs	r1, #90	@ 0x5a
 8004de6:	5a5b      	ldrh	r3, [r3, r1]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	0011      	movs	r1, r2
 8004df2:	0018      	movs	r0, r3
 8004df4:	f000 f8e0 	bl	8004fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004df8:	e0c2      	b.n	8004f80 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2258      	movs	r2, #88	@ 0x58
 8004dfe:	5a99      	ldrh	r1, [r3, r2]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	225a      	movs	r2, #90	@ 0x5a
 8004e04:	5a9b      	ldrh	r3, [r3, r2]
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	208e      	movs	r0, #142	@ 0x8e
 8004e0a:	183b      	adds	r3, r7, r0
 8004e0c:	1a8a      	subs	r2, r1, r2
 8004e0e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	225a      	movs	r2, #90	@ 0x5a
 8004e14:	5a9b      	ldrh	r3, [r3, r2]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d100      	bne.n	8004e1e <HAL_UART_IRQHandler+0x44a>
 8004e1c:	e0b2      	b.n	8004f84 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004e1e:	183b      	adds	r3, r7, r0
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d100      	bne.n	8004e28 <HAL_UART_IRQHandler+0x454>
 8004e26:	e0ad      	b.n	8004f84 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e28:	f3ef 8310 	mrs	r3, PRIMASK
 8004e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e30:	2488      	movs	r4, #136	@ 0x88
 8004e32:	193a      	adds	r2, r7, r4
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	2301      	movs	r3, #1
 8004e38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f383 8810 	msr	PRIMASK, r3
}
 8004e40:	46c0      	nop			@ (mov r8, r8)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4951      	ldr	r1, [pc, #324]	@ (8004f94 <HAL_UART_IRQHandler+0x5c0>)
 8004e4e:	400a      	ands	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	193b      	adds	r3, r7, r4
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f383 8810 	msr	PRIMASK, r3
}
 8004e5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e60:	f3ef 8310 	mrs	r3, PRIMASK
 8004e64:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e66:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e68:	2484      	movs	r4, #132	@ 0x84
 8004e6a:	193a      	adds	r2, r7, r4
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f383 8810 	msr	PRIMASK, r3
}
 8004e78:	46c0      	nop			@ (mov r8, r8)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2101      	movs	r1, #1
 8004e86:	438a      	bics	r2, r1
 8004e88:	609a      	str	r2, [r3, #8]
 8004e8a:	193b      	adds	r3, r7, r4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f383 8810 	msr	PRIMASK, r3
}
 8004e96:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2280      	movs	r2, #128	@ 0x80
 8004e9c:	2120      	movs	r1, #32
 8004e9e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eac:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb4:	2480      	movs	r4, #128	@ 0x80
 8004eb6:	193a      	adds	r2, r7, r4
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	2301      	movs	r3, #1
 8004ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec0:	f383 8810 	msr	PRIMASK, r3
}
 8004ec4:	46c0      	nop			@ (mov r8, r8)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2110      	movs	r1, #16
 8004ed2:	438a      	bics	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	193b      	adds	r3, r7, r4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ede:	f383 8810 	msr	PRIMASK, r3
}
 8004ee2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eea:	183b      	adds	r3, r7, r0
 8004eec:	881a      	ldrh	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	0011      	movs	r1, r2
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f000 f860 	bl	8004fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ef8:	e044      	b.n	8004f84 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004efa:	23a4      	movs	r3, #164	@ 0xa4
 8004efc:	18fb      	adds	r3, r7, r3
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	2380      	movs	r3, #128	@ 0x80
 8004f02:	035b      	lsls	r3, r3, #13
 8004f04:	4013      	ands	r3, r2
 8004f06:	d010      	beq.n	8004f2a <HAL_UART_IRQHandler+0x556>
 8004f08:	239c      	movs	r3, #156	@ 0x9c
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	2380      	movs	r3, #128	@ 0x80
 8004f10:	03db      	lsls	r3, r3, #15
 8004f12:	4013      	ands	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2280      	movs	r2, #128	@ 0x80
 8004f1c:	0352      	lsls	r2, r2, #13
 8004f1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	0018      	movs	r0, r3
 8004f24:	f000 fd0a 	bl	800593c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f28:	e02f      	b.n	8004f8a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f2a:	23a4      	movs	r3, #164	@ 0xa4
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2280      	movs	r2, #128	@ 0x80
 8004f32:	4013      	ands	r3, r2
 8004f34:	d00f      	beq.n	8004f56 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f36:	23a0      	movs	r3, #160	@ 0xa0
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2280      	movs	r2, #128	@ 0x80
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01e      	beq.n	8004f88 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	0010      	movs	r0, r2
 8004f52:	4798      	blx	r3
    }
    return;
 8004f54:	e018      	b.n	8004f88 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f56:	23a4      	movs	r3, #164	@ 0xa4
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2240      	movs	r2, #64	@ 0x40
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d013      	beq.n	8004f8a <HAL_UART_IRQHandler+0x5b6>
 8004f62:	23a0      	movs	r3, #160	@ 0xa0
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2240      	movs	r2, #64	@ 0x40
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d00d      	beq.n	8004f8a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f000 fcb8 	bl	80058e6 <UART_EndTransmit_IT>
    return;
 8004f76:	e008      	b.n	8004f8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f78:	46c0      	nop			@ (mov r8, r8)
 8004f7a:	e006      	b.n	8004f8a <HAL_UART_IRQHandler+0x5b6>
    return;
 8004f7c:	46c0      	nop			@ (mov r8, r8)
 8004f7e:	e004      	b.n	8004f8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f80:	46c0      	nop			@ (mov r8, r8)
 8004f82:	e002      	b.n	8004f8a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004f84:	46c0      	nop			@ (mov r8, r8)
 8004f86:	e000      	b.n	8004f8a <HAL_UART_IRQHandler+0x5b6>
    return;
 8004f88:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b02b      	add	sp, #172	@ 0xac
 8004f8e:	bd90      	pop	{r4, r7, pc}
 8004f90:	fffffeff 	.word	0xfffffeff
 8004f94:	fffffedf 	.word	0xfffffedf

08004f98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fa0:	46c0      	nop			@ (mov r8, r8)
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b002      	add	sp, #8
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fb0:	46c0      	nop			@ (mov r8, r8)
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b002      	add	sp, #8
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	000a      	movs	r2, r1
 8004fc2:	1cbb      	adds	r3, r7, #2
 8004fc4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b002      	add	sp, #8
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd0:	b5b0      	push	{r4, r5, r7, lr}
 8004fd2:	b08e      	sub	sp, #56	@ 0x38
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fd8:	231a      	movs	r3, #26
 8004fda:	2218      	movs	r2, #24
 8004fdc:	189b      	adds	r3, r3, r2
 8004fde:	19db      	adds	r3, r3, r7
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	431a      	orrs	r2, r3
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4ab4      	ldr	r2, [pc, #720]	@ (80052d4 <UART_SetConfig+0x304>)
 8005004:	4013      	ands	r3, r2
 8005006:	0019      	movs	r1, r3
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800500e:	430a      	orrs	r2, r1
 8005010:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	4aaf      	ldr	r2, [pc, #700]	@ (80052d8 <UART_SetConfig+0x308>)
 800501a:	4013      	ands	r3, r2
 800501c:	0019      	movs	r1, r3
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4aa9      	ldr	r2, [pc, #676]	@ (80052dc <UART_SetConfig+0x30c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005040:	4313      	orrs	r3, r2
 8005042:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	4aa5      	ldr	r2, [pc, #660]	@ (80052e0 <UART_SetConfig+0x310>)
 800504c:	4013      	ands	r3, r2
 800504e:	0019      	movs	r1, r3
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005056:	430a      	orrs	r2, r1
 8005058:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4aa1      	ldr	r2, [pc, #644]	@ (80052e4 <UART_SetConfig+0x314>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d131      	bne.n	80050c8 <UART_SetConfig+0xf8>
 8005064:	4ba0      	ldr	r3, [pc, #640]	@ (80052e8 <UART_SetConfig+0x318>)
 8005066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005068:	220c      	movs	r2, #12
 800506a:	4013      	ands	r3, r2
 800506c:	2b0c      	cmp	r3, #12
 800506e:	d01d      	beq.n	80050ac <UART_SetConfig+0xdc>
 8005070:	d823      	bhi.n	80050ba <UART_SetConfig+0xea>
 8005072:	2b08      	cmp	r3, #8
 8005074:	d00c      	beq.n	8005090 <UART_SetConfig+0xc0>
 8005076:	d820      	bhi.n	80050ba <UART_SetConfig+0xea>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <UART_SetConfig+0xb2>
 800507c:	2b04      	cmp	r3, #4
 800507e:	d00e      	beq.n	800509e <UART_SetConfig+0xce>
 8005080:	e01b      	b.n	80050ba <UART_SetConfig+0xea>
 8005082:	231b      	movs	r3, #27
 8005084:	2218      	movs	r2, #24
 8005086:	189b      	adds	r3, r3, r2
 8005088:	19db      	adds	r3, r3, r7
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]
 800508e:	e065      	b.n	800515c <UART_SetConfig+0x18c>
 8005090:	231b      	movs	r3, #27
 8005092:	2218      	movs	r2, #24
 8005094:	189b      	adds	r3, r3, r2
 8005096:	19db      	adds	r3, r3, r7
 8005098:	2202      	movs	r2, #2
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	e05e      	b.n	800515c <UART_SetConfig+0x18c>
 800509e:	231b      	movs	r3, #27
 80050a0:	2218      	movs	r2, #24
 80050a2:	189b      	adds	r3, r3, r2
 80050a4:	19db      	adds	r3, r3, r7
 80050a6:	2204      	movs	r2, #4
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	e057      	b.n	800515c <UART_SetConfig+0x18c>
 80050ac:	231b      	movs	r3, #27
 80050ae:	2218      	movs	r2, #24
 80050b0:	189b      	adds	r3, r3, r2
 80050b2:	19db      	adds	r3, r3, r7
 80050b4:	2208      	movs	r2, #8
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	e050      	b.n	800515c <UART_SetConfig+0x18c>
 80050ba:	231b      	movs	r3, #27
 80050bc:	2218      	movs	r2, #24
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	19db      	adds	r3, r3, r7
 80050c2:	2210      	movs	r2, #16
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	e049      	b.n	800515c <UART_SetConfig+0x18c>
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a83      	ldr	r2, [pc, #524]	@ (80052dc <UART_SetConfig+0x30c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d13e      	bne.n	8005150 <UART_SetConfig+0x180>
 80050d2:	4b85      	ldr	r3, [pc, #532]	@ (80052e8 <UART_SetConfig+0x318>)
 80050d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050d6:	23c0      	movs	r3, #192	@ 0xc0
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	4013      	ands	r3, r2
 80050dc:	22c0      	movs	r2, #192	@ 0xc0
 80050de:	0112      	lsls	r2, r2, #4
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d027      	beq.n	8005134 <UART_SetConfig+0x164>
 80050e4:	22c0      	movs	r2, #192	@ 0xc0
 80050e6:	0112      	lsls	r2, r2, #4
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d82a      	bhi.n	8005142 <UART_SetConfig+0x172>
 80050ec:	2280      	movs	r2, #128	@ 0x80
 80050ee:	0112      	lsls	r2, r2, #4
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d011      	beq.n	8005118 <UART_SetConfig+0x148>
 80050f4:	2280      	movs	r2, #128	@ 0x80
 80050f6:	0112      	lsls	r2, r2, #4
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d822      	bhi.n	8005142 <UART_SetConfig+0x172>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <UART_SetConfig+0x13a>
 8005100:	2280      	movs	r2, #128	@ 0x80
 8005102:	00d2      	lsls	r2, r2, #3
 8005104:	4293      	cmp	r3, r2
 8005106:	d00e      	beq.n	8005126 <UART_SetConfig+0x156>
 8005108:	e01b      	b.n	8005142 <UART_SetConfig+0x172>
 800510a:	231b      	movs	r3, #27
 800510c:	2218      	movs	r2, #24
 800510e:	189b      	adds	r3, r3, r2
 8005110:	19db      	adds	r3, r3, r7
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	e021      	b.n	800515c <UART_SetConfig+0x18c>
 8005118:	231b      	movs	r3, #27
 800511a:	2218      	movs	r2, #24
 800511c:	189b      	adds	r3, r3, r2
 800511e:	19db      	adds	r3, r3, r7
 8005120:	2202      	movs	r2, #2
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	e01a      	b.n	800515c <UART_SetConfig+0x18c>
 8005126:	231b      	movs	r3, #27
 8005128:	2218      	movs	r2, #24
 800512a:	189b      	adds	r3, r3, r2
 800512c:	19db      	adds	r3, r3, r7
 800512e:	2204      	movs	r2, #4
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	e013      	b.n	800515c <UART_SetConfig+0x18c>
 8005134:	231b      	movs	r3, #27
 8005136:	2218      	movs	r2, #24
 8005138:	189b      	adds	r3, r3, r2
 800513a:	19db      	adds	r3, r3, r7
 800513c:	2208      	movs	r2, #8
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e00c      	b.n	800515c <UART_SetConfig+0x18c>
 8005142:	231b      	movs	r3, #27
 8005144:	2218      	movs	r2, #24
 8005146:	189b      	adds	r3, r3, r2
 8005148:	19db      	adds	r3, r3, r7
 800514a:	2210      	movs	r2, #16
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	e005      	b.n	800515c <UART_SetConfig+0x18c>
 8005150:	231b      	movs	r3, #27
 8005152:	2218      	movs	r2, #24
 8005154:	189b      	adds	r3, r3, r2
 8005156:	19db      	adds	r3, r3, r7
 8005158:	2210      	movs	r2, #16
 800515a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a5e      	ldr	r2, [pc, #376]	@ (80052dc <UART_SetConfig+0x30c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d000      	beq.n	8005168 <UART_SetConfig+0x198>
 8005166:	e084      	b.n	8005272 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005168:	231b      	movs	r3, #27
 800516a:	2218      	movs	r2, #24
 800516c:	189b      	adds	r3, r3, r2
 800516e:	19db      	adds	r3, r3, r7
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b08      	cmp	r3, #8
 8005174:	d01d      	beq.n	80051b2 <UART_SetConfig+0x1e2>
 8005176:	dc20      	bgt.n	80051ba <UART_SetConfig+0x1ea>
 8005178:	2b04      	cmp	r3, #4
 800517a:	d015      	beq.n	80051a8 <UART_SetConfig+0x1d8>
 800517c:	dc1d      	bgt.n	80051ba <UART_SetConfig+0x1ea>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <UART_SetConfig+0x1b8>
 8005182:	2b02      	cmp	r3, #2
 8005184:	d005      	beq.n	8005192 <UART_SetConfig+0x1c2>
 8005186:	e018      	b.n	80051ba <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005188:	f7fe fe2a 	bl	8003de0 <HAL_RCC_GetPCLK1Freq>
 800518c:	0003      	movs	r3, r0
 800518e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005190:	e01c      	b.n	80051cc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005192:	4b55      	ldr	r3, [pc, #340]	@ (80052e8 <UART_SetConfig+0x318>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2210      	movs	r2, #16
 8005198:	4013      	ands	r3, r2
 800519a:	d002      	beq.n	80051a2 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800519c:	4b53      	ldr	r3, [pc, #332]	@ (80052ec <UART_SetConfig+0x31c>)
 800519e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051a0:	e014      	b.n	80051cc <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80051a2:	4b53      	ldr	r3, [pc, #332]	@ (80052f0 <UART_SetConfig+0x320>)
 80051a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051a6:	e011      	b.n	80051cc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051a8:	f7fe fd6a 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 80051ac:	0003      	movs	r3, r0
 80051ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051b0:	e00c      	b.n	80051cc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051b2:	2380      	movs	r3, #128	@ 0x80
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051b8:	e008      	b.n	80051cc <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80051be:	231a      	movs	r3, #26
 80051c0:	2218      	movs	r2, #24
 80051c2:	189b      	adds	r3, r3, r2
 80051c4:	19db      	adds	r3, r3, r7
 80051c6:	2201      	movs	r2, #1
 80051c8:	701a      	strb	r2, [r3, #0]
        break;
 80051ca:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d100      	bne.n	80051d4 <UART_SetConfig+0x204>
 80051d2:	e12f      	b.n	8005434 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	0013      	movs	r3, r2
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	189b      	adds	r3, r3, r2
 80051de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d305      	bcc.n	80051f0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d906      	bls.n	80051fe <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80051f0:	231a      	movs	r3, #26
 80051f2:	2218      	movs	r2, #24
 80051f4:	189b      	adds	r3, r3, r2
 80051f6:	19db      	adds	r3, r3, r7
 80051f8:	2201      	movs	r2, #1
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e11a      	b.n	8005434 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	6939      	ldr	r1, [r7, #16]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	000b      	movs	r3, r1
 800520c:	0e1b      	lsrs	r3, r3, #24
 800520e:	0010      	movs	r0, r2
 8005210:	0205      	lsls	r5, r0, #8
 8005212:	431d      	orrs	r5, r3
 8005214:	000b      	movs	r3, r1
 8005216:	021c      	lsls	r4, r3, #8
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68b8      	ldr	r0, [r7, #8]
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	1900      	adds	r0, r0, r4
 800522a:	4169      	adcs	r1, r5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	2300      	movs	r3, #0
 8005234:	607b      	str	r3, [r7, #4]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f7fa fffb 	bl	8000234 <__aeabi_uldivmod>
 800523e:	0002      	movs	r2, r0
 8005240:	000b      	movs	r3, r1
 8005242:	0013      	movs	r3, r2
 8005244:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005248:	23c0      	movs	r3, #192	@ 0xc0
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	429a      	cmp	r2, r3
 800524e:	d309      	bcc.n	8005264 <UART_SetConfig+0x294>
 8005250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005252:	2380      	movs	r3, #128	@ 0x80
 8005254:	035b      	lsls	r3, r3, #13
 8005256:	429a      	cmp	r2, r3
 8005258:	d204      	bcs.n	8005264 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005260:	60da      	str	r2, [r3, #12]
 8005262:	e0e7      	b.n	8005434 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8005264:	231a      	movs	r3, #26
 8005266:	2218      	movs	r2, #24
 8005268:	189b      	adds	r3, r3, r2
 800526a:	19db      	adds	r3, r3, r7
 800526c:	2201      	movs	r2, #1
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e0e0      	b.n	8005434 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	69da      	ldr	r2, [r3, #28]
 8005276:	2380      	movs	r3, #128	@ 0x80
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	429a      	cmp	r2, r3
 800527c:	d000      	beq.n	8005280 <UART_SetConfig+0x2b0>
 800527e:	e082      	b.n	8005386 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8005280:	231b      	movs	r3, #27
 8005282:	2218      	movs	r2, #24
 8005284:	189b      	adds	r3, r3, r2
 8005286:	19db      	adds	r3, r3, r7
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b08      	cmp	r3, #8
 800528c:	d834      	bhi.n	80052f8 <UART_SetConfig+0x328>
 800528e:	009a      	lsls	r2, r3, #2
 8005290:	4b18      	ldr	r3, [pc, #96]	@ (80052f4 <UART_SetConfig+0x324>)
 8005292:	18d3      	adds	r3, r2, r3
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005298:	f7fe fda2 	bl	8003de0 <HAL_RCC_GetPCLK1Freq>
 800529c:	0003      	movs	r3, r0
 800529e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052a0:	e033      	b.n	800530a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a2:	f7fe fdb3 	bl	8003e0c <HAL_RCC_GetPCLK2Freq>
 80052a6:	0003      	movs	r3, r0
 80052a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052aa:	e02e      	b.n	800530a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052ac:	4b0e      	ldr	r3, [pc, #56]	@ (80052e8 <UART_SetConfig+0x318>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2210      	movs	r2, #16
 80052b2:	4013      	ands	r3, r2
 80052b4:	d002      	beq.n	80052bc <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052b6:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <UART_SetConfig+0x31c>)
 80052b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052ba:	e026      	b.n	800530a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80052bc:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <UART_SetConfig+0x320>)
 80052be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052c0:	e023      	b.n	800530a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c2:	f7fe fcdd 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 80052c6:	0003      	movs	r3, r0
 80052c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052ca:	e01e      	b.n	800530a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052cc:	2380      	movs	r3, #128	@ 0x80
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052d2:	e01a      	b.n	800530a <UART_SetConfig+0x33a>
 80052d4:	efff69f3 	.word	0xefff69f3
 80052d8:	ffffcfff 	.word	0xffffcfff
 80052dc:	40004800 	.word	0x40004800
 80052e0:	fffff4ff 	.word	0xfffff4ff
 80052e4:	40004400 	.word	0x40004400
 80052e8:	40021000 	.word	0x40021000
 80052ec:	003d0900 	.word	0x003d0900
 80052f0:	00f42400 	.word	0x00f42400
 80052f4:	08006bb4 	.word	0x08006bb4
      default:
        pclk = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80052fc:	231a      	movs	r3, #26
 80052fe:	2218      	movs	r2, #24
 8005300:	189b      	adds	r3, r3, r2
 8005302:	19db      	adds	r3, r3, r7
 8005304:	2201      	movs	r2, #1
 8005306:	701a      	strb	r2, [r3, #0]
        break;
 8005308:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800530a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d100      	bne.n	8005312 <UART_SetConfig+0x342>
 8005310:	e090      	b.n	8005434 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005314:	005a      	lsls	r2, r3, #1
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	18d2      	adds	r2, r2, r3
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	0019      	movs	r1, r3
 8005324:	0010      	movs	r0, r2
 8005326:	f7fa fef9 	bl	800011c <__udivsi3>
 800532a:	0003      	movs	r3, r0
 800532c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	2b0f      	cmp	r3, #15
 8005332:	d921      	bls.n	8005378 <UART_SetConfig+0x3a8>
 8005334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005336:	2380      	movs	r3, #128	@ 0x80
 8005338:	025b      	lsls	r3, r3, #9
 800533a:	429a      	cmp	r2, r3
 800533c:	d21c      	bcs.n	8005378 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005340:	b29a      	uxth	r2, r3
 8005342:	200e      	movs	r0, #14
 8005344:	2418      	movs	r4, #24
 8005346:	1903      	adds	r3, r0, r4
 8005348:	19db      	adds	r3, r3, r7
 800534a:	210f      	movs	r1, #15
 800534c:	438a      	bics	r2, r1
 800534e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	b29b      	uxth	r3, r3
 8005356:	2207      	movs	r2, #7
 8005358:	4013      	ands	r3, r2
 800535a:	b299      	uxth	r1, r3
 800535c:	1903      	adds	r3, r0, r4
 800535e:	19db      	adds	r3, r3, r7
 8005360:	1902      	adds	r2, r0, r4
 8005362:	19d2      	adds	r2, r2, r7
 8005364:	8812      	ldrh	r2, [r2, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	1902      	adds	r2, r0, r4
 8005370:	19d2      	adds	r2, r2, r7
 8005372:	8812      	ldrh	r2, [r2, #0]
 8005374:	60da      	str	r2, [r3, #12]
 8005376:	e05d      	b.n	8005434 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005378:	231a      	movs	r3, #26
 800537a:	2218      	movs	r2, #24
 800537c:	189b      	adds	r3, r3, r2
 800537e:	19db      	adds	r3, r3, r7
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	e056      	b.n	8005434 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005386:	231b      	movs	r3, #27
 8005388:	2218      	movs	r2, #24
 800538a:	189b      	adds	r3, r3, r2
 800538c:	19db      	adds	r3, r3, r7
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b08      	cmp	r3, #8
 8005392:	d822      	bhi.n	80053da <UART_SetConfig+0x40a>
 8005394:	009a      	lsls	r2, r3, #2
 8005396:	4b2f      	ldr	r3, [pc, #188]	@ (8005454 <UART_SetConfig+0x484>)
 8005398:	18d3      	adds	r3, r2, r3
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800539e:	f7fe fd1f 	bl	8003de0 <HAL_RCC_GetPCLK1Freq>
 80053a2:	0003      	movs	r3, r0
 80053a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053a6:	e021      	b.n	80053ec <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a8:	f7fe fd30 	bl	8003e0c <HAL_RCC_GetPCLK2Freq>
 80053ac:	0003      	movs	r3, r0
 80053ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053b0:	e01c      	b.n	80053ec <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053b2:	4b29      	ldr	r3, [pc, #164]	@ (8005458 <UART_SetConfig+0x488>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2210      	movs	r2, #16
 80053b8:	4013      	ands	r3, r2
 80053ba:	d002      	beq.n	80053c2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80053bc:	4b27      	ldr	r3, [pc, #156]	@ (800545c <UART_SetConfig+0x48c>)
 80053be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053c0:	e014      	b.n	80053ec <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80053c2:	4b27      	ldr	r3, [pc, #156]	@ (8005460 <UART_SetConfig+0x490>)
 80053c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053c6:	e011      	b.n	80053ec <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c8:	f7fe fc5a 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 80053cc:	0003      	movs	r3, r0
 80053ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053d0:	e00c      	b.n	80053ec <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d2:	2380      	movs	r3, #128	@ 0x80
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053d8:	e008      	b.n	80053ec <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80053de:	231a      	movs	r3, #26
 80053e0:	2218      	movs	r2, #24
 80053e2:	189b      	adds	r3, r3, r2
 80053e4:	19db      	adds	r3, r3, r7
 80053e6:	2201      	movs	r2, #1
 80053e8:	701a      	strb	r2, [r3, #0]
        break;
 80053ea:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80053ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d020      	beq.n	8005434 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	085a      	lsrs	r2, r3, #1
 80053f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fa:	18d2      	adds	r2, r2, r3
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	0019      	movs	r1, r3
 8005402:	0010      	movs	r0, r2
 8005404:	f7fa fe8a 	bl	800011c <__udivsi3>
 8005408:	0003      	movs	r3, r0
 800540a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	2b0f      	cmp	r3, #15
 8005410:	d90a      	bls.n	8005428 <UART_SetConfig+0x458>
 8005412:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005414:	2380      	movs	r3, #128	@ 0x80
 8005416:	025b      	lsls	r3, r3, #9
 8005418:	429a      	cmp	r2, r3
 800541a:	d205      	bcs.n	8005428 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800541c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541e:	b29a      	uxth	r2, r3
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	e005      	b.n	8005434 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005428:	231a      	movs	r3, #26
 800542a:	2218      	movs	r2, #24
 800542c:	189b      	adds	r3, r3, r2
 800542e:	19db      	adds	r3, r3, r7
 8005430:	2201      	movs	r2, #1
 8005432:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	2200      	movs	r2, #0
 8005438:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	2200      	movs	r2, #0
 800543e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005440:	231a      	movs	r3, #26
 8005442:	2218      	movs	r2, #24
 8005444:	189b      	adds	r3, r3, r2
 8005446:	19db      	adds	r3, r3, r7
 8005448:	781b      	ldrb	r3, [r3, #0]
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b00e      	add	sp, #56	@ 0x38
 8005450:	bdb0      	pop	{r4, r5, r7, pc}
 8005452:	46c0      	nop			@ (mov r8, r8)
 8005454:	08006bd8 	.word	0x08006bd8
 8005458:	40021000 	.word	0x40021000
 800545c:	003d0900 	.word	0x003d0900
 8005460:	00f42400 	.word	0x00f42400

08005464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	2201      	movs	r2, #1
 8005472:	4013      	ands	r3, r2
 8005474:	d00b      	beq.n	800548e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4a4a      	ldr	r2, [pc, #296]	@ (80055a8 <UART_AdvFeatureConfig+0x144>)
 800547e:	4013      	ands	r3, r2
 8005480:	0019      	movs	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005492:	2202      	movs	r2, #2
 8005494:	4013      	ands	r3, r2
 8005496:	d00b      	beq.n	80054b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4a43      	ldr	r2, [pc, #268]	@ (80055ac <UART_AdvFeatureConfig+0x148>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	0019      	movs	r1, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	2204      	movs	r2, #4
 80054b6:	4013      	ands	r3, r2
 80054b8:	d00b      	beq.n	80054d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a3b      	ldr	r2, [pc, #236]	@ (80055b0 <UART_AdvFeatureConfig+0x14c>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	0019      	movs	r1, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	2208      	movs	r2, #8
 80054d8:	4013      	ands	r3, r2
 80054da:	d00b      	beq.n	80054f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	4a34      	ldr	r2, [pc, #208]	@ (80055b4 <UART_AdvFeatureConfig+0x150>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	0019      	movs	r1, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	2210      	movs	r2, #16
 80054fa:	4013      	ands	r3, r2
 80054fc:	d00b      	beq.n	8005516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	4a2c      	ldr	r2, [pc, #176]	@ (80055b8 <UART_AdvFeatureConfig+0x154>)
 8005506:	4013      	ands	r3, r2
 8005508:	0019      	movs	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	2220      	movs	r2, #32
 800551c:	4013      	ands	r3, r2
 800551e:	d00b      	beq.n	8005538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	4a25      	ldr	r2, [pc, #148]	@ (80055bc <UART_AdvFeatureConfig+0x158>)
 8005528:	4013      	ands	r3, r2
 800552a:	0019      	movs	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	2240      	movs	r2, #64	@ 0x40
 800553e:	4013      	ands	r3, r2
 8005540:	d01d      	beq.n	800557e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a1d      	ldr	r2, [pc, #116]	@ (80055c0 <UART_AdvFeatureConfig+0x15c>)
 800554a:	4013      	ands	r3, r2
 800554c:	0019      	movs	r1, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800555e:	2380      	movs	r3, #128	@ 0x80
 8005560:	035b      	lsls	r3, r3, #13
 8005562:	429a      	cmp	r2, r3
 8005564:	d10b      	bne.n	800557e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a15      	ldr	r2, [pc, #84]	@ (80055c4 <UART_AdvFeatureConfig+0x160>)
 800556e:	4013      	ands	r3, r2
 8005570:	0019      	movs	r1, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005582:	2280      	movs	r2, #128	@ 0x80
 8005584:	4013      	ands	r3, r2
 8005586:	d00b      	beq.n	80055a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	4a0e      	ldr	r2, [pc, #56]	@ (80055c8 <UART_AdvFeatureConfig+0x164>)
 8005590:	4013      	ands	r3, r2
 8005592:	0019      	movs	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }
}
 80055a0:	46c0      	nop			@ (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b002      	add	sp, #8
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	fffdffff 	.word	0xfffdffff
 80055ac:	fffeffff 	.word	0xfffeffff
 80055b0:	fffbffff 	.word	0xfffbffff
 80055b4:	ffff7fff 	.word	0xffff7fff
 80055b8:	ffffefff 	.word	0xffffefff
 80055bc:	ffffdfff 	.word	0xffffdfff
 80055c0:	ffefffff 	.word	0xffefffff
 80055c4:	ff9fffff 	.word	0xff9fffff
 80055c8:	fff7ffff 	.word	0xfff7ffff

080055cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b092      	sub	sp, #72	@ 0x48
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2284      	movs	r2, #132	@ 0x84
 80055d8:	2100      	movs	r1, #0
 80055da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055dc:	f7fc fc32 	bl	8001e44 <HAL_GetTick>
 80055e0:	0003      	movs	r3, r0
 80055e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2208      	movs	r2, #8
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d12c      	bne.n	800564c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f4:	2280      	movs	r2, #128	@ 0x80
 80055f6:	0391      	lsls	r1, r2, #14
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	4a46      	ldr	r2, [pc, #280]	@ (8005714 <UART_CheckIdleState+0x148>)
 80055fc:	9200      	str	r2, [sp, #0]
 80055fe:	2200      	movs	r2, #0
 8005600:	f000 f88c 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 8005604:	1e03      	subs	r3, r0, #0
 8005606:	d021      	beq.n	800564c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005608:	f3ef 8310 	mrs	r3, PRIMASK
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005610:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005612:	2301      	movs	r3, #1
 8005614:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005618:	f383 8810 	msr	PRIMASK, r3
}
 800561c:	46c0      	nop			@ (mov r8, r8)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2180      	movs	r1, #128	@ 0x80
 800562a:	438a      	bics	r2, r1
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005634:	f383 8810 	msr	PRIMASK, r3
}
 8005638:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2278      	movs	r2, #120	@ 0x78
 8005644:	2100      	movs	r1, #0
 8005646:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e05f      	b.n	800570c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2204      	movs	r2, #4
 8005654:	4013      	ands	r3, r2
 8005656:	2b04      	cmp	r3, #4
 8005658:	d146      	bne.n	80056e8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800565a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800565c:	2280      	movs	r2, #128	@ 0x80
 800565e:	03d1      	lsls	r1, r2, #15
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	4a2c      	ldr	r2, [pc, #176]	@ (8005714 <UART_CheckIdleState+0x148>)
 8005664:	9200      	str	r2, [sp, #0]
 8005666:	2200      	movs	r2, #0
 8005668:	f000 f858 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 800566c:	1e03      	subs	r3, r0, #0
 800566e:	d03b      	beq.n	80056e8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005670:	f3ef 8310 	mrs	r3, PRIMASK
 8005674:	60fb      	str	r3, [r7, #12]
  return(result);
 8005676:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005678:	637b      	str	r3, [r7, #52]	@ 0x34
 800567a:	2301      	movs	r3, #1
 800567c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f383 8810 	msr	PRIMASK, r3
}
 8005684:	46c0      	nop			@ (mov r8, r8)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4921      	ldr	r1, [pc, #132]	@ (8005718 <UART_CheckIdleState+0x14c>)
 8005692:	400a      	ands	r2, r1
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005698:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f383 8810 	msr	PRIMASK, r3
}
 80056a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a2:	f3ef 8310 	mrs	r3, PRIMASK
 80056a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80056a8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ac:	2301      	movs	r3, #1
 80056ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f383 8810 	msr	PRIMASK, r3
}
 80056b6:	46c0      	nop			@ (mov r8, r8)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2101      	movs	r1, #1
 80056c4:	438a      	bics	r2, r1
 80056c6:	609a      	str	r2, [r3, #8]
 80056c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	f383 8810 	msr	PRIMASK, r3
}
 80056d2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2280      	movs	r2, #128	@ 0x80
 80056d8:	2120      	movs	r1, #32
 80056da:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2278      	movs	r2, #120	@ 0x78
 80056e0:	2100      	movs	r1, #0
 80056e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e011      	b.n	800570c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2280      	movs	r2, #128	@ 0x80
 80056f2:	2120      	movs	r1, #32
 80056f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2278      	movs	r2, #120	@ 0x78
 8005706:	2100      	movs	r1, #0
 8005708:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	0018      	movs	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	b010      	add	sp, #64	@ 0x40
 8005712:	bd80      	pop	{r7, pc}
 8005714:	01ffffff 	.word	0x01ffffff
 8005718:	fffffedf 	.word	0xfffffedf

0800571c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	1dfb      	adds	r3, r7, #7
 800572a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572c:	e04b      	b.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	3301      	adds	r3, #1
 8005732:	d048      	beq.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005734:	f7fc fb86 	bl	8001e44 <HAL_GetTick>
 8005738:	0002      	movs	r2, r0
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	429a      	cmp	r2, r3
 8005742:	d302      	bcc.n	800574a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e04b      	b.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2204      	movs	r2, #4
 8005756:	4013      	ands	r3, r2
 8005758:	d035      	beq.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	2208      	movs	r2, #8
 8005762:	4013      	ands	r3, r2
 8005764:	2b08      	cmp	r3, #8
 8005766:	d111      	bne.n	800578c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2208      	movs	r2, #8
 800576e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	0018      	movs	r0, r3
 8005774:	f000 f83c 	bl	80057f0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2284      	movs	r2, #132	@ 0x84
 800577c:	2108      	movs	r1, #8
 800577e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2278      	movs	r2, #120	@ 0x78
 8005784:	2100      	movs	r1, #0
 8005786:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e02c      	b.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69da      	ldr	r2, [r3, #28]
 8005792:	2380      	movs	r3, #128	@ 0x80
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	401a      	ands	r2, r3
 8005798:	2380      	movs	r3, #128	@ 0x80
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	429a      	cmp	r2, r3
 800579e:	d112      	bne.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2280      	movs	r2, #128	@ 0x80
 80057a6:	0112      	lsls	r2, r2, #4
 80057a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	0018      	movs	r0, r3
 80057ae:	f000 f81f 	bl	80057f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2284      	movs	r2, #132	@ 0x84
 80057b6:	2120      	movs	r1, #32
 80057b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2278      	movs	r2, #120	@ 0x78
 80057be:	2100      	movs	r1, #0
 80057c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e00f      	b.n	80057e6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	4013      	ands	r3, r2
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	425a      	negs	r2, r3
 80057d6:	4153      	adcs	r3, r2
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	001a      	movs	r2, r3
 80057dc:	1dfb      	adds	r3, r7, #7
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d0a4      	beq.n	800572e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	0018      	movs	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b004      	add	sp, #16
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08e      	sub	sp, #56	@ 0x38
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f8:	f3ef 8310 	mrs	r3, PRIMASK
 80057fc:	617b      	str	r3, [r7, #20]
  return(result);
 80057fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005800:	637b      	str	r3, [r7, #52]	@ 0x34
 8005802:	2301      	movs	r3, #1
 8005804:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	f383 8810 	msr	PRIMASK, r3
}
 800580c:	46c0      	nop			@ (mov r8, r8)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4926      	ldr	r1, [pc, #152]	@ (80058b4 <UART_EndRxTransfer+0xc4>)
 800581a:	400a      	ands	r2, r1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005820:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f383 8810 	msr	PRIMASK, r3
}
 8005828:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800582a:	f3ef 8310 	mrs	r3, PRIMASK
 800582e:	623b      	str	r3, [r7, #32]
  return(result);
 8005830:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005832:	633b      	str	r3, [r7, #48]	@ 0x30
 8005834:	2301      	movs	r3, #1
 8005836:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583a:	f383 8810 	msr	PRIMASK, r3
}
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2101      	movs	r1, #1
 800584c:	438a      	bics	r2, r1
 800584e:	609a      	str	r2, [r3, #8]
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005856:	f383 8810 	msr	PRIMASK, r3
}
 800585a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005860:	2b01      	cmp	r3, #1
 8005862:	d118      	bne.n	8005896 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005864:	f3ef 8310 	mrs	r3, PRIMASK
 8005868:	60bb      	str	r3, [r7, #8]
  return(result);
 800586a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800586e:	2301      	movs	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f383 8810 	msr	PRIMASK, r3
}
 8005878:	46c0      	nop			@ (mov r8, r8)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2110      	movs	r1, #16
 8005886:	438a      	bics	r2, r1
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f383 8810 	msr	PRIMASK, r3
}
 8005894:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2280      	movs	r2, #128	@ 0x80
 800589a:	2120      	movs	r1, #32
 800589c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80058aa:	46c0      	nop			@ (mov r8, r8)
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b00e      	add	sp, #56	@ 0x38
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			@ (mov r8, r8)
 80058b4:	fffffedf 	.word	0xfffffedf

080058b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	225a      	movs	r2, #90	@ 0x5a
 80058ca:	2100      	movs	r1, #0
 80058cc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2252      	movs	r2, #82	@ 0x52
 80058d2:	2100      	movs	r1, #0
 80058d4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	0018      	movs	r0, r3
 80058da:	f7ff fb65 	bl	8004fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058de:	46c0      	nop			@ (mov r8, r8)
 80058e0:	46bd      	mov	sp, r7
 80058e2:	b004      	add	sp, #16
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b086      	sub	sp, #24
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ee:	f3ef 8310 	mrs	r3, PRIMASK
 80058f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80058f4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	2301      	movs	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f383 8810 	msr	PRIMASK, r3
}
 8005902:	46c0      	nop			@ (mov r8, r8)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2140      	movs	r1, #64	@ 0x40
 8005910:	438a      	bics	r2, r1
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f383 8810 	msr	PRIMASK, r3
}
 800591e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	0018      	movs	r0, r3
 8005930:	f7ff fb32 	bl	8004f98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005934:	46c0      	nop			@ (mov r8, r8)
 8005936:	46bd      	mov	sp, r7
 8005938:	b006      	add	sp, #24
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005944:	46c0      	nop			@ (mov r8, r8)
 8005946:	46bd      	mov	sp, r7
 8005948:	b002      	add	sp, #8
 800594a:	bd80      	pop	{r7, pc}

0800594c <std>:
 800594c:	2300      	movs	r3, #0
 800594e:	b510      	push	{r4, lr}
 8005950:	0004      	movs	r4, r0
 8005952:	6003      	str	r3, [r0, #0]
 8005954:	6043      	str	r3, [r0, #4]
 8005956:	6083      	str	r3, [r0, #8]
 8005958:	8181      	strh	r1, [r0, #12]
 800595a:	6643      	str	r3, [r0, #100]	@ 0x64
 800595c:	81c2      	strh	r2, [r0, #14]
 800595e:	6103      	str	r3, [r0, #16]
 8005960:	6143      	str	r3, [r0, #20]
 8005962:	6183      	str	r3, [r0, #24]
 8005964:	0019      	movs	r1, r3
 8005966:	2208      	movs	r2, #8
 8005968:	305c      	adds	r0, #92	@ 0x5c
 800596a:	f000 fa0f 	bl	8005d8c <memset>
 800596e:	4b0b      	ldr	r3, [pc, #44]	@ (800599c <std+0x50>)
 8005970:	6224      	str	r4, [r4, #32]
 8005972:	6263      	str	r3, [r4, #36]	@ 0x24
 8005974:	4b0a      	ldr	r3, [pc, #40]	@ (80059a0 <std+0x54>)
 8005976:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005978:	4b0a      	ldr	r3, [pc, #40]	@ (80059a4 <std+0x58>)
 800597a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800597c:	4b0a      	ldr	r3, [pc, #40]	@ (80059a8 <std+0x5c>)
 800597e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005980:	4b0a      	ldr	r3, [pc, #40]	@ (80059ac <std+0x60>)
 8005982:	429c      	cmp	r4, r3
 8005984:	d005      	beq.n	8005992 <std+0x46>
 8005986:	4b0a      	ldr	r3, [pc, #40]	@ (80059b0 <std+0x64>)
 8005988:	429c      	cmp	r4, r3
 800598a:	d002      	beq.n	8005992 <std+0x46>
 800598c:	4b09      	ldr	r3, [pc, #36]	@ (80059b4 <std+0x68>)
 800598e:	429c      	cmp	r4, r3
 8005990:	d103      	bne.n	800599a <std+0x4e>
 8005992:	0020      	movs	r0, r4
 8005994:	3058      	adds	r0, #88	@ 0x58
 8005996:	f000 fa79 	bl	8005e8c <__retarget_lock_init_recursive>
 800599a:	bd10      	pop	{r4, pc}
 800599c:	08005bb5 	.word	0x08005bb5
 80059a0:	08005bdd 	.word	0x08005bdd
 80059a4:	08005c15 	.word	0x08005c15
 80059a8:	08005c41 	.word	0x08005c41
 80059ac:	20000978 	.word	0x20000978
 80059b0:	200009e0 	.word	0x200009e0
 80059b4:	20000a48 	.word	0x20000a48

080059b8 <stdio_exit_handler>:
 80059b8:	b510      	push	{r4, lr}
 80059ba:	4a03      	ldr	r2, [pc, #12]	@ (80059c8 <stdio_exit_handler+0x10>)
 80059bc:	4903      	ldr	r1, [pc, #12]	@ (80059cc <stdio_exit_handler+0x14>)
 80059be:	4804      	ldr	r0, [pc, #16]	@ (80059d0 <stdio_exit_handler+0x18>)
 80059c0:	f000 f86c 	bl	8005a9c <_fwalk_sglue>
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	2000000c 	.word	0x2000000c
 80059cc:	0800671d 	.word	0x0800671d
 80059d0:	2000001c 	.word	0x2000001c

080059d4 <cleanup_stdio>:
 80059d4:	6841      	ldr	r1, [r0, #4]
 80059d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <cleanup_stdio+0x30>)
 80059d8:	b510      	push	{r4, lr}
 80059da:	0004      	movs	r4, r0
 80059dc:	4299      	cmp	r1, r3
 80059de:	d001      	beq.n	80059e4 <cleanup_stdio+0x10>
 80059e0:	f000 fe9c 	bl	800671c <_fflush_r>
 80059e4:	68a1      	ldr	r1, [r4, #8]
 80059e6:	4b08      	ldr	r3, [pc, #32]	@ (8005a08 <cleanup_stdio+0x34>)
 80059e8:	4299      	cmp	r1, r3
 80059ea:	d002      	beq.n	80059f2 <cleanup_stdio+0x1e>
 80059ec:	0020      	movs	r0, r4
 80059ee:	f000 fe95 	bl	800671c <_fflush_r>
 80059f2:	68e1      	ldr	r1, [r4, #12]
 80059f4:	4b05      	ldr	r3, [pc, #20]	@ (8005a0c <cleanup_stdio+0x38>)
 80059f6:	4299      	cmp	r1, r3
 80059f8:	d002      	beq.n	8005a00 <cleanup_stdio+0x2c>
 80059fa:	0020      	movs	r0, r4
 80059fc:	f000 fe8e 	bl	800671c <_fflush_r>
 8005a00:	bd10      	pop	{r4, pc}
 8005a02:	46c0      	nop			@ (mov r8, r8)
 8005a04:	20000978 	.word	0x20000978
 8005a08:	200009e0 	.word	0x200009e0
 8005a0c:	20000a48 	.word	0x20000a48

08005a10 <global_stdio_init.part.0>:
 8005a10:	b510      	push	{r4, lr}
 8005a12:	4b09      	ldr	r3, [pc, #36]	@ (8005a38 <global_stdio_init.part.0+0x28>)
 8005a14:	4a09      	ldr	r2, [pc, #36]	@ (8005a3c <global_stdio_init.part.0+0x2c>)
 8005a16:	2104      	movs	r1, #4
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	4809      	ldr	r0, [pc, #36]	@ (8005a40 <global_stdio_init.part.0+0x30>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f7ff ff95 	bl	800594c <std>
 8005a22:	2201      	movs	r2, #1
 8005a24:	2109      	movs	r1, #9
 8005a26:	4807      	ldr	r0, [pc, #28]	@ (8005a44 <global_stdio_init.part.0+0x34>)
 8005a28:	f7ff ff90 	bl	800594c <std>
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	2112      	movs	r1, #18
 8005a30:	4805      	ldr	r0, [pc, #20]	@ (8005a48 <global_stdio_init.part.0+0x38>)
 8005a32:	f7ff ff8b 	bl	800594c <std>
 8005a36:	bd10      	pop	{r4, pc}
 8005a38:	20000ab0 	.word	0x20000ab0
 8005a3c:	080059b9 	.word	0x080059b9
 8005a40:	20000978 	.word	0x20000978
 8005a44:	200009e0 	.word	0x200009e0
 8005a48:	20000a48 	.word	0x20000a48

08005a4c <__sfp_lock_acquire>:
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	4802      	ldr	r0, [pc, #8]	@ (8005a58 <__sfp_lock_acquire+0xc>)
 8005a50:	f000 fa1d 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8005a54:	bd10      	pop	{r4, pc}
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	20000ab9 	.word	0x20000ab9

08005a5c <__sfp_lock_release>:
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	4802      	ldr	r0, [pc, #8]	@ (8005a68 <__sfp_lock_release+0xc>)
 8005a60:	f000 fa16 	bl	8005e90 <__retarget_lock_release_recursive>
 8005a64:	bd10      	pop	{r4, pc}
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	20000ab9 	.word	0x20000ab9

08005a6c <__sinit>:
 8005a6c:	b510      	push	{r4, lr}
 8005a6e:	0004      	movs	r4, r0
 8005a70:	f7ff ffec 	bl	8005a4c <__sfp_lock_acquire>
 8005a74:	6a23      	ldr	r3, [r4, #32]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <__sinit+0x14>
 8005a7a:	f7ff ffef 	bl	8005a5c <__sfp_lock_release>
 8005a7e:	bd10      	pop	{r4, pc}
 8005a80:	4b04      	ldr	r3, [pc, #16]	@ (8005a94 <__sinit+0x28>)
 8005a82:	6223      	str	r3, [r4, #32]
 8005a84:	4b04      	ldr	r3, [pc, #16]	@ (8005a98 <__sinit+0x2c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f6      	bne.n	8005a7a <__sinit+0xe>
 8005a8c:	f7ff ffc0 	bl	8005a10 <global_stdio_init.part.0>
 8005a90:	e7f3      	b.n	8005a7a <__sinit+0xe>
 8005a92:	46c0      	nop			@ (mov r8, r8)
 8005a94:	080059d5 	.word	0x080059d5
 8005a98:	20000ab0 	.word	0x20000ab0

08005a9c <_fwalk_sglue>:
 8005a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a9e:	0014      	movs	r4, r2
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	9000      	str	r0, [sp, #0]
 8005aa4:	9101      	str	r1, [sp, #4]
 8005aa6:	68a5      	ldr	r5, [r4, #8]
 8005aa8:	6867      	ldr	r7, [r4, #4]
 8005aaa:	3f01      	subs	r7, #1
 8005aac:	d504      	bpl.n	8005ab8 <_fwalk_sglue+0x1c>
 8005aae:	6824      	ldr	r4, [r4, #0]
 8005ab0:	2c00      	cmp	r4, #0
 8005ab2:	d1f8      	bne.n	8005aa6 <_fwalk_sglue+0xa>
 8005ab4:	0030      	movs	r0, r6
 8005ab6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ab8:	89ab      	ldrh	r3, [r5, #12]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d908      	bls.n	8005ad0 <_fwalk_sglue+0x34>
 8005abe:	220e      	movs	r2, #14
 8005ac0:	5eab      	ldrsh	r3, [r5, r2]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	d004      	beq.n	8005ad0 <_fwalk_sglue+0x34>
 8005ac6:	0029      	movs	r1, r5
 8005ac8:	9800      	ldr	r0, [sp, #0]
 8005aca:	9b01      	ldr	r3, [sp, #4]
 8005acc:	4798      	blx	r3
 8005ace:	4306      	orrs	r6, r0
 8005ad0:	3568      	adds	r5, #104	@ 0x68
 8005ad2:	e7ea      	b.n	8005aaa <_fwalk_sglue+0xe>

08005ad4 <iprintf>:
 8005ad4:	b40f      	push	{r0, r1, r2, r3}
 8005ad6:	b507      	push	{r0, r1, r2, lr}
 8005ad8:	4905      	ldr	r1, [pc, #20]	@ (8005af0 <iprintf+0x1c>)
 8005ada:	ab04      	add	r3, sp, #16
 8005adc:	6808      	ldr	r0, [r1, #0]
 8005ade:	cb04      	ldmia	r3!, {r2}
 8005ae0:	6881      	ldr	r1, [r0, #8]
 8005ae2:	9301      	str	r3, [sp, #4]
 8005ae4:	f000 fafa 	bl	80060dc <_vfiprintf_r>
 8005ae8:	b003      	add	sp, #12
 8005aea:	bc08      	pop	{r3}
 8005aec:	b004      	add	sp, #16
 8005aee:	4718      	bx	r3
 8005af0:	20000018 	.word	0x20000018

08005af4 <_puts_r>:
 8005af4:	6a03      	ldr	r3, [r0, #32]
 8005af6:	b570      	push	{r4, r5, r6, lr}
 8005af8:	0005      	movs	r5, r0
 8005afa:	000e      	movs	r6, r1
 8005afc:	6884      	ldr	r4, [r0, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <_puts_r+0x12>
 8005b02:	f7ff ffb3 	bl	8005a6c <__sinit>
 8005b06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b08:	07db      	lsls	r3, r3, #31
 8005b0a:	d405      	bmi.n	8005b18 <_puts_r+0x24>
 8005b0c:	89a3      	ldrh	r3, [r4, #12]
 8005b0e:	059b      	lsls	r3, r3, #22
 8005b10:	d402      	bmi.n	8005b18 <_puts_r+0x24>
 8005b12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b14:	f000 f9bb 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	071b      	lsls	r3, r3, #28
 8005b1c:	d502      	bpl.n	8005b24 <_puts_r+0x30>
 8005b1e:	6923      	ldr	r3, [r4, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d11f      	bne.n	8005b64 <_puts_r+0x70>
 8005b24:	0021      	movs	r1, r4
 8005b26:	0028      	movs	r0, r5
 8005b28:	f000 f8d2 	bl	8005cd0 <__swsetup_r>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d019      	beq.n	8005b64 <_puts_r+0x70>
 8005b30:	2501      	movs	r5, #1
 8005b32:	426d      	negs	r5, r5
 8005b34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b36:	07db      	lsls	r3, r3, #31
 8005b38:	d405      	bmi.n	8005b46 <_puts_r+0x52>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	059b      	lsls	r3, r3, #22
 8005b3e:	d402      	bmi.n	8005b46 <_puts_r+0x52>
 8005b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b42:	f000 f9a5 	bl	8005e90 <__retarget_lock_release_recursive>
 8005b46:	0028      	movs	r0, r5
 8005b48:	bd70      	pop	{r4, r5, r6, pc}
 8005b4a:	3601      	adds	r6, #1
 8005b4c:	60a3      	str	r3, [r4, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da04      	bge.n	8005b5c <_puts_r+0x68>
 8005b52:	69a2      	ldr	r2, [r4, #24]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	dc16      	bgt.n	8005b86 <_puts_r+0x92>
 8005b58:	290a      	cmp	r1, #10
 8005b5a:	d014      	beq.n	8005b86 <_puts_r+0x92>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	6022      	str	r2, [r4, #0]
 8005b62:	7019      	strb	r1, [r3, #0]
 8005b64:	68a3      	ldr	r3, [r4, #8]
 8005b66:	7831      	ldrb	r1, [r6, #0]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	2900      	cmp	r1, #0
 8005b6c:	d1ed      	bne.n	8005b4a <_puts_r+0x56>
 8005b6e:	60a3      	str	r3, [r4, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	da0f      	bge.n	8005b94 <_puts_r+0xa0>
 8005b74:	0022      	movs	r2, r4
 8005b76:	0028      	movs	r0, r5
 8005b78:	310a      	adds	r1, #10
 8005b7a:	f000 f867 	bl	8005c4c <__swbuf_r>
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d0d6      	beq.n	8005b30 <_puts_r+0x3c>
 8005b82:	250a      	movs	r5, #10
 8005b84:	e7d6      	b.n	8005b34 <_puts_r+0x40>
 8005b86:	0022      	movs	r2, r4
 8005b88:	0028      	movs	r0, r5
 8005b8a:	f000 f85f 	bl	8005c4c <__swbuf_r>
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d1e8      	bne.n	8005b64 <_puts_r+0x70>
 8005b92:	e7cd      	b.n	8005b30 <_puts_r+0x3c>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	6022      	str	r2, [r4, #0]
 8005b9a:	220a      	movs	r2, #10
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	e7f0      	b.n	8005b82 <_puts_r+0x8e>

08005ba0 <puts>:
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	4b03      	ldr	r3, [pc, #12]	@ (8005bb0 <puts+0x10>)
 8005ba4:	0001      	movs	r1, r0
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	f7ff ffa4 	bl	8005af4 <_puts_r>
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	46c0      	nop			@ (mov r8, r8)
 8005bb0:	20000018 	.word	0x20000018

08005bb4 <__sread>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	000c      	movs	r4, r1
 8005bb8:	250e      	movs	r5, #14
 8005bba:	5f49      	ldrsh	r1, [r1, r5]
 8005bbc:	f000 f914 	bl	8005de8 <_read_r>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	db03      	blt.n	8005bcc <__sread+0x18>
 8005bc4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005bc6:	181b      	adds	r3, r3, r0
 8005bc8:	6563      	str	r3, [r4, #84]	@ 0x54
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	4a02      	ldr	r2, [pc, #8]	@ (8005bd8 <__sread+0x24>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	e7f9      	b.n	8005bca <__sread+0x16>
 8005bd6:	46c0      	nop			@ (mov r8, r8)
 8005bd8:	ffffefff 	.word	0xffffefff

08005bdc <__swrite>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	001f      	movs	r7, r3
 8005be0:	898b      	ldrh	r3, [r1, #12]
 8005be2:	0005      	movs	r5, r0
 8005be4:	000c      	movs	r4, r1
 8005be6:	0016      	movs	r6, r2
 8005be8:	05db      	lsls	r3, r3, #23
 8005bea:	d505      	bpl.n	8005bf8 <__swrite+0x1c>
 8005bec:	230e      	movs	r3, #14
 8005bee:	5ec9      	ldrsh	r1, [r1, r3]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	f000 f8e4 	bl	8005dc0 <_lseek_r>
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	4a05      	ldr	r2, [pc, #20]	@ (8005c10 <__swrite+0x34>)
 8005bfc:	0028      	movs	r0, r5
 8005bfe:	4013      	ands	r3, r2
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	0032      	movs	r2, r6
 8005c04:	230e      	movs	r3, #14
 8005c06:	5ee1      	ldrsh	r1, [r4, r3]
 8005c08:	003b      	movs	r3, r7
 8005c0a:	f000 f901 	bl	8005e10 <_write_r>
 8005c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c10:	ffffefff 	.word	0xffffefff

08005c14 <__sseek>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	000c      	movs	r4, r1
 8005c18:	250e      	movs	r5, #14
 8005c1a:	5f49      	ldrsh	r1, [r1, r5]
 8005c1c:	f000 f8d0 	bl	8005dc0 <_lseek_r>
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	1c42      	adds	r2, r0, #1
 8005c24:	d103      	bne.n	8005c2e <__sseek+0x1a>
 8005c26:	4a05      	ldr	r2, [pc, #20]	@ (8005c3c <__sseek+0x28>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	bd70      	pop	{r4, r5, r6, pc}
 8005c2e:	2280      	movs	r2, #128	@ 0x80
 8005c30:	0152      	lsls	r2, r2, #5
 8005c32:	4313      	orrs	r3, r2
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c38:	e7f8      	b.n	8005c2c <__sseek+0x18>
 8005c3a:	46c0      	nop			@ (mov r8, r8)
 8005c3c:	ffffefff 	.word	0xffffefff

08005c40 <__sclose>:
 8005c40:	b510      	push	{r4, lr}
 8005c42:	230e      	movs	r3, #14
 8005c44:	5ec9      	ldrsh	r1, [r1, r3]
 8005c46:	f000 f8a9 	bl	8005d9c <_close_r>
 8005c4a:	bd10      	pop	{r4, pc}

08005c4c <__swbuf_r>:
 8005c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4e:	0006      	movs	r6, r0
 8005c50:	000d      	movs	r5, r1
 8005c52:	0014      	movs	r4, r2
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d004      	beq.n	8005c62 <__swbuf_r+0x16>
 8005c58:	6a03      	ldr	r3, [r0, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <__swbuf_r+0x16>
 8005c5e:	f7ff ff05 	bl	8005a6c <__sinit>
 8005c62:	69a3      	ldr	r3, [r4, #24]
 8005c64:	60a3      	str	r3, [r4, #8]
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	071b      	lsls	r3, r3, #28
 8005c6a:	d502      	bpl.n	8005c72 <__swbuf_r+0x26>
 8005c6c:	6923      	ldr	r3, [r4, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d109      	bne.n	8005c86 <__swbuf_r+0x3a>
 8005c72:	0021      	movs	r1, r4
 8005c74:	0030      	movs	r0, r6
 8005c76:	f000 f82b 	bl	8005cd0 <__swsetup_r>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d003      	beq.n	8005c86 <__swbuf_r+0x3a>
 8005c7e:	2501      	movs	r5, #1
 8005c80:	426d      	negs	r5, r5
 8005c82:	0028      	movs	r0, r5
 8005c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	6820      	ldr	r0, [r4, #0]
 8005c8a:	b2ef      	uxtb	r7, r5
 8005c8c:	1ac0      	subs	r0, r0, r3
 8005c8e:	6963      	ldr	r3, [r4, #20]
 8005c90:	b2ed      	uxtb	r5, r5
 8005c92:	4283      	cmp	r3, r0
 8005c94:	dc05      	bgt.n	8005ca2 <__swbuf_r+0x56>
 8005c96:	0021      	movs	r1, r4
 8005c98:	0030      	movs	r0, r6
 8005c9a:	f000 fd3f 	bl	800671c <_fflush_r>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d1ed      	bne.n	8005c7e <__swbuf_r+0x32>
 8005ca2:	68a3      	ldr	r3, [r4, #8]
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	60a3      	str	r3, [r4, #8]
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	6022      	str	r2, [r4, #0]
 8005cb0:	701f      	strb	r7, [r3, #0]
 8005cb2:	6963      	ldr	r3, [r4, #20]
 8005cb4:	4283      	cmp	r3, r0
 8005cb6:	d004      	beq.n	8005cc2 <__swbuf_r+0x76>
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	07db      	lsls	r3, r3, #31
 8005cbc:	d5e1      	bpl.n	8005c82 <__swbuf_r+0x36>
 8005cbe:	2d0a      	cmp	r5, #10
 8005cc0:	d1df      	bne.n	8005c82 <__swbuf_r+0x36>
 8005cc2:	0021      	movs	r1, r4
 8005cc4:	0030      	movs	r0, r6
 8005cc6:	f000 fd29 	bl	800671c <_fflush_r>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d0d9      	beq.n	8005c82 <__swbuf_r+0x36>
 8005cce:	e7d6      	b.n	8005c7e <__swbuf_r+0x32>

08005cd0 <__swsetup_r>:
 8005cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8005d88 <__swsetup_r+0xb8>)
 8005cd2:	b570      	push	{r4, r5, r6, lr}
 8005cd4:	0005      	movs	r5, r0
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	000c      	movs	r4, r1
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d004      	beq.n	8005ce8 <__swsetup_r+0x18>
 8005cde:	6a03      	ldr	r3, [r0, #32]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <__swsetup_r+0x18>
 8005ce4:	f7ff fec2 	bl	8005a6c <__sinit>
 8005ce8:	230c      	movs	r3, #12
 8005cea:	5ee2      	ldrsh	r2, [r4, r3]
 8005cec:	0713      	lsls	r3, r2, #28
 8005cee:	d423      	bmi.n	8005d38 <__swsetup_r+0x68>
 8005cf0:	06d3      	lsls	r3, r2, #27
 8005cf2:	d407      	bmi.n	8005d04 <__swsetup_r+0x34>
 8005cf4:	2309      	movs	r3, #9
 8005cf6:	602b      	str	r3, [r5, #0]
 8005cf8:	2340      	movs	r3, #64	@ 0x40
 8005cfa:	2001      	movs	r0, #1
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	4240      	negs	r0, r0
 8005d02:	e03a      	b.n	8005d7a <__swsetup_r+0xaa>
 8005d04:	0752      	lsls	r2, r2, #29
 8005d06:	d513      	bpl.n	8005d30 <__swsetup_r+0x60>
 8005d08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d0a:	2900      	cmp	r1, #0
 8005d0c:	d008      	beq.n	8005d20 <__swsetup_r+0x50>
 8005d0e:	0023      	movs	r3, r4
 8005d10:	3344      	adds	r3, #68	@ 0x44
 8005d12:	4299      	cmp	r1, r3
 8005d14:	d002      	beq.n	8005d1c <__swsetup_r+0x4c>
 8005d16:	0028      	movs	r0, r5
 8005d18:	f000 f8bc 	bl	8005e94 <_free_r>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d20:	2224      	movs	r2, #36	@ 0x24
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	4393      	bics	r3, r2
 8005d26:	81a3      	strh	r3, [r4, #12]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	6063      	str	r3, [r4, #4]
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	2308      	movs	r3, #8
 8005d32:	89a2      	ldrh	r2, [r4, #12]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	6923      	ldr	r3, [r4, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10b      	bne.n	8005d56 <__swsetup_r+0x86>
 8005d3e:	21a0      	movs	r1, #160	@ 0xa0
 8005d40:	2280      	movs	r2, #128	@ 0x80
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	0089      	lsls	r1, r1, #2
 8005d46:	0092      	lsls	r2, r2, #2
 8005d48:	400b      	ands	r3, r1
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d003      	beq.n	8005d56 <__swsetup_r+0x86>
 8005d4e:	0021      	movs	r1, r4
 8005d50:	0028      	movs	r0, r5
 8005d52:	f000 fd39 	bl	80067c8 <__smakebuf_r>
 8005d56:	230c      	movs	r3, #12
 8005d58:	5ee2      	ldrsh	r2, [r4, r3]
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	0013      	movs	r3, r2
 8005d5e:	400b      	ands	r3, r1
 8005d60:	420a      	tst	r2, r1
 8005d62:	d00b      	beq.n	8005d7c <__swsetup_r+0xac>
 8005d64:	2300      	movs	r3, #0
 8005d66:	60a3      	str	r3, [r4, #8]
 8005d68:	6963      	ldr	r3, [r4, #20]
 8005d6a:	425b      	negs	r3, r3
 8005d6c:	61a3      	str	r3, [r4, #24]
 8005d6e:	2000      	movs	r0, #0
 8005d70:	6923      	ldr	r3, [r4, #16]
 8005d72:	4283      	cmp	r3, r0
 8005d74:	d101      	bne.n	8005d7a <__swsetup_r+0xaa>
 8005d76:	0613      	lsls	r3, r2, #24
 8005d78:	d4be      	bmi.n	8005cf8 <__swsetup_r+0x28>
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}
 8005d7c:	0791      	lsls	r1, r2, #30
 8005d7e:	d400      	bmi.n	8005d82 <__swsetup_r+0xb2>
 8005d80:	6963      	ldr	r3, [r4, #20]
 8005d82:	60a3      	str	r3, [r4, #8]
 8005d84:	e7f3      	b.n	8005d6e <__swsetup_r+0x9e>
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	20000018 	.word	0x20000018

08005d8c <memset>:
 8005d8c:	0003      	movs	r3, r0
 8005d8e:	1882      	adds	r2, r0, r2
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d100      	bne.n	8005d96 <memset+0xa>
 8005d94:	4770      	bx	lr
 8005d96:	7019      	strb	r1, [r3, #0]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	e7f9      	b.n	8005d90 <memset+0x4>

08005d9c <_close_r>:
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	b570      	push	{r4, r5, r6, lr}
 8005da0:	4d06      	ldr	r5, [pc, #24]	@ (8005dbc <_close_r+0x20>)
 8005da2:	0004      	movs	r4, r0
 8005da4:	0008      	movs	r0, r1
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	f7fb fded 	bl	8001986 <_close>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d103      	bne.n	8005db8 <_close_r+0x1c>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d000      	beq.n	8005db8 <_close_r+0x1c>
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	bd70      	pop	{r4, r5, r6, pc}
 8005dba:	46c0      	nop			@ (mov r8, r8)
 8005dbc:	20000ab4 	.word	0x20000ab4

08005dc0 <_lseek_r>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	0004      	movs	r4, r0
 8005dc4:	0008      	movs	r0, r1
 8005dc6:	0011      	movs	r1, r2
 8005dc8:	001a      	movs	r2, r3
 8005dca:	2300      	movs	r3, #0
 8005dcc:	4d05      	ldr	r5, [pc, #20]	@ (8005de4 <_lseek_r+0x24>)
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	f7fb fdfa 	bl	80019c8 <_lseek>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d103      	bne.n	8005de0 <_lseek_r+0x20>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d000      	beq.n	8005de0 <_lseek_r+0x20>
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	bd70      	pop	{r4, r5, r6, pc}
 8005de2:	46c0      	nop			@ (mov r8, r8)
 8005de4:	20000ab4 	.word	0x20000ab4

08005de8 <_read_r>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	0004      	movs	r4, r0
 8005dec:	0008      	movs	r0, r1
 8005dee:	0011      	movs	r1, r2
 8005df0:	001a      	movs	r2, r3
 8005df2:	2300      	movs	r3, #0
 8005df4:	4d05      	ldr	r5, [pc, #20]	@ (8005e0c <_read_r+0x24>)
 8005df6:	602b      	str	r3, [r5, #0]
 8005df8:	f7fb fda8 	bl	800194c <_read>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d103      	bne.n	8005e08 <_read_r+0x20>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d000      	beq.n	8005e08 <_read_r+0x20>
 8005e06:	6023      	str	r3, [r4, #0]
 8005e08:	bd70      	pop	{r4, r5, r6, pc}
 8005e0a:	46c0      	nop			@ (mov r8, r8)
 8005e0c:	20000ab4 	.word	0x20000ab4

08005e10 <_write_r>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	0004      	movs	r4, r0
 8005e14:	0008      	movs	r0, r1
 8005e16:	0011      	movs	r1, r2
 8005e18:	001a      	movs	r2, r3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	4d05      	ldr	r5, [pc, #20]	@ (8005e34 <_write_r+0x24>)
 8005e1e:	602b      	str	r3, [r5, #0]
 8005e20:	f7fb fc1a 	bl	8001658 <_write>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	d103      	bne.n	8005e30 <_write_r+0x20>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d000      	beq.n	8005e30 <_write_r+0x20>
 8005e2e:	6023      	str	r3, [r4, #0]
 8005e30:	bd70      	pop	{r4, r5, r6, pc}
 8005e32:	46c0      	nop			@ (mov r8, r8)
 8005e34:	20000ab4 	.word	0x20000ab4

08005e38 <__errno>:
 8005e38:	4b01      	ldr	r3, [pc, #4]	@ (8005e40 <__errno+0x8>)
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	4770      	bx	lr
 8005e3e:	46c0      	nop			@ (mov r8, r8)
 8005e40:	20000018 	.word	0x20000018

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	2600      	movs	r6, #0
 8005e48:	4c0c      	ldr	r4, [pc, #48]	@ (8005e7c <__libc_init_array+0x38>)
 8005e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005e80 <__libc_init_array+0x3c>)
 8005e4c:	1b64      	subs	r4, r4, r5
 8005e4e:	10a4      	asrs	r4, r4, #2
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	2600      	movs	r6, #0
 8005e56:	f000 fd3b 	bl	80068d0 <_init>
 8005e5a:	4c0a      	ldr	r4, [pc, #40]	@ (8005e84 <__libc_init_array+0x40>)
 8005e5c:	4d0a      	ldr	r5, [pc, #40]	@ (8005e88 <__libc_init_array+0x44>)
 8005e5e:	1b64      	subs	r4, r4, r5
 8005e60:	10a4      	asrs	r4, r4, #2
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	00b3      	lsls	r3, r6, #2
 8005e6a:	58eb      	ldr	r3, [r5, r3]
 8005e6c:	4798      	blx	r3
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	00b3      	lsls	r3, r6, #2
 8005e74:	58eb      	ldr	r3, [r5, r3]
 8005e76:	4798      	blx	r3
 8005e78:	3601      	adds	r6, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	08006c38 	.word	0x08006c38
 8005e80:	08006c38 	.word	0x08006c38
 8005e84:	08006c3c 	.word	0x08006c3c
 8005e88:	08006c38 	.word	0x08006c38

08005e8c <__retarget_lock_init_recursive>:
 8005e8c:	4770      	bx	lr

08005e8e <__retarget_lock_acquire_recursive>:
 8005e8e:	4770      	bx	lr

08005e90 <__retarget_lock_release_recursive>:
 8005e90:	4770      	bx	lr
	...

08005e94 <_free_r>:
 8005e94:	b570      	push	{r4, r5, r6, lr}
 8005e96:	0005      	movs	r5, r0
 8005e98:	1e0c      	subs	r4, r1, #0
 8005e9a:	d010      	beq.n	8005ebe <_free_r+0x2a>
 8005e9c:	3c04      	subs	r4, #4
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	da00      	bge.n	8005ea6 <_free_r+0x12>
 8005ea4:	18e4      	adds	r4, r4, r3
 8005ea6:	0028      	movs	r0, r5
 8005ea8:	f000 f8e0 	bl	800606c <__malloc_lock>
 8005eac:	4a1d      	ldr	r2, [pc, #116]	@ (8005f24 <_free_r+0x90>)
 8005eae:	6813      	ldr	r3, [r2, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d105      	bne.n	8005ec0 <_free_r+0x2c>
 8005eb4:	6063      	str	r3, [r4, #4]
 8005eb6:	6014      	str	r4, [r2, #0]
 8005eb8:	0028      	movs	r0, r5
 8005eba:	f000 f8df 	bl	800607c <__malloc_unlock>
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	d908      	bls.n	8005ed6 <_free_r+0x42>
 8005ec4:	6820      	ldr	r0, [r4, #0]
 8005ec6:	1821      	adds	r1, r4, r0
 8005ec8:	428b      	cmp	r3, r1
 8005eca:	d1f3      	bne.n	8005eb4 <_free_r+0x20>
 8005ecc:	6819      	ldr	r1, [r3, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	1809      	adds	r1, r1, r0
 8005ed2:	6021      	str	r1, [r4, #0]
 8005ed4:	e7ee      	b.n	8005eb4 <_free_r+0x20>
 8005ed6:	001a      	movs	r2, r3
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <_free_r+0x4e>
 8005ede:	42a3      	cmp	r3, r4
 8005ee0:	d9f9      	bls.n	8005ed6 <_free_r+0x42>
 8005ee2:	6811      	ldr	r1, [r2, #0]
 8005ee4:	1850      	adds	r0, r2, r1
 8005ee6:	42a0      	cmp	r0, r4
 8005ee8:	d10b      	bne.n	8005f02 <_free_r+0x6e>
 8005eea:	6820      	ldr	r0, [r4, #0]
 8005eec:	1809      	adds	r1, r1, r0
 8005eee:	1850      	adds	r0, r2, r1
 8005ef0:	6011      	str	r1, [r2, #0]
 8005ef2:	4283      	cmp	r3, r0
 8005ef4:	d1e0      	bne.n	8005eb8 <_free_r+0x24>
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	1841      	adds	r1, r0, r1
 8005efc:	6011      	str	r1, [r2, #0]
 8005efe:	6053      	str	r3, [r2, #4]
 8005f00:	e7da      	b.n	8005eb8 <_free_r+0x24>
 8005f02:	42a0      	cmp	r0, r4
 8005f04:	d902      	bls.n	8005f0c <_free_r+0x78>
 8005f06:	230c      	movs	r3, #12
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	e7d5      	b.n	8005eb8 <_free_r+0x24>
 8005f0c:	6820      	ldr	r0, [r4, #0]
 8005f0e:	1821      	adds	r1, r4, r0
 8005f10:	428b      	cmp	r3, r1
 8005f12:	d103      	bne.n	8005f1c <_free_r+0x88>
 8005f14:	6819      	ldr	r1, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	1809      	adds	r1, r1, r0
 8005f1a:	6021      	str	r1, [r4, #0]
 8005f1c:	6063      	str	r3, [r4, #4]
 8005f1e:	6054      	str	r4, [r2, #4]
 8005f20:	e7ca      	b.n	8005eb8 <_free_r+0x24>
 8005f22:	46c0      	nop			@ (mov r8, r8)
 8005f24:	20000ac0 	.word	0x20000ac0

08005f28 <sbrk_aligned>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4e0f      	ldr	r6, [pc, #60]	@ (8005f68 <sbrk_aligned+0x40>)
 8005f2c:	000d      	movs	r5, r1
 8005f2e:	6831      	ldr	r1, [r6, #0]
 8005f30:	0004      	movs	r4, r0
 8005f32:	2900      	cmp	r1, #0
 8005f34:	d102      	bne.n	8005f3c <sbrk_aligned+0x14>
 8005f36:	f000 fcad 	bl	8006894 <_sbrk_r>
 8005f3a:	6030      	str	r0, [r6, #0]
 8005f3c:	0029      	movs	r1, r5
 8005f3e:	0020      	movs	r0, r4
 8005f40:	f000 fca8 	bl	8006894 <_sbrk_r>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d103      	bne.n	8005f50 <sbrk_aligned+0x28>
 8005f48:	2501      	movs	r5, #1
 8005f4a:	426d      	negs	r5, r5
 8005f4c:	0028      	movs	r0, r5
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	2303      	movs	r3, #3
 8005f52:	1cc5      	adds	r5, r0, #3
 8005f54:	439d      	bics	r5, r3
 8005f56:	42a8      	cmp	r0, r5
 8005f58:	d0f8      	beq.n	8005f4c <sbrk_aligned+0x24>
 8005f5a:	1a29      	subs	r1, r5, r0
 8005f5c:	0020      	movs	r0, r4
 8005f5e:	f000 fc99 	bl	8006894 <_sbrk_r>
 8005f62:	3001      	adds	r0, #1
 8005f64:	d1f2      	bne.n	8005f4c <sbrk_aligned+0x24>
 8005f66:	e7ef      	b.n	8005f48 <sbrk_aligned+0x20>
 8005f68:	20000abc 	.word	0x20000abc

08005f6c <_malloc_r>:
 8005f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f6e:	2203      	movs	r2, #3
 8005f70:	1ccb      	adds	r3, r1, #3
 8005f72:	4393      	bics	r3, r2
 8005f74:	3308      	adds	r3, #8
 8005f76:	0005      	movs	r5, r0
 8005f78:	001f      	movs	r7, r3
 8005f7a:	2b0c      	cmp	r3, #12
 8005f7c:	d234      	bcs.n	8005fe8 <_malloc_r+0x7c>
 8005f7e:	270c      	movs	r7, #12
 8005f80:	42b9      	cmp	r1, r7
 8005f82:	d833      	bhi.n	8005fec <_malloc_r+0x80>
 8005f84:	0028      	movs	r0, r5
 8005f86:	f000 f871 	bl	800606c <__malloc_lock>
 8005f8a:	4e37      	ldr	r6, [pc, #220]	@ (8006068 <_malloc_r+0xfc>)
 8005f8c:	6833      	ldr	r3, [r6, #0]
 8005f8e:	001c      	movs	r4, r3
 8005f90:	2c00      	cmp	r4, #0
 8005f92:	d12f      	bne.n	8005ff4 <_malloc_r+0x88>
 8005f94:	0039      	movs	r1, r7
 8005f96:	0028      	movs	r0, r5
 8005f98:	f7ff ffc6 	bl	8005f28 <sbrk_aligned>
 8005f9c:	0004      	movs	r4, r0
 8005f9e:	1c43      	adds	r3, r0, #1
 8005fa0:	d15f      	bne.n	8006062 <_malloc_r+0xf6>
 8005fa2:	6834      	ldr	r4, [r6, #0]
 8005fa4:	9400      	str	r4, [sp, #0]
 8005fa6:	9b00      	ldr	r3, [sp, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d14a      	bne.n	8006042 <_malloc_r+0xd6>
 8005fac:	2c00      	cmp	r4, #0
 8005fae:	d052      	beq.n	8006056 <_malloc_r+0xea>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	0028      	movs	r0, r5
 8005fb4:	18e3      	adds	r3, r4, r3
 8005fb6:	9900      	ldr	r1, [sp, #0]
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	f000 fc6b 	bl	8006894 <_sbrk_r>
 8005fbe:	9b01      	ldr	r3, [sp, #4]
 8005fc0:	4283      	cmp	r3, r0
 8005fc2:	d148      	bne.n	8006056 <_malloc_r+0xea>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	0028      	movs	r0, r5
 8005fc8:	1aff      	subs	r7, r7, r3
 8005fca:	0039      	movs	r1, r7
 8005fcc:	f7ff ffac 	bl	8005f28 <sbrk_aligned>
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d040      	beq.n	8006056 <_malloc_r+0xea>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	19db      	adds	r3, r3, r7
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	6833      	ldr	r3, [r6, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	d133      	bne.n	800604a <_malloc_r+0xde>
 8005fe2:	9b00      	ldr	r3, [sp, #0]
 8005fe4:	6033      	str	r3, [r6, #0]
 8005fe6:	e019      	b.n	800601c <_malloc_r+0xb0>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dac9      	bge.n	8005f80 <_malloc_r+0x14>
 8005fec:	230c      	movs	r3, #12
 8005fee:	602b      	str	r3, [r5, #0]
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ff4:	6821      	ldr	r1, [r4, #0]
 8005ff6:	1bc9      	subs	r1, r1, r7
 8005ff8:	d420      	bmi.n	800603c <_malloc_r+0xd0>
 8005ffa:	290b      	cmp	r1, #11
 8005ffc:	d90a      	bls.n	8006014 <_malloc_r+0xa8>
 8005ffe:	19e2      	adds	r2, r4, r7
 8006000:	6027      	str	r7, [r4, #0]
 8006002:	42a3      	cmp	r3, r4
 8006004:	d104      	bne.n	8006010 <_malloc_r+0xa4>
 8006006:	6032      	str	r2, [r6, #0]
 8006008:	6863      	ldr	r3, [r4, #4]
 800600a:	6011      	str	r1, [r2, #0]
 800600c:	6053      	str	r3, [r2, #4]
 800600e:	e005      	b.n	800601c <_malloc_r+0xb0>
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	e7f9      	b.n	8006008 <_malloc_r+0x9c>
 8006014:	6862      	ldr	r2, [r4, #4]
 8006016:	42a3      	cmp	r3, r4
 8006018:	d10e      	bne.n	8006038 <_malloc_r+0xcc>
 800601a:	6032      	str	r2, [r6, #0]
 800601c:	0028      	movs	r0, r5
 800601e:	f000 f82d 	bl	800607c <__malloc_unlock>
 8006022:	0020      	movs	r0, r4
 8006024:	2207      	movs	r2, #7
 8006026:	300b      	adds	r0, #11
 8006028:	1d23      	adds	r3, r4, #4
 800602a:	4390      	bics	r0, r2
 800602c:	1ac2      	subs	r2, r0, r3
 800602e:	4298      	cmp	r0, r3
 8006030:	d0df      	beq.n	8005ff2 <_malloc_r+0x86>
 8006032:	1a1b      	subs	r3, r3, r0
 8006034:	50a3      	str	r3, [r4, r2]
 8006036:	e7dc      	b.n	8005ff2 <_malloc_r+0x86>
 8006038:	605a      	str	r2, [r3, #4]
 800603a:	e7ef      	b.n	800601c <_malloc_r+0xb0>
 800603c:	0023      	movs	r3, r4
 800603e:	6864      	ldr	r4, [r4, #4]
 8006040:	e7a6      	b.n	8005f90 <_malloc_r+0x24>
 8006042:	9c00      	ldr	r4, [sp, #0]
 8006044:	6863      	ldr	r3, [r4, #4]
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	e7ad      	b.n	8005fa6 <_malloc_r+0x3a>
 800604a:	001a      	movs	r2, r3
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	42a3      	cmp	r3, r4
 8006050:	d1fb      	bne.n	800604a <_malloc_r+0xde>
 8006052:	2300      	movs	r3, #0
 8006054:	e7da      	b.n	800600c <_malloc_r+0xa0>
 8006056:	230c      	movs	r3, #12
 8006058:	0028      	movs	r0, r5
 800605a:	602b      	str	r3, [r5, #0]
 800605c:	f000 f80e 	bl	800607c <__malloc_unlock>
 8006060:	e7c6      	b.n	8005ff0 <_malloc_r+0x84>
 8006062:	6007      	str	r7, [r0, #0]
 8006064:	e7da      	b.n	800601c <_malloc_r+0xb0>
 8006066:	46c0      	nop			@ (mov r8, r8)
 8006068:	20000ac0 	.word	0x20000ac0

0800606c <__malloc_lock>:
 800606c:	b510      	push	{r4, lr}
 800606e:	4802      	ldr	r0, [pc, #8]	@ (8006078 <__malloc_lock+0xc>)
 8006070:	f7ff ff0d 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8006074:	bd10      	pop	{r4, pc}
 8006076:	46c0      	nop			@ (mov r8, r8)
 8006078:	20000ab8 	.word	0x20000ab8

0800607c <__malloc_unlock>:
 800607c:	b510      	push	{r4, lr}
 800607e:	4802      	ldr	r0, [pc, #8]	@ (8006088 <__malloc_unlock+0xc>)
 8006080:	f7ff ff06 	bl	8005e90 <__retarget_lock_release_recursive>
 8006084:	bd10      	pop	{r4, pc}
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	20000ab8 	.word	0x20000ab8

0800608c <__sfputc_r>:
 800608c:	6893      	ldr	r3, [r2, #8]
 800608e:	b510      	push	{r4, lr}
 8006090:	3b01      	subs	r3, #1
 8006092:	6093      	str	r3, [r2, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	da04      	bge.n	80060a2 <__sfputc_r+0x16>
 8006098:	6994      	ldr	r4, [r2, #24]
 800609a:	42a3      	cmp	r3, r4
 800609c:	db07      	blt.n	80060ae <__sfputc_r+0x22>
 800609e:	290a      	cmp	r1, #10
 80060a0:	d005      	beq.n	80060ae <__sfputc_r+0x22>
 80060a2:	6813      	ldr	r3, [r2, #0]
 80060a4:	1c58      	adds	r0, r3, #1
 80060a6:	6010      	str	r0, [r2, #0]
 80060a8:	7019      	strb	r1, [r3, #0]
 80060aa:	0008      	movs	r0, r1
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	f7ff fdcd 	bl	8005c4c <__swbuf_r>
 80060b2:	0001      	movs	r1, r0
 80060b4:	e7f9      	b.n	80060aa <__sfputc_r+0x1e>

080060b6 <__sfputs_r>:
 80060b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b8:	0006      	movs	r6, r0
 80060ba:	000f      	movs	r7, r1
 80060bc:	0014      	movs	r4, r2
 80060be:	18d5      	adds	r5, r2, r3
 80060c0:	42ac      	cmp	r4, r5
 80060c2:	d101      	bne.n	80060c8 <__sfputs_r+0x12>
 80060c4:	2000      	movs	r0, #0
 80060c6:	e007      	b.n	80060d8 <__sfputs_r+0x22>
 80060c8:	7821      	ldrb	r1, [r4, #0]
 80060ca:	003a      	movs	r2, r7
 80060cc:	0030      	movs	r0, r6
 80060ce:	f7ff ffdd 	bl	800608c <__sfputc_r>
 80060d2:	3401      	adds	r4, #1
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d1f3      	bne.n	80060c0 <__sfputs_r+0xa>
 80060d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060dc <_vfiprintf_r>:
 80060dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060de:	b0a1      	sub	sp, #132	@ 0x84
 80060e0:	000f      	movs	r7, r1
 80060e2:	0015      	movs	r5, r2
 80060e4:	001e      	movs	r6, r3
 80060e6:	9003      	str	r0, [sp, #12]
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d004      	beq.n	80060f6 <_vfiprintf_r+0x1a>
 80060ec:	6a03      	ldr	r3, [r0, #32]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <_vfiprintf_r+0x1a>
 80060f2:	f7ff fcbb 	bl	8005a6c <__sinit>
 80060f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060f8:	07db      	lsls	r3, r3, #31
 80060fa:	d405      	bmi.n	8006108 <_vfiprintf_r+0x2c>
 80060fc:	89bb      	ldrh	r3, [r7, #12]
 80060fe:	059b      	lsls	r3, r3, #22
 8006100:	d402      	bmi.n	8006108 <_vfiprintf_r+0x2c>
 8006102:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006104:	f7ff fec3 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8006108:	89bb      	ldrh	r3, [r7, #12]
 800610a:	071b      	lsls	r3, r3, #28
 800610c:	d502      	bpl.n	8006114 <_vfiprintf_r+0x38>
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d113      	bne.n	800613c <_vfiprintf_r+0x60>
 8006114:	0039      	movs	r1, r7
 8006116:	9803      	ldr	r0, [sp, #12]
 8006118:	f7ff fdda 	bl	8005cd0 <__swsetup_r>
 800611c:	2800      	cmp	r0, #0
 800611e:	d00d      	beq.n	800613c <_vfiprintf_r+0x60>
 8006120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006122:	07db      	lsls	r3, r3, #31
 8006124:	d503      	bpl.n	800612e <_vfiprintf_r+0x52>
 8006126:	2001      	movs	r0, #1
 8006128:	4240      	negs	r0, r0
 800612a:	b021      	add	sp, #132	@ 0x84
 800612c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800612e:	89bb      	ldrh	r3, [r7, #12]
 8006130:	059b      	lsls	r3, r3, #22
 8006132:	d4f8      	bmi.n	8006126 <_vfiprintf_r+0x4a>
 8006134:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006136:	f7ff feab 	bl	8005e90 <__retarget_lock_release_recursive>
 800613a:	e7f4      	b.n	8006126 <_vfiprintf_r+0x4a>
 800613c:	2300      	movs	r3, #0
 800613e:	ac08      	add	r4, sp, #32
 8006140:	6163      	str	r3, [r4, #20]
 8006142:	3320      	adds	r3, #32
 8006144:	7663      	strb	r3, [r4, #25]
 8006146:	3310      	adds	r3, #16
 8006148:	76a3      	strb	r3, [r4, #26]
 800614a:	9607      	str	r6, [sp, #28]
 800614c:	002e      	movs	r6, r5
 800614e:	7833      	ldrb	r3, [r6, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <_vfiprintf_r+0x7c>
 8006154:	2b25      	cmp	r3, #37	@ 0x25
 8006156:	d148      	bne.n	80061ea <_vfiprintf_r+0x10e>
 8006158:	1b73      	subs	r3, r6, r5
 800615a:	9305      	str	r3, [sp, #20]
 800615c:	42ae      	cmp	r6, r5
 800615e:	d00b      	beq.n	8006178 <_vfiprintf_r+0x9c>
 8006160:	002a      	movs	r2, r5
 8006162:	0039      	movs	r1, r7
 8006164:	9803      	ldr	r0, [sp, #12]
 8006166:	f7ff ffa6 	bl	80060b6 <__sfputs_r>
 800616a:	3001      	adds	r0, #1
 800616c:	d100      	bne.n	8006170 <_vfiprintf_r+0x94>
 800616e:	e0ae      	b.n	80062ce <_vfiprintf_r+0x1f2>
 8006170:	6963      	ldr	r3, [r4, #20]
 8006172:	9a05      	ldr	r2, [sp, #20]
 8006174:	189b      	adds	r3, r3, r2
 8006176:	6163      	str	r3, [r4, #20]
 8006178:	7833      	ldrb	r3, [r6, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d100      	bne.n	8006180 <_vfiprintf_r+0xa4>
 800617e:	e0a6      	b.n	80062ce <_vfiprintf_r+0x1f2>
 8006180:	2201      	movs	r2, #1
 8006182:	2300      	movs	r3, #0
 8006184:	4252      	negs	r2, r2
 8006186:	6062      	str	r2, [r4, #4]
 8006188:	a904      	add	r1, sp, #16
 800618a:	3254      	adds	r2, #84	@ 0x54
 800618c:	1852      	adds	r2, r2, r1
 800618e:	1c75      	adds	r5, r6, #1
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	60e3      	str	r3, [r4, #12]
 8006194:	60a3      	str	r3, [r4, #8]
 8006196:	7013      	strb	r3, [r2, #0]
 8006198:	65a3      	str	r3, [r4, #88]	@ 0x58
 800619a:	4b59      	ldr	r3, [pc, #356]	@ (8006300 <_vfiprintf_r+0x224>)
 800619c:	2205      	movs	r2, #5
 800619e:	0018      	movs	r0, r3
 80061a0:	7829      	ldrb	r1, [r5, #0]
 80061a2:	9305      	str	r3, [sp, #20]
 80061a4:	f000 fb88 	bl	80068b8 <memchr>
 80061a8:	1c6e      	adds	r6, r5, #1
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d11f      	bne.n	80061ee <_vfiprintf_r+0x112>
 80061ae:	6822      	ldr	r2, [r4, #0]
 80061b0:	06d3      	lsls	r3, r2, #27
 80061b2:	d504      	bpl.n	80061be <_vfiprintf_r+0xe2>
 80061b4:	2353      	movs	r3, #83	@ 0x53
 80061b6:	a904      	add	r1, sp, #16
 80061b8:	185b      	adds	r3, r3, r1
 80061ba:	2120      	movs	r1, #32
 80061bc:	7019      	strb	r1, [r3, #0]
 80061be:	0713      	lsls	r3, r2, #28
 80061c0:	d504      	bpl.n	80061cc <_vfiprintf_r+0xf0>
 80061c2:	2353      	movs	r3, #83	@ 0x53
 80061c4:	a904      	add	r1, sp, #16
 80061c6:	185b      	adds	r3, r3, r1
 80061c8:	212b      	movs	r1, #43	@ 0x2b
 80061ca:	7019      	strb	r1, [r3, #0]
 80061cc:	782b      	ldrb	r3, [r5, #0]
 80061ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80061d0:	d016      	beq.n	8006200 <_vfiprintf_r+0x124>
 80061d2:	002e      	movs	r6, r5
 80061d4:	2100      	movs	r1, #0
 80061d6:	200a      	movs	r0, #10
 80061d8:	68e3      	ldr	r3, [r4, #12]
 80061da:	7832      	ldrb	r2, [r6, #0]
 80061dc:	1c75      	adds	r5, r6, #1
 80061de:	3a30      	subs	r2, #48	@ 0x30
 80061e0:	2a09      	cmp	r2, #9
 80061e2:	d950      	bls.n	8006286 <_vfiprintf_r+0x1aa>
 80061e4:	2900      	cmp	r1, #0
 80061e6:	d111      	bne.n	800620c <_vfiprintf_r+0x130>
 80061e8:	e017      	b.n	800621a <_vfiprintf_r+0x13e>
 80061ea:	3601      	adds	r6, #1
 80061ec:	e7af      	b.n	800614e <_vfiprintf_r+0x72>
 80061ee:	9b05      	ldr	r3, [sp, #20]
 80061f0:	6822      	ldr	r2, [r4, #0]
 80061f2:	1ac0      	subs	r0, r0, r3
 80061f4:	2301      	movs	r3, #1
 80061f6:	4083      	lsls	r3, r0
 80061f8:	4313      	orrs	r3, r2
 80061fa:	0035      	movs	r5, r6
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	e7cc      	b.n	800619a <_vfiprintf_r+0xbe>
 8006200:	9b07      	ldr	r3, [sp, #28]
 8006202:	1d19      	adds	r1, r3, #4
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	9107      	str	r1, [sp, #28]
 8006208:	2b00      	cmp	r3, #0
 800620a:	db01      	blt.n	8006210 <_vfiprintf_r+0x134>
 800620c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800620e:	e004      	b.n	800621a <_vfiprintf_r+0x13e>
 8006210:	425b      	negs	r3, r3
 8006212:	60e3      	str	r3, [r4, #12]
 8006214:	2302      	movs	r3, #2
 8006216:	4313      	orrs	r3, r2
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	7833      	ldrb	r3, [r6, #0]
 800621c:	2b2e      	cmp	r3, #46	@ 0x2e
 800621e:	d10c      	bne.n	800623a <_vfiprintf_r+0x15e>
 8006220:	7873      	ldrb	r3, [r6, #1]
 8006222:	2b2a      	cmp	r3, #42	@ 0x2a
 8006224:	d134      	bne.n	8006290 <_vfiprintf_r+0x1b4>
 8006226:	9b07      	ldr	r3, [sp, #28]
 8006228:	3602      	adds	r6, #2
 800622a:	1d1a      	adds	r2, r3, #4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	9207      	str	r2, [sp, #28]
 8006230:	2b00      	cmp	r3, #0
 8006232:	da01      	bge.n	8006238 <_vfiprintf_r+0x15c>
 8006234:	2301      	movs	r3, #1
 8006236:	425b      	negs	r3, r3
 8006238:	9309      	str	r3, [sp, #36]	@ 0x24
 800623a:	4d32      	ldr	r5, [pc, #200]	@ (8006304 <_vfiprintf_r+0x228>)
 800623c:	2203      	movs	r2, #3
 800623e:	0028      	movs	r0, r5
 8006240:	7831      	ldrb	r1, [r6, #0]
 8006242:	f000 fb39 	bl	80068b8 <memchr>
 8006246:	2800      	cmp	r0, #0
 8006248:	d006      	beq.n	8006258 <_vfiprintf_r+0x17c>
 800624a:	2340      	movs	r3, #64	@ 0x40
 800624c:	1b40      	subs	r0, r0, r5
 800624e:	4083      	lsls	r3, r0
 8006250:	6822      	ldr	r2, [r4, #0]
 8006252:	3601      	adds	r6, #1
 8006254:	4313      	orrs	r3, r2
 8006256:	6023      	str	r3, [r4, #0]
 8006258:	7831      	ldrb	r1, [r6, #0]
 800625a:	2206      	movs	r2, #6
 800625c:	482a      	ldr	r0, [pc, #168]	@ (8006308 <_vfiprintf_r+0x22c>)
 800625e:	1c75      	adds	r5, r6, #1
 8006260:	7621      	strb	r1, [r4, #24]
 8006262:	f000 fb29 	bl	80068b8 <memchr>
 8006266:	2800      	cmp	r0, #0
 8006268:	d040      	beq.n	80062ec <_vfiprintf_r+0x210>
 800626a:	4b28      	ldr	r3, [pc, #160]	@ (800630c <_vfiprintf_r+0x230>)
 800626c:	2b00      	cmp	r3, #0
 800626e:	d122      	bne.n	80062b6 <_vfiprintf_r+0x1da>
 8006270:	2207      	movs	r2, #7
 8006272:	9b07      	ldr	r3, [sp, #28]
 8006274:	3307      	adds	r3, #7
 8006276:	4393      	bics	r3, r2
 8006278:	3308      	adds	r3, #8
 800627a:	9307      	str	r3, [sp, #28]
 800627c:	6963      	ldr	r3, [r4, #20]
 800627e:	9a04      	ldr	r2, [sp, #16]
 8006280:	189b      	adds	r3, r3, r2
 8006282:	6163      	str	r3, [r4, #20]
 8006284:	e762      	b.n	800614c <_vfiprintf_r+0x70>
 8006286:	4343      	muls	r3, r0
 8006288:	002e      	movs	r6, r5
 800628a:	2101      	movs	r1, #1
 800628c:	189b      	adds	r3, r3, r2
 800628e:	e7a4      	b.n	80061da <_vfiprintf_r+0xfe>
 8006290:	2300      	movs	r3, #0
 8006292:	200a      	movs	r0, #10
 8006294:	0019      	movs	r1, r3
 8006296:	3601      	adds	r6, #1
 8006298:	6063      	str	r3, [r4, #4]
 800629a:	7832      	ldrb	r2, [r6, #0]
 800629c:	1c75      	adds	r5, r6, #1
 800629e:	3a30      	subs	r2, #48	@ 0x30
 80062a0:	2a09      	cmp	r2, #9
 80062a2:	d903      	bls.n	80062ac <_vfiprintf_r+0x1d0>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0c8      	beq.n	800623a <_vfiprintf_r+0x15e>
 80062a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80062aa:	e7c6      	b.n	800623a <_vfiprintf_r+0x15e>
 80062ac:	4341      	muls	r1, r0
 80062ae:	002e      	movs	r6, r5
 80062b0:	2301      	movs	r3, #1
 80062b2:	1889      	adds	r1, r1, r2
 80062b4:	e7f1      	b.n	800629a <_vfiprintf_r+0x1be>
 80062b6:	aa07      	add	r2, sp, #28
 80062b8:	9200      	str	r2, [sp, #0]
 80062ba:	0021      	movs	r1, r4
 80062bc:	003a      	movs	r2, r7
 80062be:	4b14      	ldr	r3, [pc, #80]	@ (8006310 <_vfiprintf_r+0x234>)
 80062c0:	9803      	ldr	r0, [sp, #12]
 80062c2:	e000      	b.n	80062c6 <_vfiprintf_r+0x1ea>
 80062c4:	bf00      	nop
 80062c6:	9004      	str	r0, [sp, #16]
 80062c8:	9b04      	ldr	r3, [sp, #16]
 80062ca:	3301      	adds	r3, #1
 80062cc:	d1d6      	bne.n	800627c <_vfiprintf_r+0x1a0>
 80062ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062d0:	07db      	lsls	r3, r3, #31
 80062d2:	d405      	bmi.n	80062e0 <_vfiprintf_r+0x204>
 80062d4:	89bb      	ldrh	r3, [r7, #12]
 80062d6:	059b      	lsls	r3, r3, #22
 80062d8:	d402      	bmi.n	80062e0 <_vfiprintf_r+0x204>
 80062da:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80062dc:	f7ff fdd8 	bl	8005e90 <__retarget_lock_release_recursive>
 80062e0:	89bb      	ldrh	r3, [r7, #12]
 80062e2:	065b      	lsls	r3, r3, #25
 80062e4:	d500      	bpl.n	80062e8 <_vfiprintf_r+0x20c>
 80062e6:	e71e      	b.n	8006126 <_vfiprintf_r+0x4a>
 80062e8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80062ea:	e71e      	b.n	800612a <_vfiprintf_r+0x4e>
 80062ec:	aa07      	add	r2, sp, #28
 80062ee:	9200      	str	r2, [sp, #0]
 80062f0:	0021      	movs	r1, r4
 80062f2:	003a      	movs	r2, r7
 80062f4:	4b06      	ldr	r3, [pc, #24]	@ (8006310 <_vfiprintf_r+0x234>)
 80062f6:	9803      	ldr	r0, [sp, #12]
 80062f8:	f000 f87c 	bl	80063f4 <_printf_i>
 80062fc:	e7e3      	b.n	80062c6 <_vfiprintf_r+0x1ea>
 80062fe:	46c0      	nop			@ (mov r8, r8)
 8006300:	08006bfc 	.word	0x08006bfc
 8006304:	08006c02 	.word	0x08006c02
 8006308:	08006c06 	.word	0x08006c06
 800630c:	00000000 	.word	0x00000000
 8006310:	080060b7 	.word	0x080060b7

08006314 <_printf_common>:
 8006314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006316:	0016      	movs	r6, r2
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	688a      	ldr	r2, [r1, #8]
 800631c:	690b      	ldr	r3, [r1, #16]
 800631e:	000c      	movs	r4, r1
 8006320:	9000      	str	r0, [sp, #0]
 8006322:	4293      	cmp	r3, r2
 8006324:	da00      	bge.n	8006328 <_printf_common+0x14>
 8006326:	0013      	movs	r3, r2
 8006328:	0022      	movs	r2, r4
 800632a:	6033      	str	r3, [r6, #0]
 800632c:	3243      	adds	r2, #67	@ 0x43
 800632e:	7812      	ldrb	r2, [r2, #0]
 8006330:	2a00      	cmp	r2, #0
 8006332:	d001      	beq.n	8006338 <_printf_common+0x24>
 8006334:	3301      	adds	r3, #1
 8006336:	6033      	str	r3, [r6, #0]
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	069b      	lsls	r3, r3, #26
 800633c:	d502      	bpl.n	8006344 <_printf_common+0x30>
 800633e:	6833      	ldr	r3, [r6, #0]
 8006340:	3302      	adds	r3, #2
 8006342:	6033      	str	r3, [r6, #0]
 8006344:	6822      	ldr	r2, [r4, #0]
 8006346:	2306      	movs	r3, #6
 8006348:	0015      	movs	r5, r2
 800634a:	401d      	ands	r5, r3
 800634c:	421a      	tst	r2, r3
 800634e:	d027      	beq.n	80063a0 <_printf_common+0x8c>
 8006350:	0023      	movs	r3, r4
 8006352:	3343      	adds	r3, #67	@ 0x43
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	1e5a      	subs	r2, r3, #1
 8006358:	4193      	sbcs	r3, r2
 800635a:	6822      	ldr	r2, [r4, #0]
 800635c:	0692      	lsls	r2, r2, #26
 800635e:	d430      	bmi.n	80063c2 <_printf_common+0xae>
 8006360:	0022      	movs	r2, r4
 8006362:	9901      	ldr	r1, [sp, #4]
 8006364:	9800      	ldr	r0, [sp, #0]
 8006366:	9d08      	ldr	r5, [sp, #32]
 8006368:	3243      	adds	r2, #67	@ 0x43
 800636a:	47a8      	blx	r5
 800636c:	3001      	adds	r0, #1
 800636e:	d025      	beq.n	80063bc <_printf_common+0xa8>
 8006370:	2206      	movs	r2, #6
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	2500      	movs	r5, #0
 8006376:	4013      	ands	r3, r2
 8006378:	2b04      	cmp	r3, #4
 800637a:	d105      	bne.n	8006388 <_printf_common+0x74>
 800637c:	6833      	ldr	r3, [r6, #0]
 800637e:	68e5      	ldr	r5, [r4, #12]
 8006380:	1aed      	subs	r5, r5, r3
 8006382:	43eb      	mvns	r3, r5
 8006384:	17db      	asrs	r3, r3, #31
 8006386:	401d      	ands	r5, r3
 8006388:	68a3      	ldr	r3, [r4, #8]
 800638a:	6922      	ldr	r2, [r4, #16]
 800638c:	4293      	cmp	r3, r2
 800638e:	dd01      	ble.n	8006394 <_printf_common+0x80>
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	18ed      	adds	r5, r5, r3
 8006394:	2600      	movs	r6, #0
 8006396:	42b5      	cmp	r5, r6
 8006398:	d120      	bne.n	80063dc <_printf_common+0xc8>
 800639a:	2000      	movs	r0, #0
 800639c:	e010      	b.n	80063c0 <_printf_common+0xac>
 800639e:	3501      	adds	r5, #1
 80063a0:	68e3      	ldr	r3, [r4, #12]
 80063a2:	6832      	ldr	r2, [r6, #0]
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	42ab      	cmp	r3, r5
 80063a8:	ddd2      	ble.n	8006350 <_printf_common+0x3c>
 80063aa:	0022      	movs	r2, r4
 80063ac:	2301      	movs	r3, #1
 80063ae:	9901      	ldr	r1, [sp, #4]
 80063b0:	9800      	ldr	r0, [sp, #0]
 80063b2:	9f08      	ldr	r7, [sp, #32]
 80063b4:	3219      	adds	r2, #25
 80063b6:	47b8      	blx	r7
 80063b8:	3001      	adds	r0, #1
 80063ba:	d1f0      	bne.n	800639e <_printf_common+0x8a>
 80063bc:	2001      	movs	r0, #1
 80063be:	4240      	negs	r0, r0
 80063c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063c2:	2030      	movs	r0, #48	@ 0x30
 80063c4:	18e1      	adds	r1, r4, r3
 80063c6:	3143      	adds	r1, #67	@ 0x43
 80063c8:	7008      	strb	r0, [r1, #0]
 80063ca:	0021      	movs	r1, r4
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	3145      	adds	r1, #69	@ 0x45
 80063d0:	7809      	ldrb	r1, [r1, #0]
 80063d2:	18a2      	adds	r2, r4, r2
 80063d4:	3243      	adds	r2, #67	@ 0x43
 80063d6:	3302      	adds	r3, #2
 80063d8:	7011      	strb	r1, [r2, #0]
 80063da:	e7c1      	b.n	8006360 <_printf_common+0x4c>
 80063dc:	0022      	movs	r2, r4
 80063de:	2301      	movs	r3, #1
 80063e0:	9901      	ldr	r1, [sp, #4]
 80063e2:	9800      	ldr	r0, [sp, #0]
 80063e4:	9f08      	ldr	r7, [sp, #32]
 80063e6:	321a      	adds	r2, #26
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	d0e6      	beq.n	80063bc <_printf_common+0xa8>
 80063ee:	3601      	adds	r6, #1
 80063f0:	e7d1      	b.n	8006396 <_printf_common+0x82>
	...

080063f4 <_printf_i>:
 80063f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063f6:	b08b      	sub	sp, #44	@ 0x2c
 80063f8:	9206      	str	r2, [sp, #24]
 80063fa:	000a      	movs	r2, r1
 80063fc:	3243      	adds	r2, #67	@ 0x43
 80063fe:	9307      	str	r3, [sp, #28]
 8006400:	9005      	str	r0, [sp, #20]
 8006402:	9203      	str	r2, [sp, #12]
 8006404:	7e0a      	ldrb	r2, [r1, #24]
 8006406:	000c      	movs	r4, r1
 8006408:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800640a:	2a78      	cmp	r2, #120	@ 0x78
 800640c:	d809      	bhi.n	8006422 <_printf_i+0x2e>
 800640e:	2a62      	cmp	r2, #98	@ 0x62
 8006410:	d80b      	bhi.n	800642a <_printf_i+0x36>
 8006412:	2a00      	cmp	r2, #0
 8006414:	d100      	bne.n	8006418 <_printf_i+0x24>
 8006416:	e0bc      	b.n	8006592 <_printf_i+0x19e>
 8006418:	497b      	ldr	r1, [pc, #492]	@ (8006608 <_printf_i+0x214>)
 800641a:	9104      	str	r1, [sp, #16]
 800641c:	2a58      	cmp	r2, #88	@ 0x58
 800641e:	d100      	bne.n	8006422 <_printf_i+0x2e>
 8006420:	e090      	b.n	8006544 <_printf_i+0x150>
 8006422:	0025      	movs	r5, r4
 8006424:	3542      	adds	r5, #66	@ 0x42
 8006426:	702a      	strb	r2, [r5, #0]
 8006428:	e022      	b.n	8006470 <_printf_i+0x7c>
 800642a:	0010      	movs	r0, r2
 800642c:	3863      	subs	r0, #99	@ 0x63
 800642e:	2815      	cmp	r0, #21
 8006430:	d8f7      	bhi.n	8006422 <_printf_i+0x2e>
 8006432:	f7f9 fe69 	bl	8000108 <__gnu_thumb1_case_shi>
 8006436:	0016      	.short	0x0016
 8006438:	fff6001f 	.word	0xfff6001f
 800643c:	fff6fff6 	.word	0xfff6fff6
 8006440:	001ffff6 	.word	0x001ffff6
 8006444:	fff6fff6 	.word	0xfff6fff6
 8006448:	fff6fff6 	.word	0xfff6fff6
 800644c:	003600a1 	.word	0x003600a1
 8006450:	fff60080 	.word	0xfff60080
 8006454:	00b2fff6 	.word	0x00b2fff6
 8006458:	0036fff6 	.word	0x0036fff6
 800645c:	fff6fff6 	.word	0xfff6fff6
 8006460:	0084      	.short	0x0084
 8006462:	0025      	movs	r5, r4
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	3542      	adds	r5, #66	@ 0x42
 8006468:	1d11      	adds	r1, r2, #4
 800646a:	6019      	str	r1, [r3, #0]
 800646c:	6813      	ldr	r3, [r2, #0]
 800646e:	702b      	strb	r3, [r5, #0]
 8006470:	2301      	movs	r3, #1
 8006472:	e0a0      	b.n	80065b6 <_printf_i+0x1c2>
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	6809      	ldr	r1, [r1, #0]
 8006478:	1d02      	adds	r2, r0, #4
 800647a:	060d      	lsls	r5, r1, #24
 800647c:	d50b      	bpl.n	8006496 <_printf_i+0xa2>
 800647e:	6806      	ldr	r6, [r0, #0]
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	2e00      	cmp	r6, #0
 8006484:	da03      	bge.n	800648e <_printf_i+0x9a>
 8006486:	232d      	movs	r3, #45	@ 0x2d
 8006488:	9a03      	ldr	r2, [sp, #12]
 800648a:	4276      	negs	r6, r6
 800648c:	7013      	strb	r3, [r2, #0]
 800648e:	4b5e      	ldr	r3, [pc, #376]	@ (8006608 <_printf_i+0x214>)
 8006490:	270a      	movs	r7, #10
 8006492:	9304      	str	r3, [sp, #16]
 8006494:	e018      	b.n	80064c8 <_printf_i+0xd4>
 8006496:	6806      	ldr	r6, [r0, #0]
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	0649      	lsls	r1, r1, #25
 800649c:	d5f1      	bpl.n	8006482 <_printf_i+0x8e>
 800649e:	b236      	sxth	r6, r6
 80064a0:	e7ef      	b.n	8006482 <_printf_i+0x8e>
 80064a2:	6808      	ldr	r0, [r1, #0]
 80064a4:	6819      	ldr	r1, [r3, #0]
 80064a6:	c940      	ldmia	r1!, {r6}
 80064a8:	0605      	lsls	r5, r0, #24
 80064aa:	d402      	bmi.n	80064b2 <_printf_i+0xbe>
 80064ac:	0640      	lsls	r0, r0, #25
 80064ae:	d500      	bpl.n	80064b2 <_printf_i+0xbe>
 80064b0:	b2b6      	uxth	r6, r6
 80064b2:	6019      	str	r1, [r3, #0]
 80064b4:	4b54      	ldr	r3, [pc, #336]	@ (8006608 <_printf_i+0x214>)
 80064b6:	270a      	movs	r7, #10
 80064b8:	9304      	str	r3, [sp, #16]
 80064ba:	2a6f      	cmp	r2, #111	@ 0x6f
 80064bc:	d100      	bne.n	80064c0 <_printf_i+0xcc>
 80064be:	3f02      	subs	r7, #2
 80064c0:	0023      	movs	r3, r4
 80064c2:	2200      	movs	r2, #0
 80064c4:	3343      	adds	r3, #67	@ 0x43
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	60a3      	str	r3, [r4, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	db03      	blt.n	80064d8 <_printf_i+0xe4>
 80064d0:	2104      	movs	r1, #4
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	438a      	bics	r2, r1
 80064d6:	6022      	str	r2, [r4, #0]
 80064d8:	2e00      	cmp	r6, #0
 80064da:	d102      	bne.n	80064e2 <_printf_i+0xee>
 80064dc:	9d03      	ldr	r5, [sp, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00c      	beq.n	80064fc <_printf_i+0x108>
 80064e2:	9d03      	ldr	r5, [sp, #12]
 80064e4:	0030      	movs	r0, r6
 80064e6:	0039      	movs	r1, r7
 80064e8:	f7f9 fe9e 	bl	8000228 <__aeabi_uidivmod>
 80064ec:	9b04      	ldr	r3, [sp, #16]
 80064ee:	3d01      	subs	r5, #1
 80064f0:	5c5b      	ldrb	r3, [r3, r1]
 80064f2:	702b      	strb	r3, [r5, #0]
 80064f4:	0033      	movs	r3, r6
 80064f6:	0006      	movs	r6, r0
 80064f8:	429f      	cmp	r7, r3
 80064fa:	d9f3      	bls.n	80064e4 <_printf_i+0xf0>
 80064fc:	2f08      	cmp	r7, #8
 80064fe:	d109      	bne.n	8006514 <_printf_i+0x120>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	07db      	lsls	r3, r3, #31
 8006504:	d506      	bpl.n	8006514 <_printf_i+0x120>
 8006506:	6862      	ldr	r2, [r4, #4]
 8006508:	6923      	ldr	r3, [r4, #16]
 800650a:	429a      	cmp	r2, r3
 800650c:	dc02      	bgt.n	8006514 <_printf_i+0x120>
 800650e:	2330      	movs	r3, #48	@ 0x30
 8006510:	3d01      	subs	r5, #1
 8006512:	702b      	strb	r3, [r5, #0]
 8006514:	9b03      	ldr	r3, [sp, #12]
 8006516:	1b5b      	subs	r3, r3, r5
 8006518:	6123      	str	r3, [r4, #16]
 800651a:	9b07      	ldr	r3, [sp, #28]
 800651c:	0021      	movs	r1, r4
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	9805      	ldr	r0, [sp, #20]
 8006522:	9b06      	ldr	r3, [sp, #24]
 8006524:	aa09      	add	r2, sp, #36	@ 0x24
 8006526:	f7ff fef5 	bl	8006314 <_printf_common>
 800652a:	3001      	adds	r0, #1
 800652c:	d148      	bne.n	80065c0 <_printf_i+0x1cc>
 800652e:	2001      	movs	r0, #1
 8006530:	4240      	negs	r0, r0
 8006532:	b00b      	add	sp, #44	@ 0x2c
 8006534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006536:	2220      	movs	r2, #32
 8006538:	6809      	ldr	r1, [r1, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	6022      	str	r2, [r4, #0]
 800653e:	2278      	movs	r2, #120	@ 0x78
 8006540:	4932      	ldr	r1, [pc, #200]	@ (800660c <_printf_i+0x218>)
 8006542:	9104      	str	r1, [sp, #16]
 8006544:	0021      	movs	r1, r4
 8006546:	3145      	adds	r1, #69	@ 0x45
 8006548:	700a      	strb	r2, [r1, #0]
 800654a:	6819      	ldr	r1, [r3, #0]
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	c940      	ldmia	r1!, {r6}
 8006550:	0610      	lsls	r0, r2, #24
 8006552:	d402      	bmi.n	800655a <_printf_i+0x166>
 8006554:	0650      	lsls	r0, r2, #25
 8006556:	d500      	bpl.n	800655a <_printf_i+0x166>
 8006558:	b2b6      	uxth	r6, r6
 800655a:	6019      	str	r1, [r3, #0]
 800655c:	07d3      	lsls	r3, r2, #31
 800655e:	d502      	bpl.n	8006566 <_printf_i+0x172>
 8006560:	2320      	movs	r3, #32
 8006562:	4313      	orrs	r3, r2
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	2e00      	cmp	r6, #0
 8006568:	d001      	beq.n	800656e <_printf_i+0x17a>
 800656a:	2710      	movs	r7, #16
 800656c:	e7a8      	b.n	80064c0 <_printf_i+0xcc>
 800656e:	2220      	movs	r2, #32
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	4393      	bics	r3, r2
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	e7f8      	b.n	800656a <_printf_i+0x176>
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	680d      	ldr	r5, [r1, #0]
 800657c:	1d10      	adds	r0, r2, #4
 800657e:	6949      	ldr	r1, [r1, #20]
 8006580:	6018      	str	r0, [r3, #0]
 8006582:	6813      	ldr	r3, [r2, #0]
 8006584:	062e      	lsls	r6, r5, #24
 8006586:	d501      	bpl.n	800658c <_printf_i+0x198>
 8006588:	6019      	str	r1, [r3, #0]
 800658a:	e002      	b.n	8006592 <_printf_i+0x19e>
 800658c:	066d      	lsls	r5, r5, #25
 800658e:	d5fb      	bpl.n	8006588 <_printf_i+0x194>
 8006590:	8019      	strh	r1, [r3, #0]
 8006592:	2300      	movs	r3, #0
 8006594:	9d03      	ldr	r5, [sp, #12]
 8006596:	6123      	str	r3, [r4, #16]
 8006598:	e7bf      	b.n	800651a <_printf_i+0x126>
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	1d11      	adds	r1, r2, #4
 800659e:	6019      	str	r1, [r3, #0]
 80065a0:	6815      	ldr	r5, [r2, #0]
 80065a2:	2100      	movs	r1, #0
 80065a4:	0028      	movs	r0, r5
 80065a6:	6862      	ldr	r2, [r4, #4]
 80065a8:	f000 f986 	bl	80068b8 <memchr>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d001      	beq.n	80065b4 <_printf_i+0x1c0>
 80065b0:	1b40      	subs	r0, r0, r5
 80065b2:	6060      	str	r0, [r4, #4]
 80065b4:	6863      	ldr	r3, [r4, #4]
 80065b6:	6123      	str	r3, [r4, #16]
 80065b8:	2300      	movs	r3, #0
 80065ba:	9a03      	ldr	r2, [sp, #12]
 80065bc:	7013      	strb	r3, [r2, #0]
 80065be:	e7ac      	b.n	800651a <_printf_i+0x126>
 80065c0:	002a      	movs	r2, r5
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	9906      	ldr	r1, [sp, #24]
 80065c6:	9805      	ldr	r0, [sp, #20]
 80065c8:	9d07      	ldr	r5, [sp, #28]
 80065ca:	47a8      	blx	r5
 80065cc:	3001      	adds	r0, #1
 80065ce:	d0ae      	beq.n	800652e <_printf_i+0x13a>
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	079b      	lsls	r3, r3, #30
 80065d4:	d415      	bmi.n	8006602 <_printf_i+0x20e>
 80065d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d8:	68e0      	ldr	r0, [r4, #12]
 80065da:	4298      	cmp	r0, r3
 80065dc:	daa9      	bge.n	8006532 <_printf_i+0x13e>
 80065de:	0018      	movs	r0, r3
 80065e0:	e7a7      	b.n	8006532 <_printf_i+0x13e>
 80065e2:	0022      	movs	r2, r4
 80065e4:	2301      	movs	r3, #1
 80065e6:	9906      	ldr	r1, [sp, #24]
 80065e8:	9805      	ldr	r0, [sp, #20]
 80065ea:	9e07      	ldr	r6, [sp, #28]
 80065ec:	3219      	adds	r2, #25
 80065ee:	47b0      	blx	r6
 80065f0:	3001      	adds	r0, #1
 80065f2:	d09c      	beq.n	800652e <_printf_i+0x13a>
 80065f4:	3501      	adds	r5, #1
 80065f6:	68e3      	ldr	r3, [r4, #12]
 80065f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065fa:	1a9b      	subs	r3, r3, r2
 80065fc:	42ab      	cmp	r3, r5
 80065fe:	dcf0      	bgt.n	80065e2 <_printf_i+0x1ee>
 8006600:	e7e9      	b.n	80065d6 <_printf_i+0x1e2>
 8006602:	2500      	movs	r5, #0
 8006604:	e7f7      	b.n	80065f6 <_printf_i+0x202>
 8006606:	46c0      	nop			@ (mov r8, r8)
 8006608:	08006c0d 	.word	0x08006c0d
 800660c:	08006c1e 	.word	0x08006c1e

08006610 <__sflush_r>:
 8006610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006612:	220c      	movs	r2, #12
 8006614:	5e8b      	ldrsh	r3, [r1, r2]
 8006616:	0005      	movs	r5, r0
 8006618:	000c      	movs	r4, r1
 800661a:	071a      	lsls	r2, r3, #28
 800661c:	d456      	bmi.n	80066cc <__sflush_r+0xbc>
 800661e:	684a      	ldr	r2, [r1, #4]
 8006620:	2a00      	cmp	r2, #0
 8006622:	dc02      	bgt.n	800662a <__sflush_r+0x1a>
 8006624:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006626:	2a00      	cmp	r2, #0
 8006628:	dd4e      	ble.n	80066c8 <__sflush_r+0xb8>
 800662a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800662c:	2f00      	cmp	r7, #0
 800662e:	d04b      	beq.n	80066c8 <__sflush_r+0xb8>
 8006630:	2200      	movs	r2, #0
 8006632:	2080      	movs	r0, #128	@ 0x80
 8006634:	682e      	ldr	r6, [r5, #0]
 8006636:	602a      	str	r2, [r5, #0]
 8006638:	001a      	movs	r2, r3
 800663a:	0140      	lsls	r0, r0, #5
 800663c:	6a21      	ldr	r1, [r4, #32]
 800663e:	4002      	ands	r2, r0
 8006640:	4203      	tst	r3, r0
 8006642:	d033      	beq.n	80066ac <__sflush_r+0x9c>
 8006644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	075b      	lsls	r3, r3, #29
 800664a:	d506      	bpl.n	800665a <__sflush_r+0x4a>
 800664c:	6863      	ldr	r3, [r4, #4]
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <__sflush_r+0x4a>
 8006656:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006658:	1ad2      	subs	r2, r2, r3
 800665a:	2300      	movs	r3, #0
 800665c:	0028      	movs	r0, r5
 800665e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006660:	6a21      	ldr	r1, [r4, #32]
 8006662:	47b8      	blx	r7
 8006664:	89a2      	ldrh	r2, [r4, #12]
 8006666:	1c43      	adds	r3, r0, #1
 8006668:	d106      	bne.n	8006678 <__sflush_r+0x68>
 800666a:	6829      	ldr	r1, [r5, #0]
 800666c:	291d      	cmp	r1, #29
 800666e:	d846      	bhi.n	80066fe <__sflush_r+0xee>
 8006670:	4b29      	ldr	r3, [pc, #164]	@ (8006718 <__sflush_r+0x108>)
 8006672:	410b      	asrs	r3, r1
 8006674:	07db      	lsls	r3, r3, #31
 8006676:	d442      	bmi.n	80066fe <__sflush_r+0xee>
 8006678:	2300      	movs	r3, #0
 800667a:	6063      	str	r3, [r4, #4]
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	6023      	str	r3, [r4, #0]
 8006680:	04d2      	lsls	r2, r2, #19
 8006682:	d505      	bpl.n	8006690 <__sflush_r+0x80>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <__sflush_r+0x7e>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d100      	bne.n	8006690 <__sflush_r+0x80>
 800668e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006690:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006692:	602e      	str	r6, [r5, #0]
 8006694:	2900      	cmp	r1, #0
 8006696:	d017      	beq.n	80066c8 <__sflush_r+0xb8>
 8006698:	0023      	movs	r3, r4
 800669a:	3344      	adds	r3, #68	@ 0x44
 800669c:	4299      	cmp	r1, r3
 800669e:	d002      	beq.n	80066a6 <__sflush_r+0x96>
 80066a0:	0028      	movs	r0, r5
 80066a2:	f7ff fbf7 	bl	8005e94 <_free_r>
 80066a6:	2300      	movs	r3, #0
 80066a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80066aa:	e00d      	b.n	80066c8 <__sflush_r+0xb8>
 80066ac:	2301      	movs	r3, #1
 80066ae:	0028      	movs	r0, r5
 80066b0:	47b8      	blx	r7
 80066b2:	0002      	movs	r2, r0
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d1c6      	bne.n	8006646 <__sflush_r+0x36>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0c3      	beq.n	8006646 <__sflush_r+0x36>
 80066be:	2b1d      	cmp	r3, #29
 80066c0:	d001      	beq.n	80066c6 <__sflush_r+0xb6>
 80066c2:	2b16      	cmp	r3, #22
 80066c4:	d11a      	bne.n	80066fc <__sflush_r+0xec>
 80066c6:	602e      	str	r6, [r5, #0]
 80066c8:	2000      	movs	r0, #0
 80066ca:	e01e      	b.n	800670a <__sflush_r+0xfa>
 80066cc:	690e      	ldr	r6, [r1, #16]
 80066ce:	2e00      	cmp	r6, #0
 80066d0:	d0fa      	beq.n	80066c8 <__sflush_r+0xb8>
 80066d2:	680f      	ldr	r7, [r1, #0]
 80066d4:	600e      	str	r6, [r1, #0]
 80066d6:	1bba      	subs	r2, r7, r6
 80066d8:	9201      	str	r2, [sp, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	079b      	lsls	r3, r3, #30
 80066de:	d100      	bne.n	80066e2 <__sflush_r+0xd2>
 80066e0:	694a      	ldr	r2, [r1, #20]
 80066e2:	60a2      	str	r2, [r4, #8]
 80066e4:	9b01      	ldr	r3, [sp, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	ddee      	ble.n	80066c8 <__sflush_r+0xb8>
 80066ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80066ec:	0032      	movs	r2, r6
 80066ee:	001f      	movs	r7, r3
 80066f0:	0028      	movs	r0, r5
 80066f2:	9b01      	ldr	r3, [sp, #4]
 80066f4:	6a21      	ldr	r1, [r4, #32]
 80066f6:	47b8      	blx	r7
 80066f8:	2800      	cmp	r0, #0
 80066fa:	dc07      	bgt.n	800670c <__sflush_r+0xfc>
 80066fc:	89a2      	ldrh	r2, [r4, #12]
 80066fe:	2340      	movs	r3, #64	@ 0x40
 8006700:	2001      	movs	r0, #1
 8006702:	4313      	orrs	r3, r2
 8006704:	b21b      	sxth	r3, r3
 8006706:	81a3      	strh	r3, [r4, #12]
 8006708:	4240      	negs	r0, r0
 800670a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800670c:	9b01      	ldr	r3, [sp, #4]
 800670e:	1836      	adds	r6, r6, r0
 8006710:	1a1b      	subs	r3, r3, r0
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	e7e6      	b.n	80066e4 <__sflush_r+0xd4>
 8006716:	46c0      	nop			@ (mov r8, r8)
 8006718:	dfbffffe 	.word	0xdfbffffe

0800671c <_fflush_r>:
 800671c:	690b      	ldr	r3, [r1, #16]
 800671e:	b570      	push	{r4, r5, r6, lr}
 8006720:	0005      	movs	r5, r0
 8006722:	000c      	movs	r4, r1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d102      	bne.n	800672e <_fflush_r+0x12>
 8006728:	2500      	movs	r5, #0
 800672a:	0028      	movs	r0, r5
 800672c:	bd70      	pop	{r4, r5, r6, pc}
 800672e:	2800      	cmp	r0, #0
 8006730:	d004      	beq.n	800673c <_fflush_r+0x20>
 8006732:	6a03      	ldr	r3, [r0, #32]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <_fflush_r+0x20>
 8006738:	f7ff f998 	bl	8005a6c <__sinit>
 800673c:	220c      	movs	r2, #12
 800673e:	5ea3      	ldrsh	r3, [r4, r2]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0f1      	beq.n	8006728 <_fflush_r+0xc>
 8006744:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006746:	07d2      	lsls	r2, r2, #31
 8006748:	d404      	bmi.n	8006754 <_fflush_r+0x38>
 800674a:	059b      	lsls	r3, r3, #22
 800674c:	d402      	bmi.n	8006754 <_fflush_r+0x38>
 800674e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006750:	f7ff fb9d 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8006754:	0028      	movs	r0, r5
 8006756:	0021      	movs	r1, r4
 8006758:	f7ff ff5a 	bl	8006610 <__sflush_r>
 800675c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800675e:	0005      	movs	r5, r0
 8006760:	07db      	lsls	r3, r3, #31
 8006762:	d4e2      	bmi.n	800672a <_fflush_r+0xe>
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	059b      	lsls	r3, r3, #22
 8006768:	d4df      	bmi.n	800672a <_fflush_r+0xe>
 800676a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800676c:	f7ff fb90 	bl	8005e90 <__retarget_lock_release_recursive>
 8006770:	e7db      	b.n	800672a <_fflush_r+0xe>
	...

08006774 <__swhatbuf_r>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	000e      	movs	r6, r1
 8006778:	001d      	movs	r5, r3
 800677a:	230e      	movs	r3, #14
 800677c:	5ec9      	ldrsh	r1, [r1, r3]
 800677e:	0014      	movs	r4, r2
 8006780:	b096      	sub	sp, #88	@ 0x58
 8006782:	2900      	cmp	r1, #0
 8006784:	da0c      	bge.n	80067a0 <__swhatbuf_r+0x2c>
 8006786:	89b2      	ldrh	r2, [r6, #12]
 8006788:	2380      	movs	r3, #128	@ 0x80
 800678a:	0011      	movs	r1, r2
 800678c:	4019      	ands	r1, r3
 800678e:	421a      	tst	r2, r3
 8006790:	d114      	bne.n	80067bc <__swhatbuf_r+0x48>
 8006792:	2380      	movs	r3, #128	@ 0x80
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	2000      	movs	r0, #0
 8006798:	6029      	str	r1, [r5, #0]
 800679a:	6023      	str	r3, [r4, #0]
 800679c:	b016      	add	sp, #88	@ 0x58
 800679e:	bd70      	pop	{r4, r5, r6, pc}
 80067a0:	466a      	mov	r2, sp
 80067a2:	f000 f853 	bl	800684c <_fstat_r>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	dbed      	blt.n	8006786 <__swhatbuf_r+0x12>
 80067aa:	23f0      	movs	r3, #240	@ 0xf0
 80067ac:	9901      	ldr	r1, [sp, #4]
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	4019      	ands	r1, r3
 80067b2:	4b04      	ldr	r3, [pc, #16]	@ (80067c4 <__swhatbuf_r+0x50>)
 80067b4:	18c9      	adds	r1, r1, r3
 80067b6:	424b      	negs	r3, r1
 80067b8:	4159      	adcs	r1, r3
 80067ba:	e7ea      	b.n	8006792 <__swhatbuf_r+0x1e>
 80067bc:	2100      	movs	r1, #0
 80067be:	2340      	movs	r3, #64	@ 0x40
 80067c0:	e7e9      	b.n	8006796 <__swhatbuf_r+0x22>
 80067c2:	46c0      	nop			@ (mov r8, r8)
 80067c4:	ffffe000 	.word	0xffffe000

080067c8 <__smakebuf_r>:
 80067c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ca:	2602      	movs	r6, #2
 80067cc:	898b      	ldrh	r3, [r1, #12]
 80067ce:	0005      	movs	r5, r0
 80067d0:	000c      	movs	r4, r1
 80067d2:	b085      	sub	sp, #20
 80067d4:	4233      	tst	r3, r6
 80067d6:	d007      	beq.n	80067e8 <__smakebuf_r+0x20>
 80067d8:	0023      	movs	r3, r4
 80067da:	3347      	adds	r3, #71	@ 0x47
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	6123      	str	r3, [r4, #16]
 80067e0:	2301      	movs	r3, #1
 80067e2:	6163      	str	r3, [r4, #20]
 80067e4:	b005      	add	sp, #20
 80067e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e8:	ab03      	add	r3, sp, #12
 80067ea:	aa02      	add	r2, sp, #8
 80067ec:	f7ff ffc2 	bl	8006774 <__swhatbuf_r>
 80067f0:	9f02      	ldr	r7, [sp, #8]
 80067f2:	9001      	str	r0, [sp, #4]
 80067f4:	0039      	movs	r1, r7
 80067f6:	0028      	movs	r0, r5
 80067f8:	f7ff fbb8 	bl	8005f6c <_malloc_r>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d108      	bne.n	8006812 <__smakebuf_r+0x4a>
 8006800:	220c      	movs	r2, #12
 8006802:	5ea3      	ldrsh	r3, [r4, r2]
 8006804:	059a      	lsls	r2, r3, #22
 8006806:	d4ed      	bmi.n	80067e4 <__smakebuf_r+0x1c>
 8006808:	2203      	movs	r2, #3
 800680a:	4393      	bics	r3, r2
 800680c:	431e      	orrs	r6, r3
 800680e:	81a6      	strh	r6, [r4, #12]
 8006810:	e7e2      	b.n	80067d8 <__smakebuf_r+0x10>
 8006812:	2380      	movs	r3, #128	@ 0x80
 8006814:	89a2      	ldrh	r2, [r4, #12]
 8006816:	6020      	str	r0, [r4, #0]
 8006818:	4313      	orrs	r3, r2
 800681a:	81a3      	strh	r3, [r4, #12]
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	6120      	str	r0, [r4, #16]
 8006820:	6167      	str	r7, [r4, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00c      	beq.n	8006840 <__smakebuf_r+0x78>
 8006826:	0028      	movs	r0, r5
 8006828:	230e      	movs	r3, #14
 800682a:	5ee1      	ldrsh	r1, [r4, r3]
 800682c:	f000 f820 	bl	8006870 <_isatty_r>
 8006830:	2800      	cmp	r0, #0
 8006832:	d005      	beq.n	8006840 <__smakebuf_r+0x78>
 8006834:	2303      	movs	r3, #3
 8006836:	89a2      	ldrh	r2, [r4, #12]
 8006838:	439a      	bics	r2, r3
 800683a:	3b02      	subs	r3, #2
 800683c:	4313      	orrs	r3, r2
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	9a01      	ldr	r2, [sp, #4]
 8006844:	4313      	orrs	r3, r2
 8006846:	81a3      	strh	r3, [r4, #12]
 8006848:	e7cc      	b.n	80067e4 <__smakebuf_r+0x1c>
	...

0800684c <_fstat_r>:
 800684c:	2300      	movs	r3, #0
 800684e:	b570      	push	{r4, r5, r6, lr}
 8006850:	4d06      	ldr	r5, [pc, #24]	@ (800686c <_fstat_r+0x20>)
 8006852:	0004      	movs	r4, r0
 8006854:	0008      	movs	r0, r1
 8006856:	0011      	movs	r1, r2
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	f7fb f89e 	bl	800199a <_fstat>
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	d103      	bne.n	800686a <_fstat_r+0x1e>
 8006862:	682b      	ldr	r3, [r5, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d000      	beq.n	800686a <_fstat_r+0x1e>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	20000ab4 	.word	0x20000ab4

08006870 <_isatty_r>:
 8006870:	2300      	movs	r3, #0
 8006872:	b570      	push	{r4, r5, r6, lr}
 8006874:	4d06      	ldr	r5, [pc, #24]	@ (8006890 <_isatty_r+0x20>)
 8006876:	0004      	movs	r4, r0
 8006878:	0008      	movs	r0, r1
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	f7fb f89b 	bl	80019b6 <_isatty>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d103      	bne.n	800688c <_isatty_r+0x1c>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d000      	beq.n	800688c <_isatty_r+0x1c>
 800688a:	6023      	str	r3, [r4, #0]
 800688c:	bd70      	pop	{r4, r5, r6, pc}
 800688e:	46c0      	nop			@ (mov r8, r8)
 8006890:	20000ab4 	.word	0x20000ab4

08006894 <_sbrk_r>:
 8006894:	2300      	movs	r3, #0
 8006896:	b570      	push	{r4, r5, r6, lr}
 8006898:	4d06      	ldr	r5, [pc, #24]	@ (80068b4 <_sbrk_r+0x20>)
 800689a:	0004      	movs	r4, r0
 800689c:	0008      	movs	r0, r1
 800689e:	602b      	str	r3, [r5, #0]
 80068a0:	f7fb f89e 	bl	80019e0 <_sbrk>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d103      	bne.n	80068b0 <_sbrk_r+0x1c>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d000      	beq.n	80068b0 <_sbrk_r+0x1c>
 80068ae:	6023      	str	r3, [r4, #0]
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
 80068b2:	46c0      	nop			@ (mov r8, r8)
 80068b4:	20000ab4 	.word	0x20000ab4

080068b8 <memchr>:
 80068b8:	b2c9      	uxtb	r1, r1
 80068ba:	1882      	adds	r2, r0, r2
 80068bc:	4290      	cmp	r0, r2
 80068be:	d101      	bne.n	80068c4 <memchr+0xc>
 80068c0:	2000      	movs	r0, #0
 80068c2:	4770      	bx	lr
 80068c4:	7803      	ldrb	r3, [r0, #0]
 80068c6:	428b      	cmp	r3, r1
 80068c8:	d0fb      	beq.n	80068c2 <memchr+0xa>
 80068ca:	3001      	adds	r0, #1
 80068cc:	e7f6      	b.n	80068bc <memchr+0x4>
	...

080068d0 <_init>:
 80068d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d6:	bc08      	pop	{r3}
 80068d8:	469e      	mov	lr, r3
 80068da:	4770      	bx	lr

080068dc <_fini>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	46c0      	nop			@ (mov r8, r8)
 80068e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e2:	bc08      	pop	{r3}
 80068e4:	469e      	mov	lr, r3
 80068e6:	4770      	bx	lr
